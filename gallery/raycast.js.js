(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*
  tags: advanced

  <p>
  In this demo, it is shown how to implement 3D object picking.
  If you click on an object, an outline is drawn around it.
  </p>
 */

var canvas = document.body.appendChild(document.createElement('canvas'));
var fit = require('canvas-fit');
var regl = require('../regl')({ canvas: canvas });
var mat4 = require('gl-mat4');
var vec3 = require('gl-vec3');
window.addEventListener('resize', fit(canvas), false);
var bunny = require('bunny');
var normals = require('angle-normals');
var mp = require('mouse-position')(canvas);
var mb = require('mouse-pressed')(canvas);

var viewMatrix = new Float32Array([1, -0, 0, 0, 0, 0.876966655254364, 0.48055124282836914, 0, -0, -0.48055124282836914, 0.876966655254364, 0, 0, 0, -11.622776985168457, 1]);
var projectionMatrix = new Float32Array(16);

// Below is a slightly modified version of this code:
// https://github.com/substack/ray-triangle-intersection
// It does intersection between ray and triangle.
// With the original version, we had no way of accessing 't'
// But we really needed that value.
function intersectTriangle(out, pt, dir, tri) {
  var EPSILON = 0.000001;
  var edge1 = [0, 0, 0];
  var edge2 = [0, 0, 0];
  var tvec = [0, 0, 0];
  var pvec = [0, 0, 0];
  var qvec = [0, 0, 0];

  vec3.subtract(edge1, tri[1], tri[0]);
  vec3.subtract(edge2, tri[2], tri[0]);

  vec3.cross(pvec, dir, edge2);
  var det = vec3.dot(edge1, pvec);

  if (det < EPSILON) return null;
  vec3.subtract(tvec, pt, tri[0]);
  var u = vec3.dot(tvec, pvec);
  if (u < 0 || u > det) return null;
  vec3.cross(qvec, tvec, edge1);
  var v = vec3.dot(dir, qvec);
  if (v < 0 || u + v > det) return null;

  var t = vec3.dot(edge2, qvec) / det;
  out[0] = pt[0] + t * dir[0];
  out[1] = pt[1] + t * dir[1];
  out[2] = pt[2] + t * dir[2];
  return t;
}

//
// Create plane geometry
//

var planeElements = [];
var planePosition = [];
var planeNormal = [];

planePosition.push([-0.5, 0.0, -0.5]);
planePosition.push([+0.5, 0.0, -0.5]);
planePosition.push([-0.5, 0.0, +0.5]);
planePosition.push([+0.5, 0.0, +0.5]);

planeNormal.push([0.0, 1.0, 0.0]);
planeNormal.push([0.0, 1.0, 0.0]);
planeNormal.push([0.0, 1.0, 0.0]);
planeNormal.push([0.0, 1.0, 0.0]);

planeElements.push([3, 1, 0]);
planeElements.push([0, 2, 3]);

//
// Create box geometry.
//

var boxPosition = [
// side faces
[-0.5, +0.5, +0.5], [+0.5, +0.5, +0.5], [+0.5, -0.5, +0.5], [-0.5, -0.5, +0.5], // positive z face.
[+0.5, +0.5, +0.5], [+0.5, +0.5, -0.5], [+0.5, -0.5, -0.5], [+0.5, -0.5, +0.5], // positive x face
[+0.5, +0.5, -0.5], [-0.5, +0.5, -0.5], [-0.5, -0.5, -0.5], [+0.5, -0.5, -0.5], // negative z face
[-0.5, +0.5, -0.5], [-0.5, +0.5, +0.5], [-0.5, -0.5, +0.5], [-0.5, -0.5, -0.5], // negative x face.
[-0.5, +0.5, -0.5], [+0.5, +0.5, -0.5], [+0.5, +0.5, +0.5], [-0.5, +0.5, +0.5], // top face
[-0.5, -0.5, -0.5], [+0.5, -0.5, -0.5], [+0.5, -0.5, +0.5], [-0.5, -0.5, +0.5] // bottom face
];

var boxElements = [[2, 1, 0], [2, 0, 3], [6, 5, 4], [6, 4, 7], [10, 9, 8], [10, 8, 11], [14, 13, 12], [14, 12, 15], [18, 17, 16], [18, 16, 19], [20, 21, 22], [23, 20, 22]];

// all the normals of a single block.
var boxNormal = [
// side faces
[0.0, 0.0, +1.0], [0.0, 0.0, +1.0], [0.0, 0.0, +1.0], [0.0, 0.0, +1.0], [+1.0, 0.0, 0.0], [+1.0, 0.0, 0.0], [+1.0, 0.0, 0.0], [+1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, 0.0, -1.0], [0.0, 0.0, -1.0], [0.0, 0.0, -1.0], [-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0],
// top
[0.0, +1.0, 0.0], [0.0, +1.0, 0.0], [0.0, +1.0, 0.0], [0.0, +1.0, 0.0],
// bottom
[0.0, -1.0, 0.0], [0.0, -1.0, 0.0], [0.0, -1.0, 0.0], [0.0, -1.0, 0.0]];

// keeps track of all global state.
var globalScope = regl({
  uniforms: {
    lightDir: [0.39, 0.87, 0.29],
    view: function () {
      return viewMatrix;
    },
    projection: function ({ viewportWidth, viewportHeight }) {
      return mat4.perspective(projectionMatrix, Math.PI / 4, viewportWidth / viewportHeight, 0.01, 1000);
    }
  }
});

// render object with phong shading.
var drawNormal = regl({
  frag: '\n  precision mediump float;\n\n  varying vec3 vNormal;\n  varying vec3 vPosition;\n\n  uniform float ambientLightAmount;\n  uniform float diffuseLightAmount;\n  uniform vec3 color;\n  uniform vec3 lightDir;\n\n  void main () {\n    vec3 ambient = ambientLightAmount * color;\n    float cosTheta = dot(vNormal, lightDir);\n    vec3 diffuse = diffuseLightAmount * color * clamp(cosTheta , 0.0, 1.0 );\n\n    gl_FragColor = vec4((ambient + diffuse), 1.0);\n  }',
  vert: '\n  precision mediump float;\n\n  attribute vec3 position;\n  attribute vec3 normal;\n\n  varying vec3 vPosition;\n  varying vec3 vNormal;\n\n  uniform mat4 projection, view, model;\n\n  void main() {\n    vec4 worldSpacePosition = model * vec4(position, 1);\n\n    vPosition = worldSpacePosition.xyz;\n    vNormal = normal;\n\n    gl_Position = projection * view * worldSpacePosition;\n  }'
});

// render the object slightly bigger than it should be.  this is used
// to draw the outline.  but we don't write to the depth buffer.  this
// allows us to draw the object(that we wish to draw the outline for)
// onto the slightly bigger object, thus forming the outine.
var drawOutline = regl({
  frag: '\n  precision mediump float;\n\n  void main () {\n    gl_FragColor = vec4(vec3(0.7, 0.6, 0.0), 1.0);\n  }',
  vert: '\n  precision mediump float;\n\n  attribute vec3 position;\n  attribute vec3 normal;\n\n  uniform mat4 projection, view, model;\n  uniform bool isRound;\n\n  void main() {\n    float s = 0.19;\n    vec4 worldSpacePosition = model * vec4(\n      // for objects with lots of jagged edges, the ususal approach doesn\'t work.\n      // We use an alternative way of enlarging the object for such objects.\n      isRound ? (position + normal * s) : (position * (0.3*s+1.0)),\n      1);\n    gl_Position = projection * view * worldSpacePosition;\n  }',

  depth: {
    enable: true,
    mask: false // DONT write to depth buffer!
  }
});

function Mesh(elements, position, normal) {
  this.elements = elements;
  this.position = position;
  this.normal = normal;
}

function createModelMatrix(props) {
  var m = mat4.identity([]);

  mat4.translate(m, m, props.translate);

  var s = props.scale;
  mat4.scale(m, m, [s, s, s]);

  return m;
}

Mesh.prototype.draw = regl({
  uniforms: {
    model: function (_, props, batchId) {
      return createModelMatrix(props);
    },
    ambientLightAmount: 0.3,
    diffuseLightAmount: 0.7,
    color: regl.prop('color'),
    isRound: regl.prop('isRound')
  },
  attributes: {
    position: regl.this('position'),
    normal: regl.this('normal')
  },
  elements: regl.this('elements'),
  cull: {
    enable: true
  }
});

var bunnyMesh = new Mesh(bunny.cells, bunny.positions, normals(bunny.cells, bunny.positions));
var boxMesh = new Mesh(boxElements, boxPosition, boxNormal);
var planeMesh = new Mesh(planeElements, planePosition, planeNormal);

var meshes = [{ scale: 80.0, translate: [0.0, 0.0, 0.0], color: [0.5, 0.5, 0.5], mesh: planeMesh }, { scale: 0.2, translate: [0.0, 0.0, 0.0], color: [0.6, 0.0, 0.0], mesh: bunnyMesh }, { scale: 0.3, translate: [-6.0, 0.0, -3.0], color: [0.6, 0.6, 0.0], mesh: bunnyMesh }, { scale: 0.16, translate: [3.0, 0.0, 2.0], color: [0.2, 0.5, 0.6], mesh: bunnyMesh }, { scale: 2.0, translate: [4.0, 1.0, 0.0], color: [0.6, 0.0, 0.0], mesh: boxMesh }, { scale: 1.3, translate: [-3.0, 0.6, -4.0], color: [0.0, 0.6, 0.0], mesh: boxMesh }, { scale: 0.7, translate: [-3.0, 0.5, 4.0], color: [0.0, 0.0, 0.8], mesh: boxMesh }];

var iSelectedMesh = -1;

// on click ,we raycast.
mb.on('down', function () {
  var vp = mat4.multiply([], projectionMatrix, viewMatrix);
  var invVp = mat4.invert([], vp);

  // get a single point on the camera ray.
  var rayPoint = vec3.transformMat4([], [2.0 * mp[0] / canvas.width - 1.0, -2.0 * mp[1] / canvas.height + 1.0, 0.0], invVp);

  // get the position of the camera.
  var rayOrigin = vec3.transformMat4([], [0, 0, 0], mat4.invert([], viewMatrix));

  var rayDir = vec3.normalize([], vec3.subtract([], rayPoint, rayOrigin));

  // now we iterate through all meshes, and find the closest mesh that intersects the camera ray.
  var minT = 10000000.0;
  for (var i = 0; i < meshes.length; i++) {
    var m = meshes[i];

    var modelMatrix = createModelMatrix(m);

    // we must check all triangles of the mesh.
    for (var j = 0; j < m.mesh.elements.length; j++) {
      if (m.mesh === planeMesh) {
        continue; // we don't allow clicking the plane mesh.
      }
      var f = m.mesh.elements[j];
      // apply model matrix on the triangle.
      var tri = [vec3.transformMat4([], m.mesh.position[f[0]], modelMatrix), vec3.transformMat4([], m.mesh.position[f[1]], modelMatrix), vec3.transformMat4([], m.mesh.position[f[2]], modelMatrix)];
      var res = [];
      var t = intersectTriangle(res, rayPoint, rayDir, tri);
      if (t !== null) {
        if (t < minT) {
          // mesh was closer than any object thus far.
          // for the time being, make it the selected object.
          minT = t;
          iSelectedMesh = i;
          break;
        }
      }
    }
  }
});

regl.frame(function ({ tick }) {
  regl.clear({
    color: [0, 0, 0, 255],
    depth: 1
  });

  globalScope(function () {
    var m;
    for (var i = 0; i < meshes.length; i++) {
      m = meshes[i];
      if (i !== iSelectedMesh) {
        // then draw object normally.
        drawNormal(function () {
          m.mesh.draw(m);
        });
      }
    }

    // we need to render the selected object last.
    if (iSelectedMesh !== -1) {
      m = meshes[iSelectedMesh];

      drawOutline(function () {
        m.isRound = m.mesh !== boxMesh;
        m.mesh.draw(m);
      });

      // then draw object normally.
      drawNormal(function () {
        m.mesh.draw(m);
      });
    }
  });
});

},{"../regl":121,"angle-normals":38,"bunny":39,"canvas-fit":40,"gl-mat4":58,"gl-vec3":91,"mouse-position":119,"mouse-pressed":120}],2:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var values = require('./util/values');
var bufferTypes = require('./constants/dtypes.json');
var isTypedArray = require('./util/is-typed-array');
var isNDArrayLike = require('./util/is-ndarray');
var primitives = require('./constants/primitives.json');

var GL_FLOAT = 5126;
var GL_ARRAY_BUFFER = 34962;
var GL_ELEMENT_ARRAY_BUFFER = 34963;

var VAO_OPTIONS = ['attributes', 'elements', 'offset', 'count', 'primitive', 'instances'];

function AttributeRecord() {
  this.state = 0;

  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.w = 0.0;

  this.buffer = null;
  this.size = 0;
  this.normalized = false;
  this.type = GL_FLOAT;
  this.offset = 0;
  this.stride = 0;
  this.divisor = 0;
}

module.exports = function wrapAttributeState(gl, extensions, limits, stats, bufferState, elementState, drawState) {
  var NUM_ATTRIBUTES = limits.maxAttributes;
  var attributeBindings = new Array(NUM_ATTRIBUTES);
  for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
    attributeBindings[i] = new AttributeRecord();
  }
  var vaoCount = 0;
  var vaoSet = {};

  var state = {
    Record: AttributeRecord,
    scope: {},
    state: attributeBindings,
    currentVAO: null,
    targetVAO: null,
    restore: extVAO() ? restoreVAO : function () {},
    createVAO: createVAO,
    getVAO: getVAO,
    destroyBuffer: destroyBuffer,
    setVAO: extVAO() ? setVAOEXT : setVAOEmulated,
    clear: extVAO() ? destroyVAOEXT : function () {}
  };

  function destroyBuffer(buffer) {
    for (var i = 0; i < attributeBindings.length; ++i) {
      var record = attributeBindings[i];
      if (record.buffer === buffer) {
        gl.disableVertexAttribArray(i);
        record.buffer = null;
      }
    }
  }

  function extVAO() {
    return extensions.oes_vertex_array_object;
  }

  function extInstanced() {
    return extensions.angle_instanced_arrays;
  }

  function getVAO(vao) {
    if (typeof vao === 'function' && vao._vao) {
      return vao._vao;
    }
    return null;
  }

  function setVAOEXT(vao) {
    if (vao === state.currentVAO) {
      return;
    }
    var ext = extVAO();
    if (vao) {
      ext.bindVertexArrayOES(vao.vao);
    } else {
      ext.bindVertexArrayOES(null);
    }
    state.currentVAO = vao;
  }

  function setVAOEmulated(vao) {
    if (vao === state.currentVAO) {
      return;
    }
    if (vao) {
      vao.bindAttrs();
    } else {
      var exti = extInstanced();
      for (var i = 0; i < attributeBindings.length; ++i) {
        var binding = attributeBindings[i];
        if (binding.buffer) {
          gl.enableVertexAttribArray(i);
          binding.buffer.bind();
          gl.vertexAttribPointer(i, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);
          if (exti && binding.divisor) {
            exti.vertexAttribDivisorANGLE(i, binding.divisor);
          }
        } else {
          gl.disableVertexAttribArray(i);
          gl.vertexAttrib4f(i, binding.x, binding.y, binding.z, binding.w);
        }
      }
      if (drawState.elements) {
        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, drawState.elements.buffer.buffer);
      } else {
        gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, null);
      }
    }
    state.currentVAO = vao;
  }

  function destroyVAOEXT() {
    values(vaoSet).forEach(function (vao) {
      vao.destroy();
    });
  }

  function REGLVAO() {
    this.id = ++vaoCount;
    this.attributes = [];
    this.elements = null;
    this.ownsElements = false;
    this.count = 0;
    this.offset = 0;
    this.instances = -1;
    this.primitive = 4;
    var extension = extVAO();
    if (extension) {
      this.vao = extension.createVertexArrayOES();
    } else {
      this.vao = null;
    }
    vaoSet[this.id] = this;
    this.buffers = [];
  }

  REGLVAO.prototype.bindAttrs = function () {
    var exti = extInstanced();
    var attributes = this.attributes;
    for (var i = 0; i < attributes.length; ++i) {
      var attr = attributes[i];
      if (attr.buffer) {
        gl.enableVertexAttribArray(i);
        gl.bindBuffer(GL_ARRAY_BUFFER, attr.buffer.buffer);
        gl.vertexAttribPointer(i, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);
        if (exti && attr.divisor) {
          exti.vertexAttribDivisorANGLE(i, attr.divisor);
        }
      } else {
        gl.disableVertexAttribArray(i);
        gl.vertexAttrib4f(i, attr.x, attr.y, attr.z, attr.w);
      }
    }
    for (var j = attributes.length; j < NUM_ATTRIBUTES; ++j) {
      gl.disableVertexAttribArray(j);
    }
    var elements = elementState.getElements(this.elements);
    if (elements) {
      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements.buffer.buffer);
    } else {
      gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, null);
    }
  };

  REGLVAO.prototype.refresh = function () {
    var ext = extVAO();
    if (ext) {
      ext.bindVertexArrayOES(this.vao);
      this.bindAttrs();
      state.currentVAO = null;
      ext.bindVertexArrayOES(null);
    }
  };

  REGLVAO.prototype.destroy = function () {
    if (this.vao) {
      var extension = extVAO();
      if (this === state.currentVAO) {
        state.currentVAO = null;
        extension.bindVertexArrayOES(null);
      }
      extension.deleteVertexArrayOES(this.vao);
      this.vao = null;
    }
    if (this.ownsElements) {
      this.elements.destroy();
      this.elements = null;
      this.ownsElements = false;
    }
    if (vaoSet[this.id]) {
      delete vaoSet[this.id];
      stats.vaoCount -= 1;
    }
  };

  function restoreVAO() {
    var ext = extVAO();
    if (ext) {
      values(vaoSet).forEach(function (vao) {
        vao.refresh();
      });
    }
  }

  function createVAO(_attr) {
    var vao = new REGLVAO();
    stats.vaoCount += 1;

    function updateVAO(options) {
      var attributes;
      if (Array.isArray(options)) {
        attributes = options;
        if (vao.elements && vao.ownsElements) {
          vao.elements.destroy();
        }
        vao.elements = null;
        vao.ownsElements = false;
        vao.offset = 0;
        vao.count = 0;
        vao.instances = -1;
        vao.primitive = 4;
      } else {
        check(typeof options === 'object', 'invalid arguments for create vao');
        check('attributes' in options, 'must specify attributes for vao');
        if (options.elements) {
          var elements = options.elements;
          if (vao.ownsElements) {
            if (typeof elements === 'function' && elements._reglType === 'elements') {
              vao.elements.destroy();
              vao.ownsElements = false;
            } else {
              vao.elements(elements);
              vao.ownsElements = false;
            }
          } else if (elementState.getElements(options.elements)) {
            vao.elements = options.elements;
            vao.ownsElements = false;
          } else {
            vao.elements = elementState.create(options.elements);
            vao.ownsElements = true;
          }
        } else {
          vao.elements = null;
          vao.ownsElements = false;
        }
        attributes = options.attributes;

        // set default vao
        vao.offset = 0;
        vao.count = -1;
        vao.instances = -1;
        vao.primitive = 4;

        // copy element properties
        if (vao.elements) {
          vao.count = vao.elements._elements.vertCount;
          vao.primitive = vao.elements._elements.primType;
        }

        if ('offset' in options) {
          vao.offset = options.offset | 0;
        }
        if ('count' in options) {
          vao.count = options.count | 0;
        }
        if ('instances' in options) {
          vao.instances = options.instances | 0;
        }
        if ('primitive' in options) {
          check(options.primitive in primitives, 'bad primitive type: ' + options.primitive);
          vao.primitive = primitives[options.primitive];
        }

        check.optional(function () {
          var keys = sortedObjectKeys(options);
          for (var i = 0; i < keys.length; ++i) {
            check(VAO_OPTIONS.indexOf(keys[i]) >= 0, 'invalid option for vao: "' + keys[i] + '" valid options are ' + VAO_OPTIONS);
          }
        });
        check(Array.isArray(attributes), 'attributes must be an array');
      }

      check(attributes.length < NUM_ATTRIBUTES, 'too many attributes');
      check(attributes.length > 0, 'must specify at least one attribute');

      var bufUpdated = {};
      var nattributes = vao.attributes;
      nattributes.length = attributes.length;
      for (var i = 0; i < attributes.length; ++i) {
        var spec = attributes[i];
        var rec = nattributes[i] = new AttributeRecord();
        var data = spec.data || spec;
        if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {
          var buf;
          if (vao.buffers[i]) {
            buf = vao.buffers[i];
            if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) {
              buf.subdata(data);
            } else {
              buf.destroy();
              vao.buffers[i] = null;
            }
          }
          if (!vao.buffers[i]) {
            buf = vao.buffers[i] = bufferState.create(spec, GL_ARRAY_BUFFER, false, true);
          }
          rec.buffer = bufferState.getBuffer(buf);
          rec.size = rec.buffer.dimension | 0;
          rec.normalized = false;
          rec.type = rec.buffer.dtype;
          rec.offset = 0;
          rec.stride = 0;
          rec.divisor = 0;
          rec.state = 1;
          bufUpdated[i] = 1;
        } else if (bufferState.getBuffer(spec)) {
          rec.buffer = bufferState.getBuffer(spec);
          rec.size = rec.buffer.dimension | 0;
          rec.normalized = false;
          rec.type = rec.buffer.dtype;
          rec.offset = 0;
          rec.stride = 0;
          rec.divisor = 0;
          rec.state = 1;
        } else if (bufferState.getBuffer(spec.buffer)) {
          rec.buffer = bufferState.getBuffer(spec.buffer);
          rec.size = (+spec.size || rec.buffer.dimension) | 0;
          rec.normalized = !!spec.normalized || false;
          if ('type' in spec) {
            check.parameter(spec.type, bufferTypes, 'invalid buffer type');
            rec.type = bufferTypes[spec.type];
          } else {
            rec.type = rec.buffer.dtype;
          }
          rec.offset = (spec.offset || 0) | 0;
          rec.stride = (spec.stride || 0) | 0;
          rec.divisor = (spec.divisor || 0) | 0;
          rec.state = 1;

          check(rec.size >= 1 && rec.size <= 4, 'size must be between 1 and 4');
          check(rec.offset >= 0, 'invalid offset');
          check(rec.stride >= 0 && rec.stride <= 255, 'stride must be between 0 and 255');
          check(rec.divisor >= 0, 'divisor must be positive');
          check(!rec.divisor || !!extensions.angle_instanced_arrays, 'ANGLE_instanced_arrays must be enabled to use divisor');
        } else if ('x' in spec) {
          check(i > 0, 'first attribute must not be a constant');
          rec.x = +spec.x || 0;
          rec.y = +spec.y || 0;
          rec.z = +spec.z || 0;
          rec.w = +spec.w || 0;
          rec.state = 2;
        } else {
          check(false, 'invalid attribute spec for location ' + i);
        }
      }

      // retire unused buffers
      for (var j = 0; j < vao.buffers.length; ++j) {
        if (!bufUpdated[j] && vao.buffers[j]) {
          vao.buffers[j].destroy();
          vao.buffers[j] = null;
        }
      }

      vao.refresh();
      return updateVAO;
    }

    updateVAO.destroy = function () {
      for (var j = 0; j < vao.buffers.length; ++j) {
        if (vao.buffers[j]) {
          vao.buffers[j].destroy();
        }
      }
      vao.buffers.length = 0;

      if (vao.ownsElements) {
        vao.elements.destroy();
        vao.elements = null;
        vao.ownsElements = false;
      }

      vao.destroy();
    };

    updateVAO._vao = vao;
    updateVAO._reglType = 'vao';

    return updateVAO(_attr);
  }

  return state;
};

},{"./constants/dtypes.json":5,"./constants/primitives.json":6,"./util/check":21,"./util/is-ndarray":28,"./util/is-typed-array":30,"./util/sorted-object-keys":34,"./util/values":36}],3:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var isTypedArray = require('./util/is-typed-array');
var isNDArrayLike = require('./util/is-ndarray');
var values = require('./util/values');
var pool = require('./util/pool');
var flattenUtil = require('./util/flatten');

var arrayFlatten = flattenUtil.flatten;
var arrayShape = flattenUtil.shape;

var arrayTypes = require('./constants/arraytypes.json');
var bufferTypes = require('./constants/dtypes.json');
var usageTypes = require('./constants/usage.json');

var GL_STATIC_DRAW = 0x88E4;
var GL_STREAM_DRAW = 0x88E0;

var GL_UNSIGNED_BYTE = 5121;
var GL_FLOAT = 5126;

var DTYPES_SIZES = [];
DTYPES_SIZES[5120] = 1; // int8
DTYPES_SIZES[5122] = 2; // int16
DTYPES_SIZES[5124] = 4; // int32
DTYPES_SIZES[5121] = 1; // uint8
DTYPES_SIZES[5123] = 2; // uint16
DTYPES_SIZES[5125] = 4; // uint32
DTYPES_SIZES[5126] = 4; // float32

function typedArrayCode(data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0;
}

function copyArray(out, inp) {
  for (var i = 0; i < inp.length; ++i) {
    out[i] = inp[i];
  }
}

function transpose(result, data, shapeX, shapeY, strideX, strideY, offset) {
  var ptr = 0;
  for (var i = 0; i < shapeX; ++i) {
    for (var j = 0; j < shapeY; ++j) {
      result[ptr++] = data[strideX * i + strideY * j + offset];
    }
  }
}

module.exports = function wrapBufferState(gl, stats, config, destroyBuffer) {
  var bufferCount = 0;
  var bufferSet = {};

  function REGLBuffer(type) {
    this.id = bufferCount++;
    this.buffer = gl.createBuffer();
    this.type = type;
    this.usage = GL_STATIC_DRAW;
    this.byteLength = 0;
    this.dimension = 1;
    this.dtype = GL_UNSIGNED_BYTE;

    this.persistentData = null;

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  REGLBuffer.prototype.bind = function () {
    gl.bindBuffer(this.type, this.buffer);
  };

  REGLBuffer.prototype.destroy = function () {
    destroy(this);
  };

  var streamPool = [];

  function createStream(type, data) {
    var buffer = streamPool.pop();
    if (!buffer) {
      buffer = new REGLBuffer(type);
    }
    buffer.bind();
    initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
    return buffer;
  }

  function destroyStream(stream) {
    streamPool.push(stream);
  }

  function initBufferFromTypedArray(buffer, data, usage) {
    buffer.byteLength = data.byteLength;
    gl.bufferData(buffer.type, data, usage);
  }

  function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {
    var shape;
    buffer.usage = usage;
    if (Array.isArray(data)) {
      buffer.dtype = dtype || GL_FLOAT;
      if (data.length > 0) {
        var flatData;
        if (Array.isArray(data[0])) {
          shape = arrayShape(data);
          var dim = 1;
          for (var i = 1; i < shape.length; ++i) {
            dim *= shape[i];
          }
          buffer.dimension = dim;
          flatData = arrayFlatten(data, shape, buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else if (typeof data[0] === 'number') {
          buffer.dimension = dimension;
          var typedData = pool.allocType(buffer.dtype, data.length);
          copyArray(typedData, data);
          initBufferFromTypedArray(buffer, typedData, usage);
          if (persist) {
            buffer.persistentData = typedData;
          } else {
            pool.freeType(typedData);
          }
        } else if (isTypedArray(data[0])) {
          buffer.dimension = data[0].length;
          buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT;
          flatData = arrayFlatten(data, [data.length, data[0].length], buffer.dtype);
          initBufferFromTypedArray(buffer, flatData, usage);
          if (persist) {
            buffer.persistentData = flatData;
          } else {
            pool.freeType(flatData);
          }
        } else {
          check.raise('invalid buffer data');
        }
      }
    } else if (isTypedArray(data)) {
      buffer.dtype = dtype || typedArrayCode(data);
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
      }
    } else if (isNDArrayLike(data)) {
      shape = data.shape;
      var stride = data.stride;
      var offset = data.offset;

      var shapeX = 0;
      var shapeY = 0;
      var strideX = 0;
      var strideY = 0;
      if (shape.length === 1) {
        shapeX = shape[0];
        shapeY = 1;
        strideX = stride[0];
        strideY = 0;
      } else if (shape.length === 2) {
        shapeX = shape[0];
        shapeY = shape[1];
        strideX = stride[0];
        strideY = stride[1];
      } else {
        check.raise('invalid shape');
      }

      buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT;
      buffer.dimension = shapeY;

      var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);
      transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, offset);
      initBufferFromTypedArray(buffer, transposeData, usage);
      if (persist) {
        buffer.persistentData = transposeData;
      } else {
        pool.freeType(transposeData);
      }
    } else if (data instanceof ArrayBuffer) {
      buffer.dtype = GL_UNSIGNED_BYTE;
      buffer.dimension = dimension;
      initBufferFromTypedArray(buffer, data, usage);
      if (persist) {
        buffer.persistentData = new Uint8Array(new Uint8Array(data));
      }
    } else {
      check.raise('invalid buffer data');
    }
  }

  function destroy(buffer) {
    stats.bufferCount--;

    // remove attribute link
    destroyBuffer(buffer);

    var handle = buffer.buffer;
    check(handle, 'buffer must not be deleted already');
    gl.deleteBuffer(handle);
    buffer.buffer = null;
    delete bufferSet[buffer.id];
  }

  function createBuffer(options, type, deferInit, persistent) {
    stats.bufferCount++;

    var buffer = new REGLBuffer(type);
    bufferSet[buffer.id] = buffer;

    function reglBuffer(options) {
      var usage = GL_STATIC_DRAW;
      var data = null;
      var byteLength = 0;
      var dtype = 0;
      var dimension = 1;
      if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options) || options instanceof ArrayBuffer) {
        data = options;
      } else if (typeof options === 'number') {
        byteLength = options | 0;
      } else if (options) {
        check.type(options, 'object', 'buffer arguments must be an object, a number or an array');

        if ('data' in options) {
          check(data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for buffer');
          data = options.data;
        }

        if ('usage' in options) {
          check.parameter(options.usage, usageTypes, 'invalid buffer usage');
          usage = usageTypes[options.usage];
        }

        if ('type' in options) {
          check.parameter(options.type, bufferTypes, 'invalid buffer type');
          dtype = bufferTypes[options.type];
        }

        if ('dimension' in options) {
          check.type(options.dimension, 'number', 'invalid dimension');
          dimension = options.dimension | 0;
        }

        if ('length' in options) {
          check.nni(byteLength, 'buffer length must be a nonnegative integer');
          byteLength = options.length | 0;
        }
      }

      buffer.bind();
      if (!data) {
        // #475
        if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
        buffer.dtype = dtype || GL_UNSIGNED_BYTE;
        buffer.usage = usage;
        buffer.dimension = dimension;
        buffer.byteLength = byteLength;
      } else {
        initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
      }

      if (config.profile) {
        buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
      }

      return reglBuffer;
    }

    function setSubData(data, offset) {
      check(offset + data.byteLength <= buffer.byteLength, 'invalid buffer subdata call, buffer is too small. ' + ' Can\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);

      gl.bufferSubData(buffer.type, offset, data);
    }

    function subdata(data, offset_) {
      var offset = (offset_ || 0) | 0;
      var shape;
      buffer.bind();
      if (isTypedArray(data) || data instanceof ArrayBuffer) {
        setSubData(data, offset);
      } else if (Array.isArray(data)) {
        if (data.length > 0) {
          if (typeof data[0] === 'number') {
            var converted = pool.allocType(buffer.dtype, data.length);
            copyArray(converted, data);
            setSubData(converted, offset);
            pool.freeType(converted);
          } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
            shape = arrayShape(data);
            var flatData = arrayFlatten(data, shape, buffer.dtype);
            setSubData(flatData, offset);
            pool.freeType(flatData);
          } else {
            check.raise('invalid buffer data');
          }
        }
      } else if (isNDArrayLike(data)) {
        shape = data.shape;
        var stride = data.stride;

        var shapeX = 0;
        var shapeY = 0;
        var strideX = 0;
        var strideY = 0;
        if (shape.length === 1) {
          shapeX = shape[0];
          shapeY = 1;
          strideX = stride[0];
          strideY = 0;
        } else if (shape.length === 2) {
          shapeX = shape[0];
          shapeY = shape[1];
          strideX = stride[0];
          strideY = stride[1];
        } else {
          check.raise('invalid shape');
        }
        var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);

        var transposeData = pool.allocType(dtype, shapeX * shapeY);
        transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, data.offset);
        setSubData(transposeData, offset);
        pool.freeType(transposeData);
      } else {
        check.raise('invalid data for buffer subdata');
      }
      return reglBuffer;
    }

    if (!deferInit) {
      reglBuffer(options);
    }

    reglBuffer._reglType = 'buffer';
    reglBuffer._buffer = buffer;
    reglBuffer.subdata = subdata;
    if (config.profile) {
      reglBuffer.stats = buffer.stats;
    }
    reglBuffer.destroy = function () {
      destroy(buffer);
    };

    return reglBuffer;
  }

  function restoreBuffers() {
    values(bufferSet).forEach(function (buffer) {
      buffer.buffer = gl.createBuffer();
      gl.bindBuffer(buffer.type, buffer.buffer);
      gl.bufferData(buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);
    });
  }

  if (config.profile) {
    stats.getTotalBufferSize = function () {
      var total = 0;
      // TODO: Right now, the streams are not part of the total count.
      sortedObjectKeys(bufferSet).forEach(function (key) {
        total += bufferSet[key].stats.size;
      });
      return total;
    };
  }

  return {
    create: createBuffer,

    createStream: createStream,
    destroyStream: destroyStream,

    clear: function () {
      values(bufferSet).forEach(destroy);
      streamPool.forEach(destroy);
    },

    getBuffer: function (wrapper) {
      if (wrapper && wrapper._buffer instanceof REGLBuffer) {
        return wrapper._buffer;
      }
      return null;
    },

    restore: restoreBuffers,

    _initBuffer: initBufferFromData
  };
};

},{"./constants/arraytypes.json":4,"./constants/dtypes.json":5,"./constants/usage.json":7,"./util/check":21,"./util/flatten":26,"./util/is-ndarray":28,"./util/is-typed-array":30,"./util/pool":32,"./util/sorted-object-keys":34,"./util/values":36}],4:[function(require,module,exports){
module.exports={
  "[object Int8Array]": 5120
, "[object Int16Array]": 5122
, "[object Int32Array]": 5124
, "[object Uint8Array]": 5121
, "[object Uint8ClampedArray]": 5121
, "[object Uint16Array]": 5123
, "[object Uint32Array]": 5125
, "[object Float32Array]": 5126
, "[object Float64Array]": 5121
, "[object ArrayBuffer]": 5121
}

},{}],5:[function(require,module,exports){
module.exports={
  "int8": 5120
, "int16": 5122
, "int32": 5124
, "uint8": 5121
, "uint16": 5123
, "uint32": 5125
, "float": 5126
, "float32": 5126
}

},{}],6:[function(require,module,exports){
module.exports={
  "points": 0,
  "point": 0,
  "lines": 1,
  "line": 1,
  "line loop": 2,
  "line strip": 3,
  "triangles": 4,
  "triangle": 4,
  "triangle strip": 5,
  "triangle fan": 6
}

},{}],7:[function(require,module,exports){
module.exports={
  "static": 35044,
  "dynamic": 35048,
  "stream": 35040
}

},{}],8:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var extend = require('./util/extend');
var createEnvironment = require('./util/codegen');
var loop = require('./util/loop');
var isTypedArray = require('./util/is-typed-array');
var isNDArray = require('./util/is-ndarray');
var isArrayLike = require('./util/is-array-like');
var dynamic = require('./dynamic');

var primTypes = require('./constants/primitives.json');
var glTypes = require('./constants/dtypes.json');

// "cute" names for vector components
var CUTE_COMPONENTS = 'xyzw'.split('');

var GL_UNSIGNED_BYTE = 5121;

var ATTRIB_STATE_POINTER = 1;
var ATTRIB_STATE_CONSTANT = 2;

var DYN_FUNC = 0;
var DYN_PROP = 1;
var DYN_CONTEXT = 2;
var DYN_STATE = 3;
var DYN_THUNK = 4;
var DYN_CONSTANT = 5;
var DYN_ARRAY = 6;

var S_DITHER = 'dither';
var S_BLEND_ENABLE = 'blend.enable';
var S_BLEND_COLOR = 'blend.color';
var S_BLEND_EQUATION = 'blend.equation';
var S_BLEND_FUNC = 'blend.func';
var S_DEPTH_ENABLE = 'depth.enable';
var S_DEPTH_FUNC = 'depth.func';
var S_DEPTH_RANGE = 'depth.range';
var S_DEPTH_MASK = 'depth.mask';
var S_COLOR_MASK = 'colorMask';
var S_CULL_ENABLE = 'cull.enable';
var S_CULL_FACE = 'cull.face';
var S_FRONT_FACE = 'frontFace';
var S_LINE_WIDTH = 'lineWidth';
var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';
var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';
var S_SAMPLE_ALPHA = 'sample.alpha';
var S_SAMPLE_ENABLE = 'sample.enable';
var S_SAMPLE_COVERAGE = 'sample.coverage';
var S_STENCIL_ENABLE = 'stencil.enable';
var S_STENCIL_MASK = 'stencil.mask';
var S_STENCIL_FUNC = 'stencil.func';
var S_STENCIL_OPFRONT = 'stencil.opFront';
var S_STENCIL_OPBACK = 'stencil.opBack';
var S_SCISSOR_ENABLE = 'scissor.enable';
var S_SCISSOR_BOX = 'scissor.box';
var S_VIEWPORT = 'viewport';

var S_PROFILE = 'profile';

var S_FRAMEBUFFER = 'framebuffer';
var S_VERT = 'vert';
var S_FRAG = 'frag';
var S_ELEMENTS = 'elements';
var S_PRIMITIVE = 'primitive';
var S_COUNT = 'count';
var S_OFFSET = 'offset';
var S_INSTANCES = 'instances';
var S_VAO = 'vao';

var SUFFIX_WIDTH = 'Width';
var SUFFIX_HEIGHT = 'Height';

var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
var S_DRAWINGBUFFER = 'drawingBuffer';
var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;

var NESTED_OPTIONS = [S_BLEND_FUNC, S_BLEND_EQUATION, S_STENCIL_FUNC, S_STENCIL_OPFRONT, S_STENCIL_OPBACK, S_SAMPLE_COVERAGE, S_VIEWPORT, S_SCISSOR_BOX, S_POLYGON_OFFSET_OFFSET];

var GL_ARRAY_BUFFER = 34962;
var GL_ELEMENT_ARRAY_BUFFER = 34963;

var GL_FRAGMENT_SHADER = 35632;
var GL_VERTEX_SHADER = 35633;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;

var GL_CULL_FACE = 0x0B44;
var GL_BLEND = 0x0BE2;
var GL_DITHER = 0x0BD0;
var GL_STENCIL_TEST = 0x0B90;
var GL_DEPTH_TEST = 0x0B71;
var GL_SCISSOR_TEST = 0x0C11;
var GL_POLYGON_OFFSET_FILL = 0x8037;
var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
var GL_SAMPLE_COVERAGE = 0x80A0;

var GL_FLOAT = 5126;
var GL_FLOAT_VEC2 = 35664;
var GL_FLOAT_VEC3 = 35665;
var GL_FLOAT_VEC4 = 35666;
var GL_INT = 5124;
var GL_INT_VEC2 = 35667;
var GL_INT_VEC3 = 35668;
var GL_INT_VEC4 = 35669;
var GL_BOOL = 35670;
var GL_BOOL_VEC2 = 35671;
var GL_BOOL_VEC3 = 35672;
var GL_BOOL_VEC4 = 35673;
var GL_FLOAT_MAT2 = 35674;
var GL_FLOAT_MAT3 = 35675;
var GL_FLOAT_MAT4 = 35676;
var GL_SAMPLER_2D = 35678;
var GL_SAMPLER_CUBE = 35680;

var GL_TRIANGLES = 4;

var GL_FRONT = 1028;
var GL_BACK = 1029;
var GL_CW = 0x0900;
var GL_CCW = 0x0901;
var GL_MIN_EXT = 0x8007;
var GL_MAX_EXT = 0x8008;
var GL_ALWAYS = 519;
var GL_KEEP = 7680;
var GL_ZERO = 0;
var GL_ONE = 1;
var GL_FUNC_ADD = 0x8006;
var GL_LESS = 513;

var GL_FRAMEBUFFER = 0x8D40;
var GL_COLOR_ATTACHMENT0 = 0x8CE0;

var blendFuncs = {
  '0': 0,
  '1': 1,
  'zero': 0,
  'one': 1,
  'src color': 768,
  'one minus src color': 769,
  'src alpha': 770,
  'one minus src alpha': 771,
  'dst color': 774,
  'one minus dst color': 775,
  'dst alpha': 772,
  'one minus dst alpha': 773,
  'constant color': 32769,
  'one minus constant color': 32770,
  'constant alpha': 32771,
  'one minus constant alpha': 32772,
  'src alpha saturate': 776

  // There are invalid values for srcRGB and dstRGB. See:
  // https://www.khronos.org/registry/webgl/specs/1.0/#6.13
  // https://github.com/KhronosGroup/WebGL/blob/0d3201f5f7ec3c0060bc1f04077461541f1987b9/conformance-suites/1.0.3/conformance/misc/webgl-specific.html#L56
};var invalidBlendCombinations = ['constant color, constant alpha', 'one minus constant color, constant alpha', 'constant color, one minus constant alpha', 'one minus constant color, one minus constant alpha', 'constant alpha, constant color', 'constant alpha, one minus constant color', 'one minus constant alpha, constant color', 'one minus constant alpha, one minus constant color'];

var compareFuncs = {
  'never': 512,
  'less': 513,
  '<': 513,
  'equal': 514,
  '=': 514,
  '==': 514,
  '===': 514,
  'lequal': 515,
  '<=': 515,
  'greater': 516,
  '>': 516,
  'notequal': 517,
  '!=': 517,
  '!==': 517,
  'gequal': 518,
  '>=': 518,
  'always': 519
};

var stencilOps = {
  '0': 0,
  'zero': 0,
  'keep': 7680,
  'replace': 7681,
  'increment': 7682,
  'decrement': 7683,
  'increment wrap': 34055,
  'decrement wrap': 34056,
  'invert': 5386
};

var shaderType = {
  'frag': GL_FRAGMENT_SHADER,
  'vert': GL_VERTEX_SHADER
};

var orientationType = {
  'cw': GL_CW,
  'ccw': GL_CCW
};

function isBufferArgs(x) {
  return Array.isArray(x) || isTypedArray(x) || isNDArray(x);
}

// Make sure viewport is processed first
function sortState(state) {
  return state.sort(function (a, b) {
    if (a === S_VIEWPORT) {
      return -1;
    } else if (b === S_VIEWPORT) {
      return 1;
    }
    return a < b ? -1 : 1;
  });
}

function Declaration(thisDep, contextDep, propDep, append) {
  this.thisDep = thisDep;
  this.contextDep = contextDep;
  this.propDep = propDep;
  this.append = append;
}

function isStatic(decl) {
  return decl && !(decl.thisDep || decl.contextDep || decl.propDep);
}

function createStaticDecl(append) {
  return new Declaration(false, false, false, append);
}

function createDynamicDecl(dyn, append) {
  var type = dyn.type;
  if (type === DYN_FUNC) {
    var numArgs = dyn.data.length;
    return new Declaration(true, numArgs >= 1, numArgs >= 2, append);
  } else if (type === DYN_THUNK) {
    var data = dyn.data;
    return new Declaration(data.thisDep, data.contextDep, data.propDep, append);
  } else if (type === DYN_CONSTANT) {
    return new Declaration(false, false, false, append);
  } else if (type === DYN_ARRAY) {
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    for (var i = 0; i < dyn.data.length; ++i) {
      var subDyn = dyn.data[i];
      if (subDyn.type === DYN_PROP) {
        propDep = true;
      } else if (subDyn.type === DYN_CONTEXT) {
        contextDep = true;
      } else if (subDyn.type === DYN_STATE) {
        thisDep = true;
      } else if (subDyn.type === DYN_FUNC) {
        thisDep = true;
        var subArgs = subDyn.data;
        if (subArgs >= 1) {
          contextDep = true;
        }
        if (subArgs >= 2) {
          propDep = true;
        }
      } else if (subDyn.type === DYN_THUNK) {
        thisDep = thisDep || subDyn.data.thisDep;
        contextDep = contextDep || subDyn.data.contextDep;
        propDep = propDep || subDyn.data.propDep;
      }
    }
    return new Declaration(thisDep, contextDep, propDep, append);
  } else {
    return new Declaration(type === DYN_STATE, type === DYN_CONTEXT, type === DYN_PROP, append);
  }
}

var SCOPE_DECL = new Declaration(false, false, false, function () {});

module.exports = function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {
  var AttributeRecord = attributeState.Record;

  var blendEquations = {
    'add': 32774,
    'subtract': 32778,
    'reverse subtract': 32779
  };
  if (extensions.ext_blend_minmax) {
    blendEquations.min = GL_MIN_EXT;
    blendEquations.max = GL_MAX_EXT;
  }

  var extInstancing = extensions.angle_instanced_arrays;
  var extDrawBuffers = extensions.webgl_draw_buffers;
  var extVertexArrays = extensions.oes_vertex_array_object;

  // ===================================================
  // ===================================================
  // WEBGL STATE
  // ===================================================
  // ===================================================
  var currentState = {
    dirty: true,
    profile: config.profile
  };
  var nextState = {};
  var GL_STATE_NAMES = [];
  var GL_FLAGS = {};
  var GL_VARIABLES = {};

  function propName(name) {
    return name.replace('.', '_');
  }

  function stateFlag(sname, cap, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    nextState[name] = currentState[name] = !!init;
    GL_FLAGS[name] = cap;
  }

  function stateVariable(sname, func, init) {
    var name = propName(sname);
    GL_STATE_NAMES.push(sname);
    if (Array.isArray(init)) {
      currentState[name] = init.slice();
      nextState[name] = init.slice();
    } else {
      currentState[name] = nextState[name] = init;
    }
    GL_VARIABLES[name] = func;
  }

  // Dithering
  stateFlag(S_DITHER, GL_DITHER);

  // Blending
  stateFlag(S_BLEND_ENABLE, GL_BLEND);
  stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);
  stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate', [GL_FUNC_ADD, GL_FUNC_ADD]);
  stateVariable(S_BLEND_FUNC, 'blendFuncSeparate', [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);

  // Depth
  stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
  stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);
  stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);
  stateVariable(S_DEPTH_MASK, 'depthMask', true);

  // Color mask
  stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);

  // Face culling
  stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
  stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);

  // Front face orientation
  stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);

  // Line width
  stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);

  // Polygon offset
  stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
  stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);

  // Sample coverage
  stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
  stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
  stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);

  // Stencil
  stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
  stateVariable(S_STENCIL_MASK, 'stencilMask', -1);
  stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);
  stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate', [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
  stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate', [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);

  // Scissor
  stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
  stateVariable(S_SCISSOR_BOX, 'scissor', [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // Viewport
  stateVariable(S_VIEWPORT, S_VIEWPORT, [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);

  // ===================================================
  // ===================================================
  // ENVIRONMENT
  // ===================================================
  // ===================================================
  var sharedState = {
    gl: gl,
    context: contextState,
    strings: stringStore,
    next: nextState,
    current: currentState,
    draw: drawState,
    elements: elementState,
    buffer: bufferState,
    shader: shaderState,
    attributes: attributeState.state,
    vao: attributeState,
    uniforms: uniformState,
    framebuffer: framebufferState,
    extensions: extensions,

    timer: timer,
    isBufferArgs: isBufferArgs
  };

  var sharedConstants = {
    primTypes: primTypes,
    compareFuncs: compareFuncs,
    blendFuncs: blendFuncs,
    blendEquations: blendEquations,
    stencilOps: stencilOps,
    glTypes: glTypes,
    orientationType: orientationType
  };

  check.optional(function () {
    sharedState.isArrayLike = isArrayLike;
  });

  if (extDrawBuffers) {
    sharedConstants.backBuffer = [GL_BACK];
    sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {
      if (i === 0) {
        return [0];
      }
      return loop(i, function (j) {
        return GL_COLOR_ATTACHMENT0 + j;
      });
    });
  }

  var drawCallCounter = 0;
  function createREGLEnvironment() {
    var env = createEnvironment();
    var link = env.link;
    var global = env.global;
    env.id = drawCallCounter++;

    env.batchId = '0';

    // link shared state
    var SHARED = link(sharedState);
    var shared = env.shared = {
      props: 'a0'
    };
    sortedObjectKeys(sharedState).forEach(function (prop) {
      shared[prop] = global.def(SHARED, '.', prop);
    });

    // Inject runtime assertion stuff for debug builds
    check.optional(function () {
      env.CHECK = link(check);
      env.commandStr = check.guessCommand();
      env.command = link(env.commandStr);
      env.assert = function (block, pred, message) {
        block('if(!(', pred, '))', this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');
      };

      sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
    });

    // Copy GL state variables over
    var nextVars = env.next = {};
    var currentVars = env.current = {};
    sortedObjectKeys(GL_VARIABLES).forEach(function (variable) {
      if (Array.isArray(currentState[variable])) {
        nextVars[variable] = global.def(shared.next, '.', variable);
        currentVars[variable] = global.def(shared.current, '.', variable);
      }
    });

    // Initialize shared constants
    var constants = env.constants = {};
    sortedObjectKeys(sharedConstants).forEach(function (name) {
      constants[name] = global.def(JSON.stringify(sharedConstants[name]));
    });

    // Helper function for calling a block
    env.invoke = function (block, x) {
      switch (x.type) {
        case DYN_FUNC:
          var argList = ['this', shared.context, shared.props, env.batchId];
          return block.def(link(x.data), '.call(', argList.slice(0, Math.max(x.data.length + 1, 4)), ')');
        case DYN_PROP:
          return block.def(shared.props, x.data);
        case DYN_CONTEXT:
          return block.def(shared.context, x.data);
        case DYN_STATE:
          return block.def('this', x.data);
        case DYN_THUNK:
          x.data.append(env, block);
          return x.data.ref;
        case DYN_CONSTANT:
          return x.data.toString();
        case DYN_ARRAY:
          return x.data.map(function (y) {
            return env.invoke(block, y);
          });
      }
    };

    env.attribCache = {};

    var scopeAttribs = {};
    env.scopeAttrib = function (name) {
      var id = stringStore.id(name);
      if (id in scopeAttribs) {
        return scopeAttribs[id];
      }
      var binding = attributeState.scope[id];
      if (!binding) {
        binding = attributeState.scope[id] = new AttributeRecord();
      }
      var result = scopeAttribs[id] = link(binding);
      return result;
    };

    return env;
  }

  // ===================================================
  // ===================================================
  // PARSING
  // ===================================================
  // ===================================================
  function parseProfile(options) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var profileEnable;
    if (S_PROFILE in staticOptions) {
      var value = !!staticOptions[S_PROFILE];
      profileEnable = createStaticDecl(function (env, scope) {
        return value;
      });
      profileEnable.enable = value;
    } else if (S_PROFILE in dynamicOptions) {
      var dyn = dynamicOptions[S_PROFILE];
      profileEnable = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn);
      });
    }

    return profileEnable;
  }

  function parseFramebuffer(options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    if (S_FRAMEBUFFER in staticOptions) {
      var framebuffer = staticOptions[S_FRAMEBUFFER];
      if (framebuffer) {
        framebuffer = framebufferState.getFramebuffer(framebuffer);
        check.command(framebuffer, 'invalid framebuffer object');
        return createStaticDecl(function (env, block) {
          var FRAMEBUFFER = env.link(framebuffer);
          var shared = env.shared;
          block.set(shared.framebuffer, '.next', FRAMEBUFFER);
          var CONTEXT = shared.context;
          block.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '.width');
          block.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '.height');
          return FRAMEBUFFER;
        });
      } else {
        return createStaticDecl(function (env, scope) {
          var shared = env.shared;
          scope.set(shared.framebuffer, '.next', 'null');
          var CONTEXT = shared.context;
          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
          scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
          return 'null';
        });
      }
    } else if (S_FRAMEBUFFER in dynamicOptions) {
      var dyn = dynamicOptions[S_FRAMEBUFFER];
      return createDynamicDecl(dyn, function (env, scope) {
        var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);
        var shared = env.shared;
        var FRAMEBUFFER_STATE = shared.framebuffer;
        var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');

        check.optional(function () {
          env.assert(scope, '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER, 'invalid framebuffer object');
        });

        scope.set(FRAMEBUFFER_STATE, '.next', FRAMEBUFFER);
        var CONTEXT = shared.context;
        scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' + CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
        scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '?' + FRAMEBUFFER + '.height:' + CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
        return FRAMEBUFFER;
      });
    } else {
      return null;
    }
  }

  function parseViewportScissor(options, framebuffer, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseBox(param) {
      if (param in staticOptions) {
        var box = staticOptions[param];
        check.commandType(box, 'object', 'invalid ' + param, env.commandStr);

        var isStatic = true;
        var x = box.x | 0;
        var y = box.y | 0;
        var w, h;
        if ('width' in box) {
          w = box.width | 0;
          check.command(w >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }
        if ('height' in box) {
          h = box.height | 0;
          check.command(h >= 0, 'invalid ' + param, env.commandStr);
        } else {
          isStatic = false;
        }

        return new Declaration(!isStatic && framebuffer && framebuffer.thisDep, !isStatic && framebuffer && framebuffer.contextDep, !isStatic && framebuffer && framebuffer.propDep, function (env, scope) {
          var CONTEXT = env.shared.context;
          var BOX_W = w;
          if (!('width' in box)) {
            BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);
          }
          var BOX_H = h;
          if (!('height' in box)) {
            BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);
          }
          return [x, y, BOX_W, BOX_H];
        });
      } else if (param in dynamicOptions) {
        var dynBox = dynamicOptions[param];
        var result = createDynamicDecl(dynBox, function (env, scope) {
          var BOX = env.invoke(scope, dynBox);

          check.optional(function () {
            env.assert(scope, BOX + '&&typeof ' + BOX + '==="object"', 'invalid ' + param);
          });

          var CONTEXT = env.shared.context;
          var BOX_X = scope.def(BOX, '.x|0');
          var BOX_Y = scope.def(BOX, '.y|0');
          var BOX_W = scope.def('"width" in ', BOX, '?', BOX, '.width|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');
          var BOX_H = scope.def('"height" in ', BOX, '?', BOX, '.height|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');

          check.optional(function () {
            env.assert(scope, BOX_W + '>=0&&' + BOX_H + '>=0', 'invalid ' + param);
          });

          return [BOX_X, BOX_Y, BOX_W, BOX_H];
        });
        if (framebuffer) {
          result.thisDep = result.thisDep || framebuffer.thisDep;
          result.contextDep = result.contextDep || framebuffer.contextDep;
          result.propDep = result.propDep || framebuffer.propDep;
        }
        return result;
      } else if (framebuffer) {
        return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function (env, scope) {
          var CONTEXT = env.shared.context;
          return [0, 0, scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH), scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)];
        });
      } else {
        return null;
      }
    }

    var viewport = parseBox(S_VIEWPORT);

    if (viewport) {
      var prevViewport = viewport;
      viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function (env, scope) {
        var VIEWPORT = prevViewport.append(env, scope);
        var CONTEXT = env.shared.context;
        scope.set(CONTEXT, '.' + S_VIEWPORT_WIDTH, VIEWPORT[2]);
        scope.set(CONTEXT, '.' + S_VIEWPORT_HEIGHT, VIEWPORT[3]);
        return VIEWPORT;
      });
    }

    return {
      viewport: viewport,
      scissor_box: parseBox(S_SCISSOR_BOX)
    };
  }

  function parseAttribLocations(options, attributes) {
    var staticOptions = options.static;
    var staticProgram = typeof staticOptions[S_FRAG] === 'string' && typeof staticOptions[S_VERT] === 'string';
    if (staticProgram) {
      if (sortedObjectKeys(attributes.dynamic).length > 0) {
        return null;
      }
      var staticAttributes = attributes.static;
      var sAttributes = sortedObjectKeys(staticAttributes);
      if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === 'number') {
        var bindings = [];
        for (var i = 0; i < sAttributes.length; ++i) {
          check(typeof staticAttributes[sAttributes[i]] === 'number', 'must specify all vertex attribute locations when using vaos');
          bindings.push([staticAttributes[sAttributes[i]] | 0, sAttributes[i]]);
        }
        return bindings;
      }
    }
    return null;
  }

  function parseProgram(options, env, attribLocations) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    function parseShader(name) {
      if (name in staticOptions) {
        var id = stringStore.id(staticOptions[name]);
        check.optional(function () {
          shaderState.shader(shaderType[name], id, check.guessCommand());
        });
        var result = createStaticDecl(function () {
          return id;
        });
        result.id = id;
        return result;
      } else if (name in dynamicOptions) {
        var dyn = dynamicOptions[name];
        return createDynamicDecl(dyn, function (env, scope) {
          var str = env.invoke(scope, dyn);
          var id = scope.def(env.shared.strings, '.id(', str, ')');
          check.optional(function () {
            scope(env.shared.shader, '.shader(', shaderType[name], ',', id, ',', env.command, ');');
          });
          return id;
        });
      }
      return null;
    }

    var frag = parseShader(S_FRAG);
    var vert = parseShader(S_VERT);

    var program = null;
    var progVar;
    if (isStatic(frag) && isStatic(vert)) {
      program = shaderState.program(vert.id, frag.id, null, attribLocations);
      progVar = createStaticDecl(function (env, scope) {
        return env.link(program);
      });
    } else {
      progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function (env, scope) {
        var SHADER_STATE = env.shared.shader;
        var fragId;
        if (frag) {
          fragId = frag.append(env, scope);
        } else {
          fragId = scope.def(SHADER_STATE, '.', S_FRAG);
        }
        var vertId;
        if (vert) {
          vertId = vert.append(env, scope);
        } else {
          vertId = scope.def(SHADER_STATE, '.', S_VERT);
        }
        var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;
        check.optional(function () {
          progDef += ',' + env.command;
        });
        return scope.def(progDef + ')');
      });
    }

    return {
      frag: frag,
      vert: vert,
      progVar: progVar,
      program: program
    };
  }

  function parseDraw(options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    // TODO: should use VAO to get default values for offset properties
    // should move vao parse into here and out of the old stuff

    var staticDraw = {};
    var vaoActive = false;

    function parseVAO() {
      if (S_VAO in staticOptions) {
        var vao = staticOptions[S_VAO];
        if (vao !== null && attributeState.getVAO(vao) === null) {
          vao = attributeState.createVAO(vao);
        }

        vaoActive = true;
        staticDraw.vao = vao;

        return createStaticDecl(function (env) {
          var vaoRef = attributeState.getVAO(vao);
          if (vaoRef) {
            return env.link(vaoRef);
          } else {
            return 'null';
          }
        });
      } else if (S_VAO in dynamicOptions) {
        vaoActive = true;
        var dyn = dynamicOptions[S_VAO];
        return createDynamicDecl(dyn, function (env, scope) {
          var vaoRef = env.invoke(scope, dyn);
          return scope.def(env.shared.vao + '.getVAO(' + vaoRef + ')');
        });
      }
      return null;
    }

    var vao = parseVAO();

    var elementsActive = false;

    function parseElements() {
      if (S_ELEMENTS in staticOptions) {
        var elements = staticOptions[S_ELEMENTS];
        staticDraw.elements = elements;
        if (isBufferArgs(elements)) {
          var e = staticDraw.elements = elementState.create(elements, true);
          elements = elementState.getElements(e);
          elementsActive = true;
        } else if (elements) {
          elements = elementState.getElements(elements);
          elementsActive = true;
          check.command(elements, 'invalid elements', env.commandStr);
        }

        var result = createStaticDecl(function (env, scope) {
          if (elements) {
            var result = env.link(elements);
            env.ELEMENTS = result;
            return result;
          }
          env.ELEMENTS = null;
          return null;
        });
        result.value = elements;
        return result;
      } else if (S_ELEMENTS in dynamicOptions) {
        elementsActive = true;

        var dyn = dynamicOptions[S_ELEMENTS];
        return createDynamicDecl(dyn, function (env, scope) {
          var shared = env.shared;

          var IS_BUFFER_ARGS = shared.isBufferArgs;
          var ELEMENT_STATE = shared.elements;

          var elementDefn = env.invoke(scope, dyn);
          var elements = scope.def('null');
          var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');

          var ifte = env.cond(elementStream).then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');').else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');

          check.optional(function () {
            env.assert(ifte.else, '!' + elementDefn + '||' + elements, 'invalid elements');
          });

          scope.entry(ifte);
          scope.exit(env.cond(elementStream).then(ELEMENT_STATE, '.destroyStream(', elements, ');'));

          env.ELEMENTS = elements;

          return elements;
        });
      } else if (vaoActive) {
        return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function (env, scope) {
          return scope.def(env.shared.vao + '.currentVAO?' + env.shared.elements + '.getElements(' + env.shared.vao + '.currentVAO.elements):null');
        });
      }
      return null;
    }

    var elements = parseElements();

    function parsePrimitive() {
      if (S_PRIMITIVE in staticOptions) {
        var primitive = staticOptions[S_PRIMITIVE];
        staticDraw.primitive = primitive;
        check.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);
        return createStaticDecl(function (env, scope) {
          return primTypes[primitive];
        });
      } else if (S_PRIMITIVE in dynamicOptions) {
        var dynPrimitive = dynamicOptions[S_PRIMITIVE];
        return createDynamicDecl(dynPrimitive, function (env, scope) {
          var PRIM_TYPES = env.constants.primTypes;
          var prim = env.invoke(scope, dynPrimitive);
          check.optional(function () {
            env.assert(scope, prim + ' in ' + PRIM_TYPES, 'invalid primitive, must be one of ' + sortedObjectKeys(primTypes));
          });
          return scope.def(PRIM_TYPES, '[', prim, ']');
        });
      } else if (elementsActive) {
        if (isStatic(elements)) {
          if (elements.value) {
            return createStaticDecl(function (env, scope) {
              return scope.def(env.ELEMENTS, '.primType');
            });
          } else {
            return createStaticDecl(function () {
              return GL_TRIANGLES;
            });
          }
        } else {
          return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function (env, scope) {
            var elements = env.ELEMENTS;
            return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES);
          });
        }
      } else if (vaoActive) {
        return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function (env, scope) {
          return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.primitive:' + GL_TRIANGLES);
        });
      }
      return null;
    }

    function parseParam(param, isOffset) {
      if (param in staticOptions) {
        var value = staticOptions[param] | 0;
        if (isOffset) {
          staticDraw.offset = value;
        } else {
          staticDraw.instances = value;
        }
        check.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);
        return createStaticDecl(function (env, scope) {
          if (isOffset) {
            env.OFFSET = value;
          }
          return value;
        });
      } else if (param in dynamicOptions) {
        var dynValue = dynamicOptions[param];
        return createDynamicDecl(dynValue, function (env, scope) {
          var result = env.invoke(scope, dynValue);
          if (isOffset) {
            env.OFFSET = result;
            check.optional(function () {
              env.assert(scope, result + '>=0', 'invalid ' + param);
            });
          }
          return result;
        });
      } else if (isOffset) {
        if (elementsActive) {
          return createStaticDecl(function (env, scope) {
            env.OFFSET = 0;
            return 0;
          });
        } else if (vaoActive) {
          return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function (env, scope) {
            return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.offset:0');
          });
        }
      } else if (vaoActive) {
        return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function (env, scope) {
          return scope.def(env.shared.vao + '.currentVAO?' + env.shared.vao + '.currentVAO.instances:-1');
        });
      }
      return null;
    }

    var OFFSET = parseParam(S_OFFSET, true);

    function parseVertCount() {
      if (S_COUNT in staticOptions) {
        var count = staticOptions[S_COUNT] | 0;
        staticDraw.count = count;
        check.command(typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);
        return createStaticDecl(function () {
          return count;
        });
      } else if (S_COUNT in dynamicOptions) {
        var dynCount = dynamicOptions[S_COUNT];
        return createDynamicDecl(dynCount, function (env, scope) {
          var result = env.invoke(scope, dynCount);
          check.optional(function () {
            env.assert(scope, 'typeof ' + result + '==="number"&&' + result + '>=0&&' + result + '===(' + result + '|0)', 'invalid vertex count');
          });
          return result;
        });
      } else if (elementsActive) {
        if (isStatic(elements)) {
          if (elements) {
            if (OFFSET) {
              return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function (env, scope) {
                var result = scope.def(env.ELEMENTS, '.vertCount-', env.OFFSET);

                check.optional(function () {
                  env.assert(scope, result + '>=0', 'invalid vertex offset/element buffer too small');
                });

                return result;
              });
            } else {
              return createStaticDecl(function (env, scope) {
                return scope.def(env.ELEMENTS, '.vertCount');
              });
            }
          } else {
            var result = createStaticDecl(function () {
              return -1;
            });
            check.optional(function () {
              result.MISSING = true;
            });
            return result;
          }
        } else {
          var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function (env, scope) {
            var elements = env.ELEMENTS;
            if (env.OFFSET) {
              return scope.def(elements, '?', elements, '.vertCount-', env.OFFSET, ':-1');
            }
            return scope.def(elements, '?', elements, '.vertCount:-1');
          });
          check.optional(function () {
            variable.DYNAMIC = true;
          });
          return variable;
        }
      } else if (vaoActive) {
        var countVariable = new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function (env, scope) {
          return scope.def(env.shared.vao, '.currentVAO?', env.shared.vao, '.currentVAO.count:-1');
        });
        return countVariable;
      }
      return null;
    }

    var primitive = parsePrimitive();
    var count = parseVertCount();
    var instances = parseParam(S_INSTANCES, false);

    return {
      elements: elements,
      primitive: primitive,
      count: count,
      instances: instances,
      offset: OFFSET,
      vao: vao,

      vaoActive: vaoActive,
      elementsActive: elementsActive,

      // static draw props
      static: staticDraw
    };
  }

  function parseGLState(options, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    var STATE = {};

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);

      function parseParam(parseStatic, parseDynamic) {
        if (prop in staticOptions) {
          var value = parseStatic(staticOptions[prop]);
          STATE[param] = createStaticDecl(function () {
            return value;
          });
        } else if (prop in dynamicOptions) {
          var dyn = dynamicOptions[prop];
          STATE[param] = createDynamicDecl(dyn, function (env, scope) {
            return parseDynamic(env, scope, env.invoke(scope, dyn));
          });
        }
      }

      switch (prop) {
        case S_CULL_ENABLE:
        case S_BLEND_ENABLE:
        case S_DITHER:
        case S_STENCIL_ENABLE:
        case S_DEPTH_ENABLE:
        case S_SCISSOR_ENABLE:
        case S_POLYGON_OFFSET_ENABLE:
        case S_SAMPLE_ALPHA:
        case S_SAMPLE_ENABLE:
        case S_DEPTH_MASK:
          return parseParam(function (value) {
            check.commandType(value, 'boolean', prop, env.commandStr);
            return value;
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, 'typeof ' + value + '==="boolean"', 'invalid flag ' + prop, env.commandStr);
            });
            return value;
          });

        case S_DEPTH_FUNC:
          return parseParam(function (value) {
            check.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);
            return compareFuncs[value];
          }, function (env, scope, value) {
            var COMPARE_FUNCS = env.constants.compareFuncs;
            check.optional(function () {
              env.assert(scope, value + ' in ' + COMPARE_FUNCS, 'invalid ' + prop + ', must be one of ' + sortedObjectKeys(compareFuncs));
            });
            return scope.def(COMPARE_FUNCS, '[', value, ']');
          });

        case S_DEPTH_RANGE:
          return parseParam(function (value) {
            check.command(isArrayLike(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number' && value[0] <= value[1], 'depth range is 2d array', env.commandStr);
            return value;
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===2&&' + 'typeof ' + value + '[0]==="number"&&' + 'typeof ' + value + '[1]==="number"&&' + value + '[0]<=' + value + '[1]', 'depth range must be a 2d array');
            });

            var Z_NEAR = scope.def('+', value, '[0]');
            var Z_FAR = scope.def('+', value, '[1]');
            return [Z_NEAR, Z_FAR];
          });

        case S_BLEND_FUNC:
          return parseParam(function (value) {
            check.commandType(value, 'object', 'blend.func', env.commandStr);
            var srcRGB = 'srcRGB' in value ? value.srcRGB : value.src;
            var srcAlpha = 'srcAlpha' in value ? value.srcAlpha : value.src;
            var dstRGB = 'dstRGB' in value ? value.dstRGB : value.dst;
            var dstAlpha = 'dstAlpha' in value ? value.dstAlpha : value.dst;
            check.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);
            check.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);
            check.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);
            check.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);

            check.command(invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1, 'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);

            return [blendFuncs[srcRGB], blendFuncs[dstRGB], blendFuncs[srcAlpha], blendFuncs[dstAlpha]];
          }, function (env, scope, value) {
            var BLEND_FUNCS = env.constants.blendFuncs;

            check.optional(function () {
              env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid blend func, must be an object');
            });

            function read(prefix, suffix) {
              var func = scope.def('"', prefix, suffix, '" in ', value, '?', value, '.', prefix, suffix, ':', value, '.', prefix);

              check.optional(function () {
                env.assert(scope, func + ' in ' + BLEND_FUNCS, 'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + sortedObjectKeys(blendFuncs));
              });

              return func;
            }

            var srcRGB = read('src', 'RGB');
            var dstRGB = read('dst', 'RGB');

            check.optional(function () {
              var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;

              env.assert(scope, INVALID_BLEND_COMBINATIONS + '.indexOf(' + srcRGB + '+", "+' + dstRGB + ') === -1 ', 'unallowed blending combination for (srcRGB, dstRGB)');
            });

            var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');
            var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');
            var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');
            var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');

            return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];
          });

        case S_BLEND_EQUATION:
          return parseParam(function (value) {
            if (typeof value === 'string') {
              check.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);
              return [blendEquations[value], blendEquations[value]];
            } else if (typeof value === 'object') {
              check.commandParameter(value.rgb, blendEquations, prop + '.rgb', env.commandStr);
              check.commandParameter(value.alpha, blendEquations, prop + '.alpha', env.commandStr);
              return [blendEquations[value.rgb], blendEquations[value.alpha]];
            } else {
              check.commandRaise('invalid blend.equation', env.commandStr);
            }
          }, function (env, scope, value) {
            var BLEND_EQUATIONS = env.constants.blendEquations;

            var RGB = scope.def();
            var ALPHA = scope.def();

            var ifte = env.cond('typeof ', value, '==="string"');

            check.optional(function () {
              function checkProp(block, name, value) {
                env.assert(block, value + ' in ' + BLEND_EQUATIONS, 'invalid ' + name + ', must be one of ' + sortedObjectKeys(blendEquations));
              }
              checkProp(ifte.then, prop, value);

              env.assert(ifte.else, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
              checkProp(ifte.else, prop + '.rgb', value + '.rgb');
              checkProp(ifte.else, prop + '.alpha', value + '.alpha');
            });

            ifte.then(RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');
            ifte.else(RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];', ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');

            scope(ifte);

            return [RGB, ALPHA];
          });

        case S_BLEND_COLOR:
          return parseParam(function (value) {
            check.command(isArrayLike(value) && value.length === 4, 'blend.color must be a 4d array', env.commandStr);
            return loop(4, function (i) {
              return +value[i];
            });
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'blend.color must be a 4d array');
            });
            return loop(4, function (i) {
              return scope.def('+', value, '[', i, ']');
            });
          });

        case S_STENCIL_MASK:
          return parseParam(function (value) {
            check.commandType(value, 'number', param, env.commandStr);
            return value | 0;
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, 'typeof ' + value + '==="number"', 'invalid stencil.mask');
            });
            return scope.def(value, '|0');
          });

        case S_STENCIL_FUNC:
          return parseParam(function (value) {
            check.commandType(value, 'object', param, env.commandStr);
            var cmp = value.cmp || 'keep';
            var ref = value.ref || 0;
            var mask = 'mask' in value ? value.mask : -1;
            check.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);
            check.commandType(ref, 'number', prop + '.ref', env.commandStr);
            check.commandType(mask, 'number', prop + '.mask', env.commandStr);
            return [compareFuncs[cmp], ref, mask];
          }, function (env, scope, value) {
            var COMPARE_FUNCS = env.constants.compareFuncs;
            check.optional(function () {
              function assert() {
                env.assert(scope, Array.prototype.join.call(arguments, ''), 'invalid stencil.func');
              }
              assert(value + '&&typeof ', value, '==="object"');
              assert('!("cmp" in ', value, ')||(', value, '.cmp in ', COMPARE_FUNCS, ')');
            });
            var cmp = scope.def('"cmp" in ', value, '?', COMPARE_FUNCS, '[', value, '.cmp]', ':', GL_KEEP);
            var ref = scope.def(value, '.ref|0');
            var mask = scope.def('"mask" in ', value, '?', value, '.mask|0:-1');
            return [cmp, ref, mask];
          });

        case S_STENCIL_OPFRONT:
        case S_STENCIL_OPBACK:
          return parseParam(function (value) {
            check.commandType(value, 'object', param, env.commandStr);
            var fail = value.fail || 'keep';
            var zfail = value.zfail || 'keep';
            var zpass = value.zpass || 'keep';
            check.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);
            check.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);
            check.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);
            return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, stencilOps[fail], stencilOps[zfail], stencilOps[zpass]];
          }, function (env, scope, value) {
            var STENCIL_OPS = env.constants.stencilOps;

            check.optional(function () {
              env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
            });

            function read(name) {
              check.optional(function () {
                env.assert(scope, '!("' + name + '" in ' + value + ')||' + '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')', 'invalid ' + prop + '.' + name + ', must be one of ' + sortedObjectKeys(stencilOps));
              });

              return scope.def('"', name, '" in ', value, '?', STENCIL_OPS, '[', value, '.', name, ']:', GL_KEEP);
            }

            return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, read('fail'), read('zfail'), read('zpass')];
          });

        case S_POLYGON_OFFSET_OFFSET:
          return parseParam(function (value) {
            check.commandType(value, 'object', param, env.commandStr);
            var factor = value.factor | 0;
            var units = value.units | 0;
            check.commandType(factor, 'number', param + '.factor', env.commandStr);
            check.commandType(units, 'number', param + '.units', env.commandStr);
            return [factor, units];
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
            });

            var FACTOR = scope.def(value, '.factor|0');
            var UNITS = scope.def(value, '.units|0');

            return [FACTOR, UNITS];
          });

        case S_CULL_FACE:
          return parseParam(function (value) {
            var face = 0;
            if (value === 'front') {
              face = GL_FRONT;
            } else if (value === 'back') {
              face = GL_BACK;
            }
            check.command(!!face, param, env.commandStr);
            return face;
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, value + '==="front"||' + value + '==="back"', 'invalid cull.face');
            });
            return scope.def(value, '==="front"?', GL_FRONT, ':', GL_BACK);
          });

        case S_LINE_WIDTH:
          return parseParam(function (value) {
            check.command(typeof value === 'number' && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], 'invalid line width, must be a positive number between ' + limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);
            return value;
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, 'typeof ' + value + '==="number"&&' + value + '>=' + limits.lineWidthDims[0] + '&&' + value + '<=' + limits.lineWidthDims[1], 'invalid line width');
            });

            return value;
          });

        case S_FRONT_FACE:
          return parseParam(function (value) {
            check.commandParameter(value, orientationType, param, env.commandStr);
            return orientationType[value];
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, value + '==="cw"||' + value + '==="ccw"', 'invalid frontFace, must be one of cw,ccw');
            });
            return scope.def(value + '==="cw"?' + GL_CW + ':' + GL_CCW);
          });

        case S_COLOR_MASK:
          return parseParam(function (value) {
            check.command(isArrayLike(value) && value.length === 4, 'color.mask must be length 4 array', env.commandStr);
            return value.map(function (v) {
              return !!v;
            });
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'invalid color.mask');
            });
            return loop(4, function (i) {
              return '!!' + value + '[' + i + ']';
            });
          });

        case S_SAMPLE_COVERAGE:
          return parseParam(function (value) {
            check.command(typeof value === 'object' && value, param, env.commandStr);
            var sampleValue = 'value' in value ? value.value : 1;
            var sampleInvert = !!value.invert;
            check.command(typeof sampleValue === 'number' && sampleValue >= 0 && sampleValue <= 1, 'sample.coverage.value must be a number between 0 and 1', env.commandStr);
            return [sampleValue, sampleInvert];
          }, function (env, scope, value) {
            check.optional(function () {
              env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid sample.coverage');
            });
            var VALUE = scope.def('"value" in ', value, '?+', value, '.value:1');
            var INVERT = scope.def('!!', value, '.invert');
            return [VALUE, INVERT];
          });
      }
    });

    return STATE;
  }

  function parseUniforms(uniforms, env) {
    var staticUniforms = uniforms.static;
    var dynamicUniforms = uniforms.dynamic;

    var UNIFORMS = {};

    sortedObjectKeys(staticUniforms).forEach(function (name) {
      var value = staticUniforms[name];
      var result;
      if (typeof value === 'number' || typeof value === 'boolean') {
        result = createStaticDecl(function () {
          return value;
        });
      } else if (typeof value === 'function') {
        var reglType = value._reglType;
        if (reglType === 'texture2d' || reglType === 'textureCube') {
          result = createStaticDecl(function (env) {
            return env.link(value);
          });
        } else if (reglType === 'framebuffer' || reglType === 'framebufferCube') {
          check.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
          result = createStaticDecl(function (env) {
            return env.link(value.color[0]);
          });
        } else {
          check.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
        }
      } else if (isArrayLike(value)) {
        result = createStaticDecl(function (env) {
          var ITEM = env.global.def('[', loop(value.length, function (i) {
            check.command(typeof value[i] === 'number' || typeof value[i] === 'boolean', 'invalid uniform ' + name, env.commandStr);
            return value[i];
          }), ']');
          return ITEM;
        });
      } else {
        check.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
      }
      result.value = value;
      UNIFORMS[name] = result;
    });

    sortedObjectKeys(dynamicUniforms).forEach(function (key) {
      var dyn = dynamicUniforms[key];
      UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn);
      });
    });

    return UNIFORMS;
  }

  function parseAttributes(attributes, env) {
    var staticAttributes = attributes.static;
    var dynamicAttributes = attributes.dynamic;

    var attributeDefs = {};

    sortedObjectKeys(staticAttributes).forEach(function (attribute) {
      var value = staticAttributes[attribute];
      var id = stringStore.id(attribute);

      var record = new AttributeRecord();
      if (isBufferArgs(value)) {
        record.state = ATTRIB_STATE_POINTER;
        record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER, false, true));
        record.type = 0;
      } else {
        var buffer = bufferState.getBuffer(value);
        if (buffer) {
          record.state = ATTRIB_STATE_POINTER;
          record.buffer = buffer;
          record.type = 0;
        } else {
          check.command(typeof value === 'object' && value, 'invalid data for attribute ' + attribute, env.commandStr);
          if ('constant' in value) {
            var constant = value.constant;
            record.buffer = 'null';
            record.state = ATTRIB_STATE_CONSTANT;
            if (typeof constant === 'number') {
              record.x = constant;
            } else {
              check.command(isArrayLike(constant) && constant.length > 0 && constant.length <= 4, 'invalid constant for attribute ' + attribute, env.commandStr);
              CUTE_COMPONENTS.forEach(function (c, i) {
                if (i < constant.length) {
                  record[c] = constant[i];
                }
              });
            }
          } else {
            if (isBufferArgs(value.buffer)) {
              buffer = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER, false, true));
            } else {
              buffer = bufferState.getBuffer(value.buffer);
            }
            check.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);

            var offset = value.offset | 0;
            check.command(offset >= 0, 'invalid offset for attribute "' + attribute + '"', env.commandStr);

            var stride = value.stride | 0;
            check.command(stride >= 0 && stride < 256, 'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);

            var size = value.size | 0;
            check.command(!('size' in value) || size > 0 && size <= 4, 'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);

            var normalized = !!value.normalized;

            var type = 0;
            if ('type' in value) {
              check.commandParameter(value.type, glTypes, 'invalid type for attribute ' + attribute, env.commandStr);
              type = glTypes[value.type];
            }

            var divisor = value.divisor | 0;
            check.optional(function () {
              if ('divisor' in value) {
                check.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
                check.command(divisor >= 0, 'invalid divisor for attribute "' + attribute + '"', env.commandStr);
              }

              var command = env.commandStr;

              var VALID_KEYS = ['buffer', 'offset', 'divisor', 'normalized', 'type', 'size', 'stride'];

              sortedObjectKeys(value).forEach(function (prop) {
                check.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ')', command);
              });
            });

            record.buffer = buffer;
            record.state = ATTRIB_STATE_POINTER;
            record.size = size;
            record.normalized = normalized;
            record.type = type || buffer.dtype;
            record.offset = offset;
            record.stride = stride;
            record.divisor = divisor;
          }
        }
      }

      attributeDefs[attribute] = createStaticDecl(function (env, scope) {
        var cache = env.attribCache;
        if (id in cache) {
          return cache[id];
        }
        var result = {
          isStream: false
        };
        sortedObjectKeys(record).forEach(function (key) {
          result[key] = record[key];
        });
        if (record.buffer) {
          result.buffer = env.link(record.buffer);
          result.type = result.type || result.buffer + '.dtype';
        }
        cache[id] = result;
        return result;
      });
    });

    sortedObjectKeys(dynamicAttributes).forEach(function (attribute) {
      var dyn = dynamicAttributes[attribute];

      function appendAttributeCode(env, block) {
        var VALUE = env.invoke(block, dyn);

        var shared = env.shared;
        var constants = env.constants;

        var IS_BUFFER_ARGS = shared.isBufferArgs;
        var BUFFER_STATE = shared.buffer;

        // Perform validation on attribute
        check.optional(function () {
          env.assert(block, VALUE + '&&(typeof ' + VALUE + '==="object"||typeof ' + VALUE + '==="function")&&(' + IS_BUFFER_ARGS + '(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' + IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' + '("constant" in ' + VALUE + '&&(typeof ' + VALUE + '.constant==="number"||' + shared.isArrayLike + '(' + VALUE + '.constant))))', 'invalid dynamic attribute "' + attribute + '"');
        });

        // allocate names for result
        var result = {
          isStream: block.def(false)
        };
        var defaultRecord = new AttributeRecord();
        defaultRecord.state = ATTRIB_STATE_POINTER;
        sortedObjectKeys(defaultRecord).forEach(function (key) {
          result[key] = block.def('' + defaultRecord[key]);
        });

        var BUFFER = result.buffer;
        var TYPE = result.type;
        block('if(', IS_BUFFER_ARGS, '(', VALUE, ')){', result.isStream, '=true;', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER, ',', VALUE, ');', TYPE, '=', BUFFER, '.dtype;', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');', 'if(', BUFFER, '){', TYPE, '=', BUFFER, '.dtype;', '}else if("constant" in ', VALUE, '){', result.state, '=', ATTRIB_STATE_CONSTANT, ';', 'if(typeof ' + VALUE + '.constant === "number"){', result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;', CUTE_COMPONENTS.slice(1).map(function (n) {
          return result[n];
        }).join('='), '=0;', '}else{', CUTE_COMPONENTS.map(function (name, i) {
          return result[name] + '=' + VALUE + '.constant.length>' + i + '?' + VALUE + '.constant[' + i + ']:0;';
        }).join(''), '}}else{', 'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER, ',', VALUE, '.buffer);', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);', '}', TYPE, '="type" in ', VALUE, '?', constants.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;', result.normalized, '=!!', VALUE, '.normalized;');
        function emitReadRecord(name) {
          block(result[name], '=', VALUE, '.', name, '|0;');
        }
        emitReadRecord('size');
        emitReadRecord('offset');
        emitReadRecord('stride');
        emitReadRecord('divisor');

        block('}}');

        block.exit('if(', result.isStream, '){', BUFFER_STATE, '.destroyStream(', BUFFER, ');', '}');

        return result;
      }

      attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
    });

    return attributeDefs;
  }

  function parseContext(context) {
    var staticContext = context.static;
    var dynamicContext = context.dynamic;
    var result = {};

    sortedObjectKeys(staticContext).forEach(function (name) {
      var value = staticContext[name];
      result[name] = createStaticDecl(function (env, scope) {
        if (typeof value === 'number' || typeof value === 'boolean') {
          return '' + value;
        } else {
          return env.link(value);
        }
      });
    });

    sortedObjectKeys(dynamicContext).forEach(function (name) {
      var dyn = dynamicContext[name];
      result[name] = createDynamicDecl(dyn, function (env, scope) {
        return env.invoke(scope, dyn);
      });
    });

    return result;
  }

  function parseArguments(options, attributes, uniforms, context, env) {
    var staticOptions = options.static;
    var dynamicOptions = options.dynamic;

    check.optional(function () {
      var KEY_NAMES = [S_FRAMEBUFFER, S_VERT, S_FRAG, S_ELEMENTS, S_PRIMITIVE, S_OFFSET, S_COUNT, S_INSTANCES, S_PROFILE, S_VAO].concat(GL_STATE_NAMES);

      function checkKeys(dict) {
        sortedObjectKeys(dict).forEach(function (key) {
          check.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter "' + key + '"', env.commandStr);
        });
      }

      checkKeys(staticOptions);
      checkKeys(dynamicOptions);
    });

    var attribLocations = parseAttribLocations(options, attributes);

    var framebuffer = parseFramebuffer(options, env);
    var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
    var draw = parseDraw(options, env);
    var state = parseGLState(options, env);
    var shader = parseProgram(options, env, attribLocations);

    function copyBox(name) {
      var defn = viewportAndScissor[name];
      if (defn) {
        state[name] = defn;
      }
    }
    copyBox(S_VIEWPORT);
    copyBox(propName(S_SCISSOR_BOX));

    var dirty = sortedObjectKeys(state).length > 0;

    var result = {
      framebuffer: framebuffer,
      draw: draw,
      shader: shader,
      state: state,
      dirty: dirty,
      scopeVAO: null,
      drawVAO: null,
      useVAO: false,
      attributes: {}
    };

    result.profile = parseProfile(options, env);
    result.uniforms = parseUniforms(uniforms, env);
    result.drawVAO = result.scopeVAO = draw.vao;
    // special case: check if we can statically allocate a vertex array object for this program
    if (!result.drawVAO && shader.program && !attribLocations && extensions.angle_instanced_arrays && draw.static.elements) {
      var useVAO = true;
      var staticBindings = shader.program.attributes.map(function (attr) {
        var binding = attributes.static[attr];
        useVAO = useVAO && !!binding;
        return binding;
      });
      if (useVAO && staticBindings.length > 0) {
        var vao = attributeState.getVAO(attributeState.createVAO({
          attributes: staticBindings,
          elements: draw.static.elements
        }));
        result.drawVAO = new Declaration(null, null, null, function (env, scope) {
          return env.link(vao);
        });
        result.useVAO = true;
      }
    }
    if (attribLocations) {
      result.useVAO = true;
    } else {
      result.attributes = parseAttributes(attributes, env);
    }
    result.context = parseContext(context, env);
    return result;
  }

  // ===================================================
  // ===================================================
  // COMMON UPDATE FUNCTIONS
  // ===================================================
  // ===================================================
  function emitContext(env, scope, context) {
    var shared = env.shared;
    var CONTEXT = shared.context;

    var contextEnter = env.scope();

    sortedObjectKeys(context).forEach(function (name) {
      scope.save(CONTEXT, '.' + name);
      var defn = context[name];
      var value = defn.append(env, scope);
      if (Array.isArray(value)) {
        contextEnter(CONTEXT, '.', name, '=[', value.join(), '];');
      } else {
        contextEnter(CONTEXT, '.', name, '=', value, ';');
      }
    });

    scope(contextEnter);
  }

  // ===================================================
  // ===================================================
  // COMMON DRAWING FUNCTIONS
  // ===================================================
  // ===================================================
  function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {
    var shared = env.shared;

    var GL = shared.gl;
    var FRAMEBUFFER_STATE = shared.framebuffer;
    var EXT_DRAW_BUFFERS;
    if (extDrawBuffers) {
      EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');
    }

    var constants = env.constants;

    var DRAW_BUFFERS = constants.drawBuffer;
    var BACK_BUFFER = constants.backBuffer;

    var NEXT;
    if (framebuffer) {
      NEXT = framebuffer.append(env, scope);
    } else {
      NEXT = scope.def(FRAMEBUFFER_STATE, '.next');
    }

    if (!skipCheck) {
      scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');
    }
    scope('if(', NEXT, '){', GL, '.bindFramebuffer(', GL_FRAMEBUFFER, ',', NEXT, '.framebuffer);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');
    }
    scope('}else{', GL, '.bindFramebuffer(', GL_FRAMEBUFFER, ',null);');
    if (extDrawBuffers) {
      scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');
    }
    scope('}', FRAMEBUFFER_STATE, '.cur=', NEXT, ';');
    if (!skipCheck) {
      scope('}');
    }
  }

  function emitPollState(env, scope, args) {
    var shared = env.shared;

    var GL = shared.gl;

    var CURRENT_VARS = env.current;
    var NEXT_VARS = env.next;
    var CURRENT_STATE = shared.current;
    var NEXT_STATE = shared.next;

    var block = env.cond(CURRENT_STATE, '.dirty');

    GL_STATE_NAMES.forEach(function (prop) {
      var param = propName(prop);
      if (param in args.state) {
        return;
      }

      var NEXT, CURRENT;
      if (param in NEXT_VARS) {
        NEXT = NEXT_VARS[param];
        CURRENT = CURRENT_VARS[param];
        var parts = loop(currentState[param].length, function (i) {
          return block.def(NEXT, '[', i, ']');
        });
        block(env.cond(parts.map(function (p, i) {
          return p + '!==' + CURRENT + '[' + i + ']';
        }).join('||')).then(GL, '.', GL_VARIABLES[param], '(', parts, ');', parts.map(function (p, i) {
          return CURRENT + '[' + i + ']=' + p;
        }).join(';'), ';'));
      } else {
        NEXT = block.def(NEXT_STATE, '.', param);
        var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);
        block(ifte);
        if (param in GL_FLAGS) {
          ifte(env.cond(NEXT).then(GL, '.enable(', GL_FLAGS[param], ');').else(GL, '.disable(', GL_FLAGS[param], ');'), CURRENT_STATE, '.', param, '=', NEXT, ';');
        } else {
          ifte(GL, '.', GL_VARIABLES[param], '(', NEXT, ');', CURRENT_STATE, '.', param, '=', NEXT, ';');
        }
      }
    });
    if (sortedObjectKeys(args.state).length === 0) {
      block(CURRENT_STATE, '.dirty=false;');
    }
    scope(block);
  }

  function emitSetOptions(env, scope, options, filter) {
    var shared = env.shared;
    var CURRENT_VARS = env.current;
    var CURRENT_STATE = shared.current;
    var GL = shared.gl;
    sortState(sortedObjectKeys(options)).forEach(function (param) {
      var defn = options[param];
      if (filter && !filter(defn)) {
        return;
      }
      var variable = defn.append(env, scope);
      if (GL_FLAGS[param]) {
        var flag = GL_FLAGS[param];
        if (isStatic(defn)) {
          if (variable) {
            scope(GL, '.enable(', flag, ');');
          } else {
            scope(GL, '.disable(', flag, ');');
          }
        } else {
          scope(env.cond(variable).then(GL, '.enable(', flag, ');').else(GL, '.disable(', flag, ');'));
        }
        scope(CURRENT_STATE, '.', param, '=', variable, ';');
      } else if (isArrayLike(variable)) {
        var CURRENT = CURRENT_VARS[param];
        scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', variable.map(function (v, i) {
          return CURRENT + '[' + i + ']=' + v;
        }).join(';'), ';');
      } else {
        scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', CURRENT_STATE, '.', param, '=', variable, ';');
      }
    });
  }

  function injectExtensions(env, scope) {
    if (extInstancing) {
      env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');
    }
  }

  function emitProfile(env, scope, args, useScope, incrementCounter) {
    var shared = env.shared;
    var STATS = env.stats;
    var CURRENT_STATE = shared.current;
    var TIMER = shared.timer;
    var profileArg = args.profile;

    function perfCounter() {
      if (typeof performance === 'undefined') {
        return 'Date.now()';
      } else {
        return 'performance.now()';
      }
    }

    var CPU_START, QUERY_COUNTER;
    function emitProfileStart(block) {
      CPU_START = scope.def();
      block(CPU_START, '=', perfCounter(), ';');
      if (typeof incrementCounter === 'string') {
        block(STATS, '.count+=', incrementCounter, ';');
      } else {
        block(STATS, '.count++;');
      }
      if (timer) {
        if (useScope) {
          QUERY_COUNTER = scope.def();
          block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');
        } else {
          block(TIMER, '.beginQuery(', STATS, ');');
        }
      }
    }

    function emitProfileEnd(block) {
      block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');
      if (timer) {
        if (useScope) {
          block(TIMER, '.pushScopeStats(', QUERY_COUNTER, ',', TIMER, '.getNumPendingQueries(),', STATS, ');');
        } else {
          block(TIMER, '.endQuery();');
        }
      }
    }

    function scopeProfile(value) {
      var prev = scope.def(CURRENT_STATE, '.profile');
      scope(CURRENT_STATE, '.profile=', value, ';');
      scope.exit(CURRENT_STATE, '.profile=', prev, ';');
    }

    var USE_PROFILE;
    if (profileArg) {
      if (isStatic(profileArg)) {
        if (profileArg.enable) {
          emitProfileStart(scope);
          emitProfileEnd(scope.exit);
          scopeProfile('true');
        } else {
          scopeProfile('false');
        }
        return;
      }
      USE_PROFILE = profileArg.append(env, scope);
      scopeProfile(USE_PROFILE);
    } else {
      USE_PROFILE = scope.def(CURRENT_STATE, '.profile');
    }

    var start = env.block();
    emitProfileStart(start);
    scope('if(', USE_PROFILE, '){', start, '}');
    var end = env.block();
    emitProfileEnd(end);
    scope.exit('if(', USE_PROFILE, '){', end, '}');
  }

  function emitAttributes(env, scope, args, attributes, filter) {
    var shared = env.shared;

    function typeLength(x) {
      switch (x) {
        case GL_FLOAT_VEC2:
        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          return 2;
        case GL_FLOAT_VEC3:
        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          return 3;
        case GL_FLOAT_VEC4:
        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          return 4;
        default:
          return 1;
      }
    }

    function emitBindAttribute(ATTRIBUTE, size, record) {
      var GL = shared.gl;

      var LOCATION = scope.def(ATTRIBUTE, '.location');
      var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');

      var STATE = record.state;
      var BUFFER = record.buffer;
      var CONST_COMPONENTS = [record.x, record.y, record.z, record.w];

      var COMMON_KEYS = ['buffer', 'normalized', 'offset', 'stride'];

      function emitBuffer() {
        scope('if(!', BINDING, '.buffer){', GL, '.enableVertexAttribArray(', LOCATION, ');}');

        var TYPE = record.type;
        var SIZE;
        if (!record.size) {
          SIZE = size;
        } else {
          SIZE = scope.def(record.size, '||', size);
        }

        scope('if(', BINDING, '.type!==', TYPE, '||', BINDING, '.size!==', SIZE, '||', COMMON_KEYS.map(function (key) {
          return BINDING + '.' + key + '!==' + record[key];
        }).join('||'), '){', GL, '.bindBuffer(', GL_ARRAY_BUFFER, ',', BUFFER, '.buffer);', GL, '.vertexAttribPointer(', [LOCATION, SIZE, TYPE, record.normalized, record.stride, record.offset], ');', BINDING, '.type=', TYPE, ';', BINDING, '.size=', SIZE, ';', COMMON_KEYS.map(function (key) {
          return BINDING + '.' + key + '=' + record[key] + ';';
        }).join(''), '}');

        if (extInstancing) {
          var DIVISOR = record.divisor;
          scope('if(', BINDING, '.divisor!==', DIVISOR, '){', env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');', BINDING, '.divisor=', DIVISOR, ';}');
        }
      }

      function emitConstant() {
        scope('if(', BINDING, '.buffer){', GL, '.disableVertexAttribArray(', LOCATION, ');', BINDING, '.buffer=null;', '}if(', CUTE_COMPONENTS.map(function (c, i) {
          return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i];
        }).join('||'), '){', GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');', CUTE_COMPONENTS.map(function (c, i) {
          return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';';
        }).join(''), '}');
      }

      if (STATE === ATTRIB_STATE_POINTER) {
        emitBuffer();
      } else if (STATE === ATTRIB_STATE_CONSTANT) {
        emitConstant();
      } else {
        scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');
        emitBuffer();
        scope('}else{');
        emitConstant();
        scope('}');
      }
    }

    attributes.forEach(function (attribute) {
      var name = attribute.name;
      var arg = args.attributes[name];
      var record;
      if (arg) {
        if (!filter(arg)) {
          return;
        }
        record = arg.append(env, scope);
      } else {
        if (!filter(SCOPE_DECL)) {
          return;
        }
        var scopeAttrib = env.scopeAttrib(name);
        check.optional(function () {
          env.assert(scope, scopeAttrib + '.state', 'missing attribute ' + name);
        });
        record = {};
        sortedObjectKeys(new AttributeRecord()).forEach(function (key) {
          record[key] = scope.def(scopeAttrib, '.', key);
        });
      }
      emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);
    });
  }

  function emitUniforms(env, scope, args, uniforms, filter, isBatchInnerLoop) {
    var shared = env.shared;
    var GL = shared.gl;

    var infix;
    for (var i = 0; i < uniforms.length; ++i) {
      var uniform = uniforms[i];
      var name = uniform.name;
      var type = uniform.info.type;
      var arg = args.uniforms[name];
      var UNIFORM = env.link(uniform);
      var LOCATION = UNIFORM + '.location';

      var VALUE;
      if (arg) {
        if (!filter(arg)) {
          continue;
        }
        if (isStatic(arg)) {
          var value = arg.value;
          check.command(value !== null && typeof value !== 'undefined', 'missing uniform "' + name + '"', env.commandStr);
          if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
            check.command(typeof value === 'function' && (type === GL_SAMPLER_2D && (value._reglType === 'texture2d' || value._reglType === 'framebuffer') || type === GL_SAMPLER_CUBE && (value._reglType === 'textureCube' || value._reglType === 'framebufferCube')), 'invalid texture for uniform ' + name, env.commandStr);
            var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
            scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');
            scope.exit(TEX_VALUE, '.unbind();');
          } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {
            check.optional(function () {
              check.command(isArrayLike(value), 'invalid matrix for uniform ' + name, env.commandStr);
              check.command(type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16, 'invalid length for matrix uniform ' + name, env.commandStr);
            });
            var MAT_VALUE = env.global.def('new Float32Array([' + Array.prototype.slice.call(value) + '])');
            var dim = 2;
            if (type === GL_FLOAT_MAT3) {
              dim = 3;
            } else if (type === GL_FLOAT_MAT4) {
              dim = 4;
            }
            scope(GL, '.uniformMatrix', dim, 'fv(', LOCATION, ',false,', MAT_VALUE, ');');
          } else {
            switch (type) {
              case GL_FLOAT:
                check.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1f';
                break;
              case GL_FLOAT_VEC2:
                check.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
                infix = '2f';
                break;
              case GL_FLOAT_VEC3:
                check.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
                infix = '3f';
                break;
              case GL_FLOAT_VEC4:
                check.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
                infix = '4f';
                break;
              case GL_BOOL:
                check.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break;
              case GL_INT:
                check.commandType(value, 'number', 'uniform ' + name, env.commandStr);
                infix = '1i';
                break;
              case GL_BOOL_VEC2:
                check.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
                infix = '2i';
                break;
              case GL_INT_VEC2:
                check.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
                infix = '2i';
                break;
              case GL_BOOL_VEC3:
                check.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
                infix = '3i';
                break;
              case GL_INT_VEC3:
                check.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
                infix = '3i';
                break;
              case GL_BOOL_VEC4:
                check.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
                infix = '4i';
                break;
              case GL_INT_VEC4:
                check.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
                infix = '4i';
                break;
            }
            scope(GL, '.uniform', infix, '(', LOCATION, ',', isArrayLike(value) ? Array.prototype.slice.call(value) : value, ');');
          }
          continue;
        } else {
          VALUE = arg.append(env, scope);
        }
      } else {
        if (!filter(SCOPE_DECL)) {
          continue;
        }
        VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');
      }

      if (type === GL_SAMPLER_2D) {
        check(!Array.isArray(VALUE), 'must specify a scalar prop for textures');
        scope('if(', VALUE, '&&', VALUE, '._reglType==="framebuffer"){', VALUE, '=', VALUE, '.color[0];', '}');
      } else if (type === GL_SAMPLER_CUBE) {
        check(!Array.isArray(VALUE), 'must specify a scalar prop for cube maps');
        scope('if(', VALUE, '&&', VALUE, '._reglType==="framebufferCube"){', VALUE, '=', VALUE, '.color[0];', '}');
      }

      // perform type validation
      check.optional(function () {
        function emitCheck(pred, message) {
          env.assert(scope, pred, 'bad data or missing for uniform "' + name + '".  ' + message);
        }

        function checkType(type) {
          check(!Array.isArray(VALUE), 'must not specify an array type for uniform');
          emitCheck('typeof ' + VALUE + '==="' + type + '"', 'invalid type, expected ' + type);
        }

        function checkVector(n, type) {
          if (Array.isArray(VALUE)) {
            check(VALUE.length === n, 'must have length ' + n);
          } else {
            emitCheck(shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n, 'invalid vector, should have length ' + n, env.commandStr);
          }
        }

        function checkTexture(target) {
          check(!Array.isArray(VALUE), 'must not specify a value type');
          emitCheck('typeof ' + VALUE + '==="function"&&' + VALUE + '._reglType==="texture' + (target === GL_TEXTURE_2D ? '2d' : 'Cube') + '"', 'invalid texture type', env.commandStr);
        }

        switch (type) {
          case GL_INT:
            checkType('number');
            break;
          case GL_INT_VEC2:
            checkVector(2, 'number');
            break;
          case GL_INT_VEC3:
            checkVector(3, 'number');
            break;
          case GL_INT_VEC4:
            checkVector(4, 'number');
            break;
          case GL_FLOAT:
            checkType('number');
            break;
          case GL_FLOAT_VEC2:
            checkVector(2, 'number');
            break;
          case GL_FLOAT_VEC3:
            checkVector(3, 'number');
            break;
          case GL_FLOAT_VEC4:
            checkVector(4, 'number');
            break;
          case GL_BOOL:
            checkType('boolean');
            break;
          case GL_BOOL_VEC2:
            checkVector(2, 'boolean');
            break;
          case GL_BOOL_VEC3:
            checkVector(3, 'boolean');
            break;
          case GL_BOOL_VEC4:
            checkVector(4, 'boolean');
            break;
          case GL_FLOAT_MAT2:
            checkVector(4, 'number');
            break;
          case GL_FLOAT_MAT3:
            checkVector(9, 'number');
            break;
          case GL_FLOAT_MAT4:
            checkVector(16, 'number');
            break;
          case GL_SAMPLER_2D:
            checkTexture(GL_TEXTURE_2D);
            break;
          case GL_SAMPLER_CUBE:
            checkTexture(GL_TEXTURE_CUBE_MAP);
            break;
        }
      });

      var unroll = 1;
      switch (type) {
        case GL_SAMPLER_2D:
        case GL_SAMPLER_CUBE:
          var TEX = scope.def(VALUE, '._texture');
          scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');
          scope.exit(TEX, '.unbind();');
          continue;

        case GL_INT:
        case GL_BOOL:
          infix = '1i';
          break;

        case GL_INT_VEC2:
        case GL_BOOL_VEC2:
          infix = '2i';
          unroll = 2;
          break;

        case GL_INT_VEC3:
        case GL_BOOL_VEC3:
          infix = '3i';
          unroll = 3;
          break;

        case GL_INT_VEC4:
        case GL_BOOL_VEC4:
          infix = '4i';
          unroll = 4;
          break;

        case GL_FLOAT:
          infix = '1f';
          break;

        case GL_FLOAT_VEC2:
          infix = '2f';
          unroll = 2;
          break;

        case GL_FLOAT_VEC3:
          infix = '3f';
          unroll = 3;
          break;

        case GL_FLOAT_VEC4:
          infix = '4f';
          unroll = 4;
          break;

        case GL_FLOAT_MAT2:
          infix = 'Matrix2fv';
          break;

        case GL_FLOAT_MAT3:
          infix = 'Matrix3fv';
          break;

        case GL_FLOAT_MAT4:
          infix = 'Matrix4fv';
          break;
      }

      if (infix.charAt(0) === 'M') {
        scope(GL, '.uniform', infix, '(', LOCATION, ',');
        var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
        var STORAGE = env.global.def('new Float32Array(', matSize, ')');
        if (Array.isArray(VALUE)) {
          scope('false,(', loop(matSize, function (i) {
            return STORAGE + '[' + i + ']=' + VALUE[i];
          }), ',', STORAGE, ')');
        } else {
          scope('false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(', loop(matSize, function (i) {
            return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']';
          }), ',', STORAGE, ')');
        }
        scope(');');
      } else if (unroll > 1) {
        var prev = [];
        var cur = [];
        for (var j = 0; j < unroll; ++j) {
          if (Array.isArray(VALUE)) {
            cur.push(VALUE[j]);
          } else {
            cur.push(scope.def(VALUE + '[' + j + ']'));
          }
          if (isBatchInnerLoop) {
            prev.push(scope.def());
          }
        }
        if (isBatchInnerLoop) {
          scope('if(!', env.batchId, '||', prev.map(function (p, i) {
            return p + '!==' + cur[i];
          }).join('||'), '){', prev.map(function (p, i) {
            return p + '=' + cur[i] + ';';
          }).join(''));
        }
        scope(GL, '.uniform', infix, '(', LOCATION, ',', cur.join(','), ');');
        if (isBatchInnerLoop) {
          scope('}');
        }
      } else {
        check(!Array.isArray(VALUE), 'uniform value must not be an array');
        if (isBatchInnerLoop) {
          var prevS = scope.def();
          scope('if(!', env.batchId, '||', prevS, '!==', VALUE, '){', prevS, '=', VALUE, ';');
        }
        scope(GL, '.uniform', infix, '(', LOCATION, ',', VALUE, ');');
        if (isBatchInnerLoop) {
          scope('}');
        }
      }
    }
  }

  function emitDraw(env, outer, inner, args) {
    var shared = env.shared;
    var GL = shared.gl;
    var DRAW_STATE = shared.draw;

    var drawOptions = args.draw;

    function emitElements() {
      var defn = drawOptions.elements;
      var ELEMENTS;
      var scope = outer;
      if (defn) {
        if (defn.contextDep && args.contextDynamic || defn.propDep) {
          scope = inner;
        }
        ELEMENTS = defn.append(env, scope);
        if (drawOptions.elementsActive) {
          scope('if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER + ',' + ELEMENTS + '.buffer.buffer);');
        }
      } else {
        ELEMENTS = scope.def();
        scope(ELEMENTS, '=', DRAW_STATE, '.', S_ELEMENTS, ';', 'if(', ELEMENTS, '){', GL, '.bindBuffer(', GL_ELEMENT_ARRAY_BUFFER, ',', ELEMENTS, '.buffer.buffer);}', 'else if(', shared.vao, '.currentVAO){', ELEMENTS, '=', env.shared.elements + '.getElements(' + shared.vao, '.currentVAO.elements);', !extVertexArrays ? 'if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER + ',' + ELEMENTS + '.buffer.buffer);' : '', '}');
      }
      return ELEMENTS;
    }

    function emitCount() {
      var defn = drawOptions.count;
      var COUNT;
      var scope = outer;
      if (defn) {
        if (defn.contextDep && args.contextDynamic || defn.propDep) {
          scope = inner;
        }
        COUNT = defn.append(env, scope);
        check.optional(function () {
          if (defn.MISSING) {
            env.assert(outer, 'false', 'missing vertex count');
          }
          if (defn.DYNAMIC) {
            env.assert(scope, COUNT + '>=0', 'missing vertex count');
          }
        });
      } else {
        COUNT = scope.def(DRAW_STATE, '.', S_COUNT);
        check.optional(function () {
          env.assert(scope, COUNT + '>=0', 'missing vertex count');
        });
      }
      return COUNT;
    }

    var ELEMENTS = emitElements();
    function emitValue(name) {
      var defn = drawOptions[name];
      if (defn) {
        if (defn.contextDep && args.contextDynamic || defn.propDep) {
          return defn.append(env, inner);
        } else {
          return defn.append(env, outer);
        }
      } else {
        return outer.def(DRAW_STATE, '.', name);
      }
    }

    var PRIMITIVE = emitValue(S_PRIMITIVE);
    var OFFSET = emitValue(S_OFFSET);

    var COUNT = emitCount();
    if (typeof COUNT === 'number') {
      if (COUNT === 0) {
        return;
      }
    } else {
      inner('if(', COUNT, '){');
      inner.exit('}');
    }

    var INSTANCES, EXT_INSTANCING;
    if (extInstancing) {
      INSTANCES = emitValue(S_INSTANCES);
      EXT_INSTANCING = env.instancing;
    }

    var ELEMENT_TYPE = ELEMENTS + '.type';

    var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;

    function emitInstancing() {
      function drawElements() {
        inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE + ')>>1)', INSTANCES], ');');
      }

      function drawArrays() {
        inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(', [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');
      }

      if (ELEMENTS && ELEMENTS !== 'null') {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    function emitRegular() {
      function drawElements() {
        inner(GL + '.drawElements(' + [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE + ')>>1)'] + ');');
      }

      function drawArrays() {
        inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');
      }

      if (ELEMENTS && ELEMENTS !== 'null') {
        if (!elementsStatic) {
          inner('if(', ELEMENTS, '){');
          drawElements();
          inner('}else{');
          drawArrays();
          inner('}');
        } else {
          drawElements();
        }
      } else {
        drawArrays();
      }
    }

    if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {
      if (typeof INSTANCES === 'string') {
        inner('if(', INSTANCES, '>0){');
        emitInstancing();
        inner('}else if(', INSTANCES, '<0){');
        emitRegular();
        inner('}');
      } else {
        emitInstancing();
      }
    } else {
      emitRegular();
    }
  }

  function createBody(emitBody, parentEnv, args, program, count) {
    var env = createREGLEnvironment();
    var scope = env.proc('body', count);
    check.optional(function () {
      env.commandStr = parentEnv.commandStr;
      env.command = env.link(parentEnv.commandStr);
    });
    if (extInstancing) {
      env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');
    }
    emitBody(env, scope, args, program);
    return env.compile().body;
  }

  // ===================================================
  // ===================================================
  // DRAW PROC
  // ===================================================
  // ===================================================
  function emitDrawBody(env, draw, args, program) {
    injectExtensions(env, draw);
    if (args.useVAO) {
      if (args.drawVAO) {
        draw(env.shared.vao, '.setVAO(', args.drawVAO.append(env, draw), ');');
      } else {
        draw(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');
      }
    } else {
      draw(env.shared.vao, '.setVAO(null);');
      emitAttributes(env, draw, args, program.attributes, function () {
        return true;
      });
    }
    emitUniforms(env, draw, args, program.uniforms, function () {
      return true;
    }, false);
    emitDraw(env, draw, draw, args);
  }

  function emitDrawProc(env, args) {
    var draw = env.proc('draw', 1);

    injectExtensions(env, draw);

    emitContext(env, draw, args.context);
    emitPollFramebuffer(env, draw, args.framebuffer);

    emitPollState(env, draw, args);
    emitSetOptions(env, draw, args.state);

    emitProfile(env, draw, args, false, true);

    var program = args.shader.progVar.append(env, draw);
    draw(env.shared.gl, '.useProgram(', program, '.program);');

    if (args.shader.program) {
      emitDrawBody(env, draw, args, args.shader.program);
    } else {
      draw(env.shared.vao, '.setVAO(null);');
      var drawCache = env.global.def('{}');
      var PROG_ID = draw.def(program, '.id');
      var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');
      draw(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0);').else(CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=', env.link(function (program) {
        return createBody(emitDrawBody, env, args, program, 1);
      }), '(', program, ');', CACHED_PROC, '.call(this,a0);'));
    }

    if (sortedObjectKeys(args.state).length > 0) {
      draw(env.shared.current, '.dirty=true;');
    }
    if (env.shared.vao) {
      draw(env.shared.vao, '.setVAO(null);');
    }
  }

  // ===================================================
  // ===================================================
  // BATCH PROC
  // ===================================================
  // ===================================================

  function emitBatchDynamicShaderBody(env, scope, args, program) {
    env.batchId = 'a1';

    injectExtensions(env, scope);

    function all() {
      return true;
    }

    emitAttributes(env, scope, args, program.attributes, all);
    emitUniforms(env, scope, args, program.uniforms, all, false);
    emitDraw(env, scope, scope, args);
  }

  function emitBatchBody(env, scope, args, program) {
    injectExtensions(env, scope);

    var contextDynamic = args.contextDep;

    var BATCH_ID = scope.def();
    var PROP_LIST = 'a0';
    var NUM_PROPS = 'a1';
    var PROPS = scope.def();
    env.shared.props = PROPS;
    env.batchId = BATCH_ID;

    var outer = env.scope();
    var inner = env.scope();

    scope(outer.entry, 'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){', PROPS, '=', PROP_LIST, '[', BATCH_ID, '];', inner, '}', outer.exit);

    function isInnerDefn(defn) {
      return defn.contextDep && contextDynamic || defn.propDep;
    }

    function isOuterDefn(defn) {
      return !isInnerDefn(defn);
    }

    if (args.needsContext) {
      emitContext(env, inner, args.context);
    }
    if (args.needsFramebuffer) {
      emitPollFramebuffer(env, inner, args.framebuffer);
    }
    emitSetOptions(env, inner, args.state, isInnerDefn);

    if (args.profile && isInnerDefn(args.profile)) {
      emitProfile(env, inner, args, false, true);
    }

    if (!program) {
      var progCache = env.global.def('{}');
      var PROGRAM = args.shader.progVar.append(env, inner);
      var PROG_ID = inner.def(PROGRAM, '.id');
      var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');
      inner(env.shared.gl, '.useProgram(', PROGRAM, '.program);', 'if(!', CACHED_PROC, '){', CACHED_PROC, '=', progCache, '[', PROG_ID, ']=', env.link(function (program) {
        return createBody(emitBatchDynamicShaderBody, env, args, program, 2);
      }), '(', PROGRAM, ');}', CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');
    } else {
      if (args.useVAO) {
        if (args.drawVAO) {
          if (isInnerDefn(args.drawVAO)) {
            // vao is a prop
            inner(env.shared.vao, '.setVAO(', args.drawVAO.append(env, inner), ');');
          } else {
            // vao is invariant
            outer(env.shared.vao, '.setVAO(', args.drawVAO.append(env, outer), ');');
          }
        } else {
          // scoped vao binding
          outer(env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');
        }
      } else {
        outer(env.shared.vao, '.setVAO(null);');
        emitAttributes(env, outer, args, program.attributes, isOuterDefn);
        emitAttributes(env, inner, args, program.attributes, isInnerDefn);
      }
      emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false);
      emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true);
      emitDraw(env, outer, inner, args);
    }
  }

  function emitBatchProc(env, args) {
    var batch = env.proc('batch', 2);
    env.batchId = '0';

    injectExtensions(env, batch);

    // Check if any context variables depend on props
    var contextDynamic = false;
    var needsContext = true;
    sortedObjectKeys(args.context).forEach(function (name) {
      contextDynamic = contextDynamic || args.context[name].propDep;
    });
    if (!contextDynamic) {
      emitContext(env, batch, args.context);
      needsContext = false;
    }

    // framebuffer state affects framebufferWidth/height context vars
    var framebuffer = args.framebuffer;
    var needsFramebuffer = false;
    if (framebuffer) {
      if (framebuffer.propDep) {
        contextDynamic = needsFramebuffer = true;
      } else if (framebuffer.contextDep && contextDynamic) {
        needsFramebuffer = true;
      }
      if (!needsFramebuffer) {
        emitPollFramebuffer(env, batch, framebuffer);
      }
    } else {
      emitPollFramebuffer(env, batch, null);
    }

    // viewport is weird because it can affect context vars
    if (args.state.viewport && args.state.viewport.propDep) {
      contextDynamic = true;
    }

    function isInnerDefn(defn) {
      return defn.contextDep && contextDynamic || defn.propDep;
    }

    // set webgl options
    emitPollState(env, batch, args);
    emitSetOptions(env, batch, args.state, function (defn) {
      return !isInnerDefn(defn);
    });

    if (!args.profile || !isInnerDefn(args.profile)) {
      emitProfile(env, batch, args, false, 'a1');
    }

    // Save these values to args so that the batch body routine can use them
    args.contextDep = contextDynamic;
    args.needsContext = needsContext;
    args.needsFramebuffer = needsFramebuffer;

    // determine if shader is dynamic
    var progDefn = args.shader.progVar;
    if (progDefn.contextDep && contextDynamic || progDefn.propDep) {
      emitBatchBody(env, batch, args, null);
    } else {
      var PROGRAM = progDefn.append(env, batch);
      batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');
      if (args.shader.program) {
        emitBatchBody(env, batch, args, args.shader.program);
      } else {
        batch(env.shared.vao, '.setVAO(null);');
        var batchCache = env.global.def('{}');
        var PROG_ID = batch.def(PROGRAM, '.id');
        var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');
        batch(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0,a1);').else(CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=', env.link(function (program) {
          return createBody(emitBatchBody, env, args, program, 2);
        }), '(', PROGRAM, ');', CACHED_PROC, '.call(this,a0,a1);'));
      }
    }

    if (sortedObjectKeys(args.state).length > 0) {
      batch(env.shared.current, '.dirty=true;');
    }

    if (env.shared.vao) {
      batch(env.shared.vao, '.setVAO(null);');
    }
  }

  // ===================================================
  // ===================================================
  // SCOPE COMMAND
  // ===================================================
  // ===================================================
  function emitScopeProc(env, args) {
    var scope = env.proc('scope', 3);
    env.batchId = 'a2';

    var shared = env.shared;
    var CURRENT_STATE = shared.current;

    emitContext(env, scope, args.context);

    if (args.framebuffer) {
      args.framebuffer.append(env, scope);
    }

    sortState(sortedObjectKeys(args.state)).forEach(function (name) {
      var defn = args.state[name];
      var value = defn.append(env, scope);
      if (isArrayLike(value)) {
        value.forEach(function (v, i) {
          scope.set(env.next[name], '[' + i + ']', v);
        });
      } else {
        scope.set(shared.next, '.' + name, value);
      }
    });

    emitProfile(env, scope, args, true, true);[S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(function (opt) {
      var variable = args.draw[opt];
      if (!variable) {
        return;
      }
      scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));
    });

    sortedObjectKeys(args.uniforms).forEach(function (opt) {
      var value = args.uniforms[opt].append(env, scope);
      if (Array.isArray(value)) {
        value = '[' + value.join() + ']';
      }
      scope.set(shared.uniforms, '[' + stringStore.id(opt) + ']', value);
    });

    sortedObjectKeys(args.attributes).forEach(function (name) {
      var record = args.attributes[name].append(env, scope);
      var scopeAttrib = env.scopeAttrib(name);
      sortedObjectKeys(new AttributeRecord()).forEach(function (prop) {
        scope.set(scopeAttrib, '.' + prop, record[prop]);
      });
    });

    if (args.scopeVAO) {
      scope.set(shared.vao, '.targetVAO', args.scopeVAO.append(env, scope));
    }

    function saveShader(name) {
      var shader = args.shader[name];
      if (shader) {
        scope.set(shared.shader, '.' + name, shader.append(env, scope));
      }
    }
    saveShader(S_VERT);
    saveShader(S_FRAG);

    if (sortedObjectKeys(args.state).length > 0) {
      scope(CURRENT_STATE, '.dirty=true;');
      scope.exit(CURRENT_STATE, '.dirty=true;');
    }

    scope('a1(', env.shared.context, ',a0,', env.batchId, ');');
  }

  function isDynamicObject(object) {
    if (typeof object !== 'object' || isArrayLike(object)) {
      return;
    }
    var props = sortedObjectKeys(object);
    for (var i = 0; i < props.length; ++i) {
      if (dynamic.isDynamic(object[props[i]])) {
        return true;
      }
    }
    return false;
  }

  function splatObject(env, options, name) {
    var object = options.static[name];
    if (!object || !isDynamicObject(object)) {
      return;
    }

    var globals = env.global;
    var keys = sortedObjectKeys(object);
    var thisDep = false;
    var contextDep = false;
    var propDep = false;
    var objectRef = env.global.def('{}');
    keys.forEach(function (key) {
      var value = object[key];
      if (dynamic.isDynamic(value)) {
        if (typeof value === 'function') {
          value = object[key] = dynamic.unbox(value);
        }
        var deps = createDynamicDecl(value, null);
        thisDep = thisDep || deps.thisDep;
        propDep = propDep || deps.propDep;
        contextDep = contextDep || deps.contextDep;
      } else {
        globals(objectRef, '.', key, '=');
        switch (typeof value) {
          case 'number':
            globals(value);
            break;
          case 'string':
            globals('"', value, '"');
            break;
          case 'object':
            if (Array.isArray(value)) {
              globals('[', value.join(), ']');
            }
            break;
          default:
            globals(env.link(value));
            break;
        }
        globals(';');
      }
    });

    function appendBlock(env, block) {
      keys.forEach(function (key) {
        var value = object[key];
        if (!dynamic.isDynamic(value)) {
          return;
        }
        var ref = env.invoke(block, value);
        block(objectRef, '.', key, '=', ref, ';');
      });
    }

    options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
      thisDep: thisDep,
      contextDep: contextDep,
      propDep: propDep,
      ref: objectRef,
      append: appendBlock
    });
    delete options.static[name];
  }

  // ===========================================================================
  // ===========================================================================
  // MAIN DRAW COMMAND
  // ===========================================================================
  // ===========================================================================
  function compileCommand(options, attributes, uniforms, context, stats) {
    var env = createREGLEnvironment();

    // link stats, so that we can easily access it in the program.
    env.stats = env.link(stats);

    // splat options and attributes to allow for dynamic nested properties
    sortedObjectKeys(attributes.static).forEach(function (key) {
      splatObject(env, attributes, key);
    });
    NESTED_OPTIONS.forEach(function (name) {
      splatObject(env, options, name);
    });

    var args = parseArguments(options, attributes, uniforms, context, env);

    emitDrawProc(env, args);
    emitScopeProc(env, args);
    emitBatchProc(env, args);

    return extend(env.compile(), {
      destroy: function () {
        args.shader.program.destroy();
      }
    });
  }

  // ===========================================================================
  // ===========================================================================
  // POLL / REFRESH
  // ===========================================================================
  // ===========================================================================
  return {
    next: nextState,
    current: currentState,
    procs: function () {
      var env = createREGLEnvironment();
      var poll = env.proc('poll');
      var refresh = env.proc('refresh');
      var common = env.block();
      poll(common);
      refresh(common);

      var shared = env.shared;
      var GL = shared.gl;
      var NEXT_STATE = shared.next;
      var CURRENT_STATE = shared.current;

      common(CURRENT_STATE, '.dirty=false;');

      emitPollFramebuffer(env, poll);
      emitPollFramebuffer(env, refresh, null, true);

      // Refresh updates all attribute state changes
      var INSTANCING;
      if (extInstancing) {
        INSTANCING = env.link(extInstancing);
      }

      // update vertex array bindings
      if (extensions.oes_vertex_array_object) {
        refresh(env.link(extensions.oes_vertex_array_object), '.bindVertexArrayOES(null);');
      }
      for (var i = 0; i < limits.maxAttributes; ++i) {
        var BINDING = refresh.def(shared.attributes, '[', i, ']');
        var ifte = env.cond(BINDING, '.buffer');
        ifte.then(GL, '.enableVertexAttribArray(', i, ');', GL, '.bindBuffer(', GL_ARRAY_BUFFER, ',', BINDING, '.buffer.buffer);', GL, '.vertexAttribPointer(', i, ',', BINDING, '.size,', BINDING, '.type,', BINDING, '.normalized,', BINDING, '.stride,', BINDING, '.offset);').else(GL, '.disableVertexAttribArray(', i, ');', GL, '.vertexAttrib4f(', i, ',', BINDING, '.x,', BINDING, '.y,', BINDING, '.z,', BINDING, '.w);', BINDING, '.buffer=null;');
        refresh(ifte);
        if (extInstancing) {
          refresh(INSTANCING, '.vertexAttribDivisorANGLE(', i, ',', BINDING, '.divisor);');
        }
      }
      refresh(env.shared.vao, '.currentVAO=null;', env.shared.vao, '.setVAO(', env.shared.vao, '.targetVAO);');

      sortedObjectKeys(GL_FLAGS).forEach(function (flag) {
        var cap = GL_FLAGS[flag];
        var NEXT = common.def(NEXT_STATE, '.', flag);
        var block = env.block();
        block('if(', NEXT, '){', GL, '.enable(', cap, ')}else{', GL, '.disable(', cap, ')}', CURRENT_STATE, '.', flag, '=', NEXT, ';');
        refresh(block);
        poll('if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){', block, '}');
      });

      sortedObjectKeys(GL_VARIABLES).forEach(function (name) {
        var func = GL_VARIABLES[name];
        var init = currentState[name];
        var NEXT, CURRENT;
        var block = env.block();
        block(GL, '.', func, '(');
        if (isArrayLike(init)) {
          var n = init.length;
          NEXT = env.global.def(NEXT_STATE, '.', name);
          CURRENT = env.global.def(CURRENT_STATE, '.', name);
          block(loop(n, function (i) {
            return NEXT + '[' + i + ']';
          }), ');', loop(n, function (i) {
            return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];';
          }).join(''));
          poll('if(', loop(n, function (i) {
            return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']';
          }).join('||'), '){', block, '}');
        } else {
          NEXT = common.def(NEXT_STATE, '.', name);
          CURRENT = common.def(CURRENT_STATE, '.', name);
          block(NEXT, ');', CURRENT_STATE, '.', name, '=', NEXT, ';');
          poll('if(', NEXT, '!==', CURRENT, '){', block, '}');
        }
        refresh(block);
      });

      return env.compile();
    }(),
    compile: compileCommand
  };
};

},{"./constants/dtypes.json":5,"./constants/primitives.json":6,"./dynamic":9,"./util/check":21,"./util/codegen":23,"./util/extend":25,"./util/is-array-like":27,"./util/is-ndarray":28,"./util/is-typed-array":30,"./util/loop":31,"./util/sorted-object-keys":34}],9:[function(require,module,exports){
var check = require('./util/check');

var VARIABLE_COUNTER = 0;

var DYN_FUNC = 0;
var DYN_CONSTANT = 5;
var DYN_ARRAY = 6;

function DynamicVariable(type, data) {
  this.id = VARIABLE_COUNTER++;
  this.type = type;
  this.data = data;
}

function escapeStr(str) {
  return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
}

function splitParts(str) {
  if (str.length === 0) {
    return [];
  }

  var firstChar = str.charAt(0);
  var lastChar = str.charAt(str.length - 1);

  if (str.length > 1 && firstChar === lastChar && (firstChar === '"' || firstChar === "'")) {
    return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"'];
  }

  var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);
  if (parts) {
    return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));
  }

  var subparts = str.split('.');
  if (subparts.length === 1) {
    return ['"' + escapeStr(str) + '"'];
  }

  var result = [];
  for (var i = 0; i < subparts.length; ++i) {
    result = result.concat(splitParts(subparts[i]));
  }
  return result;
}

function toAccessorString(str) {
  return '[' + splitParts(str).join('][') + ']';
}

function defineDynamic(type, data) {
  return new DynamicVariable(type, toAccessorString(data + ''));
}

function isDynamic(x) {
  return typeof x === 'function' && !x._reglType || x instanceof DynamicVariable;
}

function unbox(x, path) {
  if (typeof x === 'function') {
    return new DynamicVariable(DYN_FUNC, x);
  } else if (typeof x === 'number' || typeof x === 'boolean') {
    return new DynamicVariable(DYN_CONSTANT, x);
  } else if (Array.isArray(x)) {
    return new DynamicVariable(DYN_ARRAY, x.map(function (y, i) {
      return unbox(y, path + '[' + i + ']');
    }));
  } else if (x instanceof DynamicVariable) {
    return x;
  }
  check(false, 'invalid option type in uniform ' + path);
}

module.exports = {
  DynamicVariable: DynamicVariable,
  define: defineDynamic,
  isDynamic: isDynamic,
  unbox: unbox,
  accessor: toAccessorString
};

},{"./util/check":21}],10:[function(require,module,exports){
var check = require('./util/check');
var isTypedArray = require('./util/is-typed-array');
var isNDArrayLike = require('./util/is-ndarray');
var values = require('./util/values');

var primTypes = require('./constants/primitives.json');
var usageTypes = require('./constants/usage.json');

var GL_POINTS = 0;
var GL_LINES = 1;
var GL_TRIANGLES = 4;

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;

var GL_ELEMENT_ARRAY_BUFFER = 34963;

var GL_STREAM_DRAW = 0x88E0;
var GL_STATIC_DRAW = 0x88E4;

module.exports = function wrapElementsState(gl, extensions, bufferState, stats) {
  var elementSet = {};
  var elementCount = 0;

  var elementTypes = {
    'uint8': GL_UNSIGNED_BYTE,
    'uint16': GL_UNSIGNED_SHORT
  };

  if (extensions.oes_element_index_uint) {
    elementTypes.uint32 = GL_UNSIGNED_INT;
  }

  function REGLElementBuffer(buffer) {
    this.id = elementCount++;
    elementSet[this.id] = this;
    this.buffer = buffer;
    this.primType = GL_TRIANGLES;
    this.vertCount = 0;
    this.type = 0;
  }

  REGLElementBuffer.prototype.bind = function () {
    this.buffer.bind();
  };

  var bufferPool = [];

  function createElementStream(data) {
    var result = bufferPool.pop();
    if (!result) {
      result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);
    }
    initElements(result, data, GL_STREAM_DRAW, -1, -1, 0, 0);
    return result;
  }

  function destroyElementStream(elements) {
    bufferPool.push(elements);
  }

  function initElements(elements, data, usage, prim, count, byteLength, type) {
    elements.buffer.bind();
    var dtype;
    if (data) {
      var predictedType = type;
      if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {
        predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT : GL_UNSIGNED_SHORT;
      }
      bufferState._initBuffer(elements.buffer, data, usage, predictedType, 3);
    } else {
      gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
      elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE;
      elements.buffer.usage = usage;
      elements.buffer.dimension = 3;
      elements.buffer.byteLength = byteLength;
    }

    dtype = type;
    if (!type) {
      switch (elements.buffer.dtype) {
        case GL_UNSIGNED_BYTE:
        case GL_BYTE:
          dtype = GL_UNSIGNED_BYTE;
          break;

        case GL_UNSIGNED_SHORT:
        case GL_SHORT:
          dtype = GL_UNSIGNED_SHORT;
          break;

        case GL_UNSIGNED_INT:
        case GL_INT:
          dtype = GL_UNSIGNED_INT;
          break;

        default:
          check.raise('unsupported type for element array');
      }
      elements.buffer.dtype = dtype;
    }
    elements.type = dtype;

    // Check oes_element_index_uint extension
    check(dtype !== GL_UNSIGNED_INT || !!extensions.oes_element_index_uint, '32 bit element buffers not supported, enable oes_element_index_uint first');

    // try to guess default primitive type and arguments
    var vertCount = count;
    if (vertCount < 0) {
      vertCount = elements.buffer.byteLength;
      if (dtype === GL_UNSIGNED_SHORT) {
        vertCount >>= 1;
      } else if (dtype === GL_UNSIGNED_INT) {
        vertCount >>= 2;
      }
    }
    elements.vertCount = vertCount;

    // try to guess primitive type from cell dimension
    var primType = prim;
    if (prim < 0) {
      primType = GL_TRIANGLES;
      var dimension = elements.buffer.dimension;
      if (dimension === 1) primType = GL_POINTS;
      if (dimension === 2) primType = GL_LINES;
      if (dimension === 3) primType = GL_TRIANGLES;
    }
    elements.primType = primType;
  }

  function destroyElements(elements) {
    stats.elementsCount--;

    check(elements.buffer !== null, 'must not double destroy elements');
    delete elementSet[elements.id];
    elements.buffer.destroy();
    elements.buffer = null;
  }

  function createElements(options, persistent) {
    var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
    var elements = new REGLElementBuffer(buffer._buffer);
    stats.elementsCount++;

    function reglElements(options) {
      if (!options) {
        buffer();
        elements.primType = GL_TRIANGLES;
        elements.vertCount = 0;
        elements.type = GL_UNSIGNED_BYTE;
      } else if (typeof options === 'number') {
        buffer(options);
        elements.primType = GL_TRIANGLES;
        elements.vertCount = options | 0;
        elements.type = GL_UNSIGNED_BYTE;
      } else {
        var data = null;
        var usage = GL_STATIC_DRAW;
        var primType = -1;
        var vertCount = -1;
        var byteLength = 0;
        var dtype = 0;
        if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {
          data = options;
        } else {
          check.type(options, 'object', 'invalid arguments for elements');
          if ('data' in options) {
            data = options.data;
            check(Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for element buffer');
          }
          if ('usage' in options) {
            check.parameter(options.usage, usageTypes, 'invalid element buffer usage');
            usage = usageTypes[options.usage];
          }
          if ('primitive' in options) {
            check.parameter(options.primitive, primTypes, 'invalid element buffer primitive');
            primType = primTypes[options.primitive];
          }
          if ('count' in options) {
            check(typeof options.count === 'number' && options.count >= 0, 'invalid vertex count for elements');
            vertCount = options.count | 0;
          }
          if ('type' in options) {
            check.parameter(options.type, elementTypes, 'invalid buffer type');
            dtype = elementTypes[options.type];
          }
          if ('length' in options) {
            byteLength = options.length | 0;
          } else {
            byteLength = vertCount;
            if (dtype === GL_UNSIGNED_SHORT || dtype === GL_SHORT) {
              byteLength *= 2;
            } else if (dtype === GL_UNSIGNED_INT || dtype === GL_INT) {
              byteLength *= 4;
            }
          }
        }
        initElements(elements, data, usage, primType, vertCount, byteLength, dtype);
      }

      return reglElements;
    }

    reglElements(options);

    reglElements._reglType = 'elements';
    reglElements._elements = elements;
    reglElements.subdata = function (data, offset) {
      buffer.subdata(data, offset);
      return reglElements;
    };
    reglElements.destroy = function () {
      destroyElements(elements);
    };

    return reglElements;
  }

  return {
    create: createElements,
    createStream: createElementStream,
    destroyStream: destroyElementStream,
    getElements: function (elements) {
      if (typeof elements === 'function' && elements._elements instanceof REGLElementBuffer) {
        return elements._elements;
      }
      return null;
    },
    clear: function () {
      values(elementSet).forEach(destroyElements);
    }
  };
};

},{"./constants/primitives.json":6,"./constants/usage.json":7,"./util/check":21,"./util/is-ndarray":28,"./util/is-typed-array":30,"./util/values":36}],11:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');

module.exports = function createExtensionCache(gl, config) {
  var extensions = {};

  function tryLoadExtension(name_) {
    check.type(name_, 'string', 'extension name must be string');
    var name = name_.toLowerCase();
    var ext;
    try {
      ext = extensions[name] = gl.getExtension(name);
    } catch (e) {}
    return !!ext;
  }

  for (var i = 0; i < config.extensions.length; ++i) {
    var name = config.extensions[i];
    if (!tryLoadExtension(name)) {
      config.onDestroy();
      config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
      return null;
    }
  }

  config.optionalExtensions.forEach(tryLoadExtension);

  return {
    extensions: extensions,
    restore: function () {
      sortedObjectKeys(extensions).forEach(function (name) {
        if (extensions[name] && !tryLoadExtension(name)) {
          throw new Error('(regl): error restoring extension ' + name);
        }
      });
    }
  };
};

},{"./util/check":21,"./util/sorted-object-keys":34}],12:[function(require,module,exports){
var check = require('./util/check');
var values = require('./util/values');
var extend = require('./util/extend');

// We store these constants so that the minifier can inline them
var GL_FRAMEBUFFER = 0x8D40;
var GL_RENDERBUFFER = 0x8D41;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;

var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_DEPTH_ATTACHMENT = 0x8D00;
var GL_STENCIL_ATTACHMENT = 0x8D20;
var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;

var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;

var GL_HALF_FLOAT_OES = 0x8D61;
var GL_UNSIGNED_BYTE = 0x1401;
var GL_FLOAT = 0x1406;

var GL_RGB = 0x1907;
var GL_RGBA = 0x1908;

var GL_DEPTH_COMPONENT = 0x1902;

var colorTextureFormatEnums = [GL_RGB, GL_RGBA];

// for every texture format, store
// the number of channels
var textureFormatChannels = [];
textureFormatChannels[GL_RGBA] = 4;
textureFormatChannels[GL_RGB] = 3;

// for every texture type, store
// the size in bytes.
var textureTypeSizes = [];
textureTypeSizes[GL_UNSIGNED_BYTE] = 1;
textureTypeSizes[GL_FLOAT] = 4;
textureTypeSizes[GL_HALF_FLOAT_OES] = 2;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;
var GL_DEPTH_COMPONENT16 = 0x81A5;
var GL_STENCIL_INDEX8 = 0x8D48;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB8_ALPHA8_EXT = 0x8C43;

var GL_RGBA32F_EXT = 0x8814;

var GL_RGBA16F_EXT = 0x881A;
var GL_RGB16F_EXT = 0x881B;

var colorRenderbufferFormatEnums = [GL_RGBA4, GL_RGB5_A1, GL_RGB565, GL_SRGB8_ALPHA8_EXT, GL_RGBA16F_EXT, GL_RGB16F_EXT, GL_RGBA32F_EXT];

var statusCode = {};
statusCode[GL_FRAMEBUFFER_COMPLETE] = 'complete';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';
statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';
statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';

module.exports = function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats) {
  var framebufferState = {
    cur: null,
    next: null,
    dirty: false,
    setFBO: null
  };

  var colorTextureFormats = ['rgba'];
  var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];

  if (extensions.ext_srgb) {
    colorRenderbufferFormats.push('srgba');
  }

  if (extensions.ext_color_buffer_half_float) {
    colorRenderbufferFormats.push('rgba16f', 'rgb16f');
  }

  if (extensions.webgl_color_buffer_float) {
    colorRenderbufferFormats.push('rgba32f');
  }

  var colorTypes = ['uint8'];
  if (extensions.oes_texture_half_float) {
    colorTypes.push('half float', 'float16');
  }
  if (extensions.oes_texture_float) {
    colorTypes.push('float', 'float32');
  }

  function FramebufferAttachment(target, texture, renderbuffer) {
    this.target = target;
    this.texture = texture;
    this.renderbuffer = renderbuffer;

    var w = 0;
    var h = 0;
    if (texture) {
      w = texture.width;
      h = texture.height;
    } else if (renderbuffer) {
      w = renderbuffer.width;
      h = renderbuffer.height;
    }
    this.width = w;
    this.height = h;
  }

  function decRef(attachment) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture._texture.decRef();
      }
      if (attachment.renderbuffer) {
        attachment.renderbuffer._renderbuffer.decRef();
      }
    }
  }

  function incRefAndCheckShape(attachment, width, height) {
    if (!attachment) {
      return;
    }
    if (attachment.texture) {
      var texture = attachment.texture._texture;
      var tw = Math.max(1, texture.width);
      var th = Math.max(1, texture.height);
      check(tw === width && th === height, 'inconsistent width/height for supplied texture');
      texture.refCount += 1;
    } else {
      var renderbuffer = attachment.renderbuffer._renderbuffer;
      check(renderbuffer.width === width && renderbuffer.height === height, 'inconsistent width/height for renderbuffer');
      renderbuffer.refCount += 1;
    }
  }

  function attach(location, attachment) {
    if (attachment) {
      if (attachment.texture) {
        gl.framebufferTexture2D(GL_FRAMEBUFFER, location, attachment.target, attachment.texture._texture.texture, 0);
      } else {
        gl.framebufferRenderbuffer(GL_FRAMEBUFFER, location, GL_RENDERBUFFER, attachment.renderbuffer._renderbuffer.renderbuffer);
      }
    }
  }

  function parseAttachment(attachment) {
    var target = GL_TEXTURE_2D;
    var texture = null;
    var renderbuffer = null;

    var data = attachment;
    if (typeof attachment === 'object') {
      data = attachment.data;
      if ('target' in attachment) {
        target = attachment.target | 0;
      }
    }

    check.type(data, 'function', 'invalid attachment data');

    var type = data._reglType;
    if (type === 'texture2d') {
      texture = data;
      check(target === GL_TEXTURE_2D);
    } else if (type === 'textureCube') {
      texture = data;
      check(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X + 6, 'invalid cube map target');
    } else if (type === 'renderbuffer') {
      renderbuffer = data;
      target = GL_RENDERBUFFER;
    } else {
      check.raise('invalid regl object for attachment');
    }

    return new FramebufferAttachment(target, texture, renderbuffer);
  }

  function allocAttachment(width, height, isTexture, format, type) {
    if (isTexture) {
      var texture = textureState.create2D({
        width: width,
        height: height,
        format: format,
        type: type
      });
      texture._texture.refCount = 0;
      return new FramebufferAttachment(GL_TEXTURE_2D, texture, null);
    } else {
      var rb = renderbufferState.create({
        width: width,
        height: height,
        format: format
      });
      rb._renderbuffer.refCount = 0;
      return new FramebufferAttachment(GL_RENDERBUFFER, null, rb);
    }
  }

  function unwrapAttachment(attachment) {
    return attachment && (attachment.texture || attachment.renderbuffer);
  }

  function resizeAttachment(attachment, w, h) {
    if (attachment) {
      if (attachment.texture) {
        attachment.texture.resize(w, h);
      } else if (attachment.renderbuffer) {
        attachment.renderbuffer.resize(w, h);
      }
      attachment.width = w;
      attachment.height = h;
    }
  }

  var framebufferCount = 0;
  var framebufferSet = {};

  function REGLFramebuffer() {
    this.id = framebufferCount++;
    framebufferSet[this.id] = this;

    this.framebuffer = gl.createFramebuffer();
    this.width = 0;
    this.height = 0;

    this.colorAttachments = [];
    this.depthAttachment = null;
    this.stencilAttachment = null;
    this.depthStencilAttachment = null;
  }

  function decFBORefs(framebuffer) {
    framebuffer.colorAttachments.forEach(decRef);
    decRef(framebuffer.depthAttachment);
    decRef(framebuffer.stencilAttachment);
    decRef(framebuffer.depthStencilAttachment);
  }

  function destroy(framebuffer) {
    var handle = framebuffer.framebuffer;
    check(handle, 'must not double destroy framebuffer');
    gl.deleteFramebuffer(handle);
    framebuffer.framebuffer = null;
    stats.framebufferCount--;
    delete framebufferSet[framebuffer.id];
  }

  function updateFramebuffer(framebuffer) {
    var i;

    gl.bindFramebuffer(GL_FRAMEBUFFER, framebuffer.framebuffer);
    var colorAttachments = framebuffer.colorAttachments;
    for (i = 0; i < colorAttachments.length; ++i) {
      attach(GL_COLOR_ATTACHMENT0 + i, colorAttachments[i]);
    }
    for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
      gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0 + i, GL_TEXTURE_2D, null, 0);
    }

    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D, null, 0);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, null, 0);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D, null, 0);

    attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
    attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
    attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);

    // Check status code
    var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER);
    if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE) {
      check.raise('framebuffer configuration not supported, status = ' + statusCode[status]);
    }

    gl.bindFramebuffer(GL_FRAMEBUFFER, framebufferState.next ? framebufferState.next.framebuffer : null);
    framebufferState.cur = framebufferState.next;

    // FIXME: Clear error code here.  This is a work around for a bug in
    // headless-gl
    gl.getError();
  }

  function createFBO(a0, a1) {
    var framebuffer = new REGLFramebuffer();
    stats.framebufferCount++;

    function reglFramebuffer(a, b) {
      var i;

      check(framebufferState.next !== framebuffer, 'can not update framebuffer which is currently in use');

      var width = 0;
      var height = 0;

      var needsDepth = true;
      var needsStencil = true;

      var colorBuffer = null;
      var colorTexture = true;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      var depthBuffer = null;
      var stencilBuffer = null;
      var depthStencilBuffer = null;
      var depthStencilTexture = false;

      if (typeof a === 'number') {
        width = a | 0;
        height = b | 0 || width;
      } else if (!a) {
        width = height = 1;
      } else {
        check.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');
          width = shape[0];
          height = shape[1];
        } else {
          if ('radius' in options) {
            width = height = options.radius;
          }
          if ('width' in options) {
            width = options.width;
          }
          if ('height' in options) {
            height = options.height;
          }
        }

        if ('color' in options || 'colors' in options) {
          colorBuffer = options.color || options.colors;
          if (Array.isArray(colorBuffer)) {
            check(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorTexture' in options) {
            colorTexture = !!options.colorTexture;
            colorFormat = 'rgba4';
          }

          if ('colorType' in options) {
            colorType = options.colorType;
            if (!colorTexture) {
              if (colorType === 'half float' || colorType === 'float16') {
                check(extensions.ext_color_buffer_half_float, 'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');
                colorFormat = 'rgba16f';
              } else if (colorType === 'float' || colorType === 'float32') {
                check(extensions.webgl_color_buffer_float, 'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');
                colorFormat = 'rgba32f';
              }
            } else {
              check(extensions.oes_texture_float || !(colorType === 'float' || colorType === 'float32'), 'you must enable OES_texture_float in order to use floating point framebuffer objects');
              check(extensions.oes_texture_half_float || !(colorType === 'half float' || colorType === 'float16'), 'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');
            }
            check.oneOf(colorType, colorTypes, 'invalid color type');
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            if (colorTextureFormats.indexOf(colorFormat) >= 0) {
              colorTexture = true;
            } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
              colorTexture = false;
            } else {
              check.optional(function () {
                if (colorTexture) {
                  check.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');
                } else {
                  check.oneOf(options.colorFormat, colorRenderbufferFormats, 'invalid color format for renderbuffer');
                }
              });
            }
          }
        }

        if ('depthTexture' in options || 'depthStencilTexture' in options) {
          depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);
          check(!depthStencilTexture || extensions.webgl_depth_texture, 'webgl_depth_texture extension not supported');
        }

        if ('depth' in options) {
          if (typeof options.depth === 'boolean') {
            needsDepth = options.depth;
          } else {
            depthBuffer = options.depth;
            needsStencil = false;
          }
        }

        if ('stencil' in options) {
          if (typeof options.stencil === 'boolean') {
            needsStencil = options.stencil;
          } else {
            stencilBuffer = options.stencil;
            needsDepth = false;
          }
        }

        if ('depthStencil' in options) {
          if (typeof options.depthStencil === 'boolean') {
            needsDepth = needsStencil = options.depthStencil;
          } else {
            depthStencilBuffer = options.depthStencil;
            needsDepth = false;
            needsStencil = false;
          }
        }
      }

      // parse attachments
      var colorAttachments = null;
      var depthAttachment = null;
      var stencilAttachment = null;
      var depthStencilAttachment = null;

      // Set up color attachments
      if (Array.isArray(colorBuffer)) {
        colorAttachments = colorBuffer.map(parseAttachment);
      } else if (colorBuffer) {
        colorAttachments = [parseAttachment(colorBuffer)];
      } else {
        colorAttachments = new Array(colorCount);
        for (i = 0; i < colorCount; ++i) {
          colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);
        }
      }

      check(extensions.webgl_draw_buffers || colorAttachments.length <= 1, 'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');
      check(colorAttachments.length <= limits.maxColorAttachments, 'too many color attachments, not supported');

      width = width || colorAttachments[0].width;
      height = height || colorAttachments[0].height;

      if (depthBuffer) {
        depthAttachment = parseAttachment(depthBuffer);
      } else if (needsDepth && !needsStencil) {
        depthAttachment = allocAttachment(width, height, depthStencilTexture, 'depth', 'uint32');
      }

      if (stencilBuffer) {
        stencilAttachment = parseAttachment(stencilBuffer);
      } else if (needsStencil && !needsDepth) {
        stencilAttachment = allocAttachment(width, height, false, 'stencil', 'uint8');
      }

      if (depthStencilBuffer) {
        depthStencilAttachment = parseAttachment(depthStencilBuffer);
      } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
        depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, 'depth stencil', 'depth stencil');
      }

      check(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, 'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');

      var commonColorAttachmentSize = null;

      for (i = 0; i < colorAttachments.length; ++i) {
        incRefAndCheckShape(colorAttachments[i], width, height);
        check(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, 'framebuffer color attachment ' + i + ' is invalid');

        if (colorAttachments[i] && colorAttachments[i].texture) {
          var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];

          if (commonColorAttachmentSize === null) {
            commonColorAttachmentSize = colorAttachmentSize;
          } else {
            // We need to make sure that all color attachments have the same number of bitplanes
            // (that is, the same numer of bits per pixel)
            // This is required by the GLES2.0 standard. See the beginning of Chapter 4 in that document.
            check(commonColorAttachmentSize === colorAttachmentSize, 'all color attachments much have the same number of bits per pixel.');
          }
        }
      }
      incRefAndCheckShape(depthAttachment, width, height);
      check(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16, 'invalid depth attachment for framebuffer object');
      incRefAndCheckShape(stencilAttachment, width, height);
      check(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8, 'invalid stencil attachment for framebuffer object');
      incRefAndCheckShape(depthStencilAttachment, width, height);
      check(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL, 'invalid depth-stencil attachment for framebuffer object');

      // decrement references
      decFBORefs(framebuffer);

      framebuffer.width = width;
      framebuffer.height = height;

      framebuffer.colorAttachments = colorAttachments;
      framebuffer.depthAttachment = depthAttachment;
      framebuffer.stencilAttachment = stencilAttachment;
      framebuffer.depthStencilAttachment = depthStencilAttachment;

      reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
      reglFramebuffer.depth = unwrapAttachment(depthAttachment);
      reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
      reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);

      reglFramebuffer.width = framebuffer.width;
      reglFramebuffer.height = framebuffer.height;

      updateFramebuffer(framebuffer);

      return reglFramebuffer;
    }

    function resize(w_, h_) {
      check(framebufferState.next !== framebuffer, 'can not resize a framebuffer which is currently in use');

      var w = Math.max(w_ | 0, 1);
      var h = Math.max(h_ | 0 || w, 1);
      if (w === framebuffer.width && h === framebuffer.height) {
        return reglFramebuffer;
      }

      // resize all buffers
      var colorAttachments = framebuffer.colorAttachments;
      for (var i = 0; i < colorAttachments.length; ++i) {
        resizeAttachment(colorAttachments[i], w, h);
      }
      resizeAttachment(framebuffer.depthAttachment, w, h);
      resizeAttachment(framebuffer.stencilAttachment, w, h);
      resizeAttachment(framebuffer.depthStencilAttachment, w, h);

      framebuffer.width = reglFramebuffer.width = w;
      framebuffer.height = reglFramebuffer.height = h;

      updateFramebuffer(framebuffer);

      return reglFramebuffer;
    }

    reglFramebuffer(a0, a1);

    return extend(reglFramebuffer, {
      resize: resize,
      _reglType: 'framebuffer',
      _framebuffer: framebuffer,
      destroy: function () {
        destroy(framebuffer);
        decFBORefs(framebuffer);
      },
      use: function (block) {
        framebufferState.setFBO({
          framebuffer: reglFramebuffer
        }, block);
      }
    });
  }

  function createCubeFBO(options) {
    var faces = Array(6);

    function reglFramebufferCube(a) {
      var i;

      check(faces.indexOf(framebufferState.next) < 0, 'can not update framebuffer which is currently in use');

      var params = {
        color: null
      };

      var radius = 0;

      var colorBuffer = null;
      var colorFormat = 'rgba';
      var colorType = 'uint8';
      var colorCount = 1;

      if (typeof a === 'number') {
        radius = a | 0;
      } else if (!a) {
        radius = 1;
      } else {
        check.type(a, 'object', 'invalid arguments for framebuffer');
        var options = a;

        if ('shape' in options) {
          var shape = options.shape;
          check(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');
          check(shape[0] === shape[1], 'cube framebuffer must be square');
          radius = shape[0];
        } else {
          if ('radius' in options) {
            radius = options.radius | 0;
          }
          if ('width' in options) {
            radius = options.width | 0;
            if ('height' in options) {
              check(options.height === radius, 'must be square');
            }
          } else if ('height' in options) {
            radius = options.height | 0;
          }
        }

        if ('color' in options || 'colors' in options) {
          colorBuffer = options.color || options.colors;
          if (Array.isArray(colorBuffer)) {
            check(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');
          }
        }

        if (!colorBuffer) {
          if ('colorCount' in options) {
            colorCount = options.colorCount | 0;
            check(colorCount > 0, 'invalid color buffer count');
          }

          if ('colorType' in options) {
            check.oneOf(options.colorType, colorTypes, 'invalid color type');
            colorType = options.colorType;
          }

          if ('colorFormat' in options) {
            colorFormat = options.colorFormat;
            check.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');
          }
        }

        if ('depth' in options) {
          params.depth = options.depth;
        }

        if ('stencil' in options) {
          params.stencil = options.stencil;
        }

        if ('depthStencil' in options) {
          params.depthStencil = options.depthStencil;
        }
      }

      var colorCubes;
      if (colorBuffer) {
        if (Array.isArray(colorBuffer)) {
          colorCubes = [];
          for (i = 0; i < colorBuffer.length; ++i) {
            colorCubes[i] = colorBuffer[i];
          }
        } else {
          colorCubes = [colorBuffer];
        }
      } else {
        colorCubes = Array(colorCount);
        var cubeMapParams = {
          radius: radius,
          format: colorFormat,
          type: colorType
        };
        for (i = 0; i < colorCount; ++i) {
          colorCubes[i] = textureState.createCube(cubeMapParams);
        }
      }

      // Check color cubes
      params.color = Array(colorCubes.length);
      for (i = 0; i < colorCubes.length; ++i) {
        var cube = colorCubes[i];
        check(typeof cube === 'function' && cube._reglType === 'textureCube', 'invalid cube map');
        radius = radius || cube.width;
        check(cube.width === radius && cube.height === radius, 'invalid cube map shape');
        params.color[i] = {
          target: GL_TEXTURE_CUBE_MAP_POSITIVE_X,
          data: colorCubes[i]
        };
      }

      for (i = 0; i < 6; ++i) {
        for (var j = 0; j < colorCubes.length; ++j) {
          params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X + i;
        }
        // reuse depth-stencil attachments across all cube maps
        if (i > 0) {
          params.depth = faces[0].depth;
          params.stencil = faces[0].stencil;
          params.depthStencil = faces[0].depthStencil;
        }
        if (faces[i]) {
          faces[i](params);
        } else {
          faces[i] = createFBO(params);
        }
      }

      return extend(reglFramebufferCube, {
        width: radius,
        height: radius,
        color: colorCubes
      });
    }

    function resize(radius_) {
      var i;
      var radius = radius_ | 0;
      check(radius > 0 && radius <= limits.maxCubeMapSize, 'invalid radius for cube fbo');

      if (radius === reglFramebufferCube.width) {
        return reglFramebufferCube;
      }

      var colors = reglFramebufferCube.color;
      for (i = 0; i < colors.length; ++i) {
        colors[i].resize(radius);
      }

      for (i = 0; i < 6; ++i) {
        faces[i].resize(radius);
      }

      reglFramebufferCube.width = reglFramebufferCube.height = radius;

      return reglFramebufferCube;
    }

    reglFramebufferCube(options);

    return extend(reglFramebufferCube, {
      faces: faces,
      resize: resize,
      _reglType: 'framebufferCube',
      destroy: function () {
        faces.forEach(function (f) {
          f.destroy();
        });
      }
    });
  }

  function restoreFramebuffers() {
    framebufferState.cur = null;
    framebufferState.next = null;
    framebufferState.dirty = true;
    values(framebufferSet).forEach(function (fb) {
      fb.framebuffer = gl.createFramebuffer();
      updateFramebuffer(fb);
    });
  }

  return extend(framebufferState, {
    getFramebuffer: function (object) {
      if (typeof object === 'function' && object._reglType === 'framebuffer') {
        var fbo = object._framebuffer;
        if (fbo instanceof REGLFramebuffer) {
          return fbo;
        }
      }
      return null;
    },
    create: createFBO,
    createCube: createCubeFBO,
    clear: function () {
      values(framebufferSet).forEach(destroy);
    },
    restore: restoreFramebuffers
  });
};

},{"./util/check":21,"./util/extend":25,"./util/values":36}],13:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var pool = require('./util/pool');

var GL_SUBPIXEL_BITS = 0x0D50;
var GL_RED_BITS = 0x0D52;
var GL_GREEN_BITS = 0x0D53;
var GL_BLUE_BITS = 0x0D54;
var GL_ALPHA_BITS = 0x0D55;
var GL_DEPTH_BITS = 0x0D56;
var GL_STENCIL_BITS = 0x0D57;

var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;

var GL_MAX_TEXTURE_SIZE = 0x0D33;
var GL_MAX_VIEWPORT_DIMS = 0x0D3A;
var GL_MAX_VERTEX_ATTRIBS = 0x8869;
var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
var GL_MAX_VARYING_VECTORS = 0x8DFC;
var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;

var GL_VENDOR = 0x1F00;
var GL_RENDERER = 0x1F01;
var GL_VERSION = 0x1F02;
var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;

var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;

var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
var GL_TEXTURE0 = 0x84C0;
var GL_RGBA = 0x1908;
var GL_FLOAT = 0x1406;
var GL_UNSIGNED_BYTE = 0x1401;
var GL_FRAMEBUFFER = 0x8D40;
var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
var GL_COLOR_ATTACHMENT0 = 0x8CE0;
var GL_COLOR_BUFFER_BIT = 0x4000;

module.exports = function (gl, extensions) {
  var maxAnisotropic = 1;
  if (extensions.ext_texture_filter_anisotropic) {
    maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
  }

  var maxDrawbuffers = 1;
  var maxColorAttachments = 1;
  if (extensions.webgl_draw_buffers) {
    maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
    maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
  }

  // detect if reading float textures is available (Safari doesn't support)
  var readFloat = !!extensions.oes_texture_float;
  if (readFloat) {
    var readFloatTexture = gl.createTexture();
    gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
    gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT, null);

    var fbo = gl.createFramebuffer();
    gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
    gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
    gl.bindTexture(GL_TEXTURE_2D, null);

    if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;else {
      gl.viewport(0, 0, 1, 1);
      gl.clearColor(1.0, 0.0, 0.0, 1.0);
      gl.clear(GL_COLOR_BUFFER_BIT);
      var pixels = pool.allocType(GL_FLOAT, 4);
      gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT, pixels);

      if (gl.getError()) readFloat = false;else {
        gl.deleteFramebuffer(fbo);
        gl.deleteTexture(readFloatTexture);

        readFloat = pixels[0] === 1.0;
      }

      pool.freeType(pixels);
    }
  }

  // detect non power of two cube textures support (IE doesn't support)
  var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));

  var npotTextureCube = true;

  if (!isIE) {
    var cubeTexture = gl.createTexture();
    var data = pool.allocType(GL_UNSIGNED_BYTE, 36);
    gl.activeTexture(GL_TEXTURE0);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
    gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
    pool.freeType(data);
    gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
    gl.deleteTexture(cubeTexture);
    npotTextureCube = !gl.getError();
  }

  return {
    // drawing buffer bit depth
    colorBits: [gl.getParameter(GL_RED_BITS), gl.getParameter(GL_GREEN_BITS), gl.getParameter(GL_BLUE_BITS), gl.getParameter(GL_ALPHA_BITS)],
    depthBits: gl.getParameter(GL_DEPTH_BITS),
    stencilBits: gl.getParameter(GL_STENCIL_BITS),
    subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),

    // supported extensions
    extensions: sortedObjectKeys(extensions).filter(function (ext) {
      return !!extensions[ext];
    }),

    // max aniso samples
    maxAnisotropic: maxAnisotropic,

    // max draw buffers
    maxDrawbuffers: maxDrawbuffers,
    maxColorAttachments: maxColorAttachments,

    // point and line size ranges
    pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
    lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
    maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
    maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
    maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
    maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
    maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
    maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
    maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
    maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
    maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
    maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
    maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),

    // vendor info
    glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
    renderer: gl.getParameter(GL_RENDERER),
    vendor: gl.getParameter(GL_VENDOR),
    version: gl.getParameter(GL_VERSION),

    // quirks
    readFloat: readFloat,
    npotTextureCube: npotTextureCube
  };
};

},{"./util/pool":32,"./util/sorted-object-keys":34}],14:[function(require,module,exports){
var check = require('./util/check');
var isTypedArray = require('./util/is-typed-array');

var GL_RGBA = 6408;
var GL_UNSIGNED_BYTE = 5121;
var GL_PACK_ALIGNMENT = 0x0D05;
var GL_FLOAT = 0x1406; // 5126

module.exports = function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {
  function readPixelsImpl(input) {
    var type;
    if (framebufferState.next === null) {
      check(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
      type = GL_UNSIGNED_BYTE;
    } else {
      check(framebufferState.next.colorAttachments[0].texture !== null, 'You cannot read from a renderbuffer');
      type = framebufferState.next.colorAttachments[0].texture._texture.type;

      check.optional(function () {
        if (extensions.oes_texture_float) {
          check(type === GL_UNSIGNED_BYTE || type === GL_FLOAT, 'Reading from a framebuffer is only allowed for the types \'uint8\' and \'float\'');

          if (type === GL_FLOAT) {
            check(limits.readFloat, 'Reading \'float\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');
          }
        } else {
          check(type === GL_UNSIGNED_BYTE, 'Reading from a framebuffer is only allowed for the type \'uint8\'');
        }
      });
    }

    var x = 0;
    var y = 0;
    var width = context.framebufferWidth;
    var height = context.framebufferHeight;
    var data = null;

    if (isTypedArray(input)) {
      data = input;
    } else if (input) {
      check.type(input, 'object', 'invalid arguments to regl.read()');
      x = input.x | 0;
      y = input.y | 0;
      check(x >= 0 && x < context.framebufferWidth, 'invalid x offset for regl.read');
      check(y >= 0 && y < context.framebufferHeight, 'invalid y offset for regl.read');
      width = (input.width || context.framebufferWidth - x) | 0;
      height = (input.height || context.framebufferHeight - y) | 0;
      data = input.data || null;
    }

    // sanity check input.data
    if (data) {
      if (type === GL_UNSIGNED_BYTE) {
        check(data instanceof Uint8Array, 'buffer must be \'Uint8Array\' when reading from a framebuffer of type \'uint8\'');
      } else if (type === GL_FLOAT) {
        check(data instanceof Float32Array, 'buffer must be \'Float32Array\' when reading from a framebuffer of type \'float\'');
      }
    }

    check(width > 0 && width + x <= context.framebufferWidth, 'invalid width for read pixels');
    check(height > 0 && height + y <= context.framebufferHeight, 'invalid height for read pixels');

    // Update WebGL state
    reglPoll();

    // Compute size
    var size = width * height * 4;

    // Allocate data
    if (!data) {
      if (type === GL_UNSIGNED_BYTE) {
        data = new Uint8Array(size);
      } else if (type === GL_FLOAT) {
        data = data || new Float32Array(size);
      }
    }

    // Type check
    check.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');
    check(data.byteLength >= size, 'data buffer for regl.read() too small');

    // Run read pixels
    gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
    gl.readPixels(x, y, width, height, GL_RGBA, type, data);

    return data;
  }

  function readPixelsFBO(options) {
    var result;
    framebufferState.setFBO({
      framebuffer: options.framebuffer
    }, function () {
      result = readPixelsImpl(options);
    });
    return result;
  }

  function readPixels(options) {
    if (!options || !('framebuffer' in options)) {
      return readPixelsImpl(options);
    } else {
      return readPixelsFBO(options);
    }
  }

  return readPixels;
};

},{"./util/check":21,"./util/is-typed-array":30}],15:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var values = require('./util/values');

var GL_RENDERBUFFER = 0x8D41;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;
var GL_DEPTH_COMPONENT16 = 0x81A5;
var GL_STENCIL_INDEX8 = 0x8D48;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB8_ALPHA8_EXT = 0x8C43;

var GL_RGBA32F_EXT = 0x8814;

var GL_RGBA16F_EXT = 0x881A;
var GL_RGB16F_EXT = 0x881B;

var FORMAT_SIZES = [];

FORMAT_SIZES[GL_RGBA4] = 2;
FORMAT_SIZES[GL_RGB5_A1] = 2;
FORMAT_SIZES[GL_RGB565] = 2;

FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
FORMAT_SIZES[GL_DEPTH_STENCIL] = 4;

FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
FORMAT_SIZES[GL_RGB16F_EXT] = 6;

function getRenderbufferSize(format, width, height) {
  return FORMAT_SIZES[format] * width * height;
}

module.exports = function (gl, extensions, limits, stats, config) {
  var formatTypes = {
    'rgba4': GL_RGBA4,
    'rgb565': GL_RGB565,
    'rgb5 a1': GL_RGB5_A1,
    'depth': GL_DEPTH_COMPONENT16,
    'stencil': GL_STENCIL_INDEX8,
    'depth stencil': GL_DEPTH_STENCIL
  };

  if (extensions.ext_srgb) {
    formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;
  }

  if (extensions.ext_color_buffer_half_float) {
    formatTypes['rgba16f'] = GL_RGBA16F_EXT;
    formatTypes['rgb16f'] = GL_RGB16F_EXT;
  }

  if (extensions.webgl_color_buffer_float) {
    formatTypes['rgba32f'] = GL_RGBA32F_EXT;
  }

  var formatTypesInvert = [];
  sortedObjectKeys(formatTypes).forEach(function (key) {
    var val = formatTypes[key];
    formatTypesInvert[val] = key;
  });

  var renderbufferCount = 0;
  var renderbufferSet = {};

  function REGLRenderbuffer(renderbuffer) {
    this.id = renderbufferCount++;
    this.refCount = 1;

    this.renderbuffer = renderbuffer;

    this.format = GL_RGBA4;
    this.width = 0;
    this.height = 0;

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  REGLRenderbuffer.prototype.decRef = function () {
    if (--this.refCount <= 0) {
      destroy(this);
    }
  };

  function destroy(rb) {
    var handle = rb.renderbuffer;
    check(handle, 'must not double destroy renderbuffer');
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
    gl.deleteRenderbuffer(handle);
    rb.renderbuffer = null;
    rb.refCount = 0;
    delete renderbufferSet[rb.id];
    stats.renderbufferCount--;
  }

  function createRenderbuffer(a, b) {
    var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
    renderbufferSet[renderbuffer.id] = renderbuffer;
    stats.renderbufferCount++;

    function reglRenderbuffer(a, b) {
      var w = 0;
      var h = 0;
      var format = GL_RGBA4;

      if (typeof a === 'object' && a) {
        var options = a;
        if ('shape' in options) {
          var shape = options.shape;
          check(Array.isArray(shape) && shape.length >= 2, 'invalid renderbuffer shape');
          w = shape[0] | 0;
          h = shape[1] | 0;
        } else {
          if ('radius' in options) {
            w = h = options.radius | 0;
          }
          if ('width' in options) {
            w = options.width | 0;
          }
          if ('height' in options) {
            h = options.height | 0;
          }
        }
        if ('format' in options) {
          check.parameter(options.format, formatTypes, 'invalid renderbuffer format');
          format = formatTypes[options.format];
        }
      } else if (typeof a === 'number') {
        w = a | 0;
        if (typeof b === 'number') {
          h = b | 0;
        } else {
          h = w;
        }
      } else if (!a) {
        w = h = 1;
      } else {
        check.raise('invalid arguments to renderbuffer constructor');
      }

      // check shape
      check(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');

      if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) {
        return;
      }

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;
      renderbuffer.format = format;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);

      check(gl.getError() === 0, 'invalid render buffer format');

      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }
      reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];

      return reglRenderbuffer;
    }

    function resize(w_, h_) {
      var w = w_ | 0;
      var h = h_ | 0 || w;

      if (w === renderbuffer.width && h === renderbuffer.height) {
        return reglRenderbuffer;
      }

      // check shape
      check(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');

      reglRenderbuffer.width = renderbuffer.width = w;
      reglRenderbuffer.height = renderbuffer.height = h;

      gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);

      check(gl.getError() === 0, 'invalid render buffer format');

      // also, recompute size.
      if (config.profile) {
        renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
      }

      return reglRenderbuffer;
    }

    reglRenderbuffer(a, b);

    reglRenderbuffer.resize = resize;
    reglRenderbuffer._reglType = 'renderbuffer';
    reglRenderbuffer._renderbuffer = renderbuffer;
    if (config.profile) {
      reglRenderbuffer.stats = renderbuffer.stats;
    }
    reglRenderbuffer.destroy = function () {
      renderbuffer.decRef();
    };

    return reglRenderbuffer;
  }

  if (config.profile) {
    stats.getTotalRenderbufferSize = function () {
      var total = 0;
      sortedObjectKeys(renderbufferSet).forEach(function (key) {
        total += renderbufferSet[key].stats.size;
      });
      return total;
    };
  }

  function restoreRenderbuffers() {
    values(renderbufferSet).forEach(function (rb) {
      rb.renderbuffer = gl.createRenderbuffer();
      gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
      gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
    });
    gl.bindRenderbuffer(GL_RENDERBUFFER, null);
  }

  return {
    create: createRenderbuffer,
    clear: function () {
      values(renderbufferSet).forEach(destroy);
    },
    restore: restoreRenderbuffers
  };
};

},{"./util/check":21,"./util/sorted-object-keys":34,"./util/values":36}],16:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var extend = require('./util/extend');
var values = require('./util/values');

var GL_FRAGMENT_SHADER = 35632;
var GL_VERTEX_SHADER = 35633;

var GL_ACTIVE_UNIFORMS = 0x8B86;
var GL_ACTIVE_ATTRIBUTES = 0x8B89;

module.exports = function wrapShaderState(gl, stringStore, stats, config) {
  // ===================================================
  // glsl compilation and linking
  // ===================================================
  var fragShaders = {};
  var vertShaders = {};

  function ActiveInfo(name, id, location, info) {
    this.name = name;
    this.id = id;
    this.location = location;
    this.info = info;
  }

  function insertActiveInfo(list, info) {
    for (var i = 0; i < list.length; ++i) {
      if (list[i].id === info.id) {
        list[i].location = info.location;
        return;
      }
    }
    list.push(info);
  }

  function getShader(type, id, command) {
    var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
    var shader = cache[id];

    if (!shader) {
      var source = stringStore.str(id);
      shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      check.shaderError(gl, shader, source, type, command);
      cache[id] = shader;
    }

    return shader;
  }

  // ===================================================
  // program linking
  // ===================================================
  var programCache = {};
  var programList = [];

  var PROGRAM_COUNTER = 0;

  function REGLProgram(fragId, vertId) {
    this.id = PROGRAM_COUNTER++;
    this.fragId = fragId;
    this.vertId = vertId;
    this.program = null;
    this.uniforms = [];
    this.attributes = [];
    this.refCount = 1;

    if (config.profile) {
      this.stats = {
        uniformsCount: 0,
        attributesCount: 0
      };
    }
  }

  function linkProgram(desc, command, attributeLocations) {
    var i, info;

    // -------------------------------
    // compile & link
    // -------------------------------
    var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
    var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);

    var program = desc.program = gl.createProgram();
    gl.attachShader(program, fragShader);
    gl.attachShader(program, vertShader);
    if (attributeLocations) {
      for (i = 0; i < attributeLocations.length; ++i) {
        var binding = attributeLocations[i];
        gl.bindAttribLocation(program, binding[0], binding[1]);
      }
    }

    gl.linkProgram(program);
    check.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command);

    // -------------------------------
    // grab uniforms
    // -------------------------------
    var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
    if (config.profile) {
      desc.stats.uniformsCount = numUniforms;
    }
    var uniforms = desc.uniforms;
    for (i = 0; i < numUniforms; ++i) {
      info = gl.getActiveUniform(program, i);
      if (info) {
        if (info.size > 1) {
          for (var j = 0; j < info.size; ++j) {
            var name = info.name.replace('[0]', '[' + j + ']');
            insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));
          }
        } else {
          insertActiveInfo(uniforms, new ActiveInfo(info.name, stringStore.id(info.name), gl.getUniformLocation(program, info.name), info));
        }
      }
    }

    // -------------------------------
    // grab attributes
    // -------------------------------
    var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
    if (config.profile) {
      desc.stats.attributesCount = numAttributes;
    }

    var attributes = desc.attributes;
    for (i = 0; i < numAttributes; ++i) {
      info = gl.getActiveAttrib(program, i);
      if (info) {
        insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));
      }
    }
  }

  if (config.profile) {
    stats.getMaxUniformsCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.uniformsCount > m) {
          m = desc.stats.uniformsCount;
        }
      });
      return m;
    };

    stats.getMaxAttributesCount = function () {
      var m = 0;
      programList.forEach(function (desc) {
        if (desc.stats.attributesCount > m) {
          m = desc.stats.attributesCount;
        }
      });
      return m;
    };
  }

  function restoreShaders() {
    fragShaders = {};
    vertShaders = {};
    for (var i = 0; i < programList.length; ++i) {
      linkProgram(programList[i], null, programList[i].attributes.map(function (info) {
        return [info.location, info.name];
      }));
    }
  }

  return {
    clear: function () {
      var deleteShader = gl.deleteShader.bind(gl);
      values(fragShaders).forEach(deleteShader);
      fragShaders = {};
      values(vertShaders).forEach(deleteShader);
      vertShaders = {};

      programList.forEach(function (desc) {
        gl.deleteProgram(desc.program);
      });
      programList.length = 0;
      programCache = {};

      stats.shaderCount = 0;
    },

    program: function (vertId, fragId, command, attribLocations) {
      check.command(vertId >= 0, 'missing vertex shader', command);
      check.command(fragId >= 0, 'missing fragment shader', command);

      var cache = programCache[fragId];
      if (!cache) {
        cache = programCache[fragId] = {};
      }
      var prevProgram = cache[vertId];
      if (prevProgram) {
        prevProgram.refCount++;
        if (!attribLocations) {
          return prevProgram;
        }
      }
      var program = new REGLProgram(fragId, vertId);
      stats.shaderCount++;
      linkProgram(program, command, attribLocations);
      if (!prevProgram) {
        cache[vertId] = program;
      }
      programList.push(program);
      return extend(program, {
        destroy: function () {
          program.refCount--;
          if (program.refCount <= 0) {
            gl.deleteProgram(program.program);
            var idx = programList.indexOf(program);
            programList.splice(idx, 1);
            stats.shaderCount--;
          }
          // no program is linked to this vert anymore
          if (cache[program.vertId].refCount <= 0) {
            gl.deleteShader(vertShaders[program.vertId]);
            delete vertShaders[program.vertId];
            delete programCache[program.fragId][program.vertId];
          }
          // no program is linked to this frag anymore
          if (!sortedObjectKeys(programCache[program.fragId]).length) {
            gl.deleteShader(fragShaders[program.fragId]);
            delete fragShaders[program.fragId];
            delete programCache[program.fragId];
          }
        }
      });
    },

    restore: restoreShaders,

    shader: getShader,

    frag: -1,
    vert: -1
  };
};

},{"./util/check":21,"./util/extend":25,"./util/sorted-object-keys":34,"./util/values":36}],17:[function(require,module,exports){

module.exports = function stats() {
  return {
    vaoCount: 0,
    bufferCount: 0,
    elementsCount: 0,
    framebufferCount: 0,
    shaderCount: 0,
    textureCount: 0,
    cubeCount: 0,
    renderbufferCount: 0,
    maxTextureUnits: 0
  };
};

},{}],18:[function(require,module,exports){
module.exports = function createStringStore() {
  var stringIds = { '': 0 };
  var stringValues = [''];
  return {
    id: function (str) {
      var result = stringIds[str];
      if (result) {
        return result;
      }
      result = stringIds[str] = stringValues.length;
      stringValues.push(str);
      return result;
    },

    str: function (id) {
      return stringValues[id];
    }
  };
};

},{}],19:[function(require,module,exports){
var sortedObjectKeys = require('./util/sorted-object-keys');
var check = require('./util/check');
var extend = require('./util/extend');
var values = require('./util/values');
var isTypedArray = require('./util/is-typed-array');
var isNDArrayLike = require('./util/is-ndarray');
var pool = require('./util/pool');
var convertToHalfFloat = require('./util/to-half-float');
var isArrayLike = require('./util/is-array-like');
var flattenUtils = require('./util/flatten');
var isPow2 = require('./util/is-pow2');

var dtypes = require('./constants/arraytypes.json');
var arrayTypes = require('./constants/arraytypes.json');

var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;

var GL_TEXTURE_2D = 0x0DE1;
var GL_TEXTURE_CUBE_MAP = 0x8513;
var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;

var GL_RGBA = 0x1908;
var GL_ALPHA = 0x1906;
var GL_RGB = 0x1907;
var GL_LUMINANCE = 0x1909;
var GL_LUMINANCE_ALPHA = 0x190A;

var GL_RGBA4 = 0x8056;
var GL_RGB5_A1 = 0x8057;
var GL_RGB565 = 0x8D62;

var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;

var GL_DEPTH_COMPONENT = 0x1902;
var GL_DEPTH_STENCIL = 0x84F9;

var GL_SRGB_EXT = 0x8C40;
var GL_SRGB_ALPHA_EXT = 0x8C42;

var GL_HALF_FLOAT_OES = 0x8D61;

var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;

var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;

var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;

var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;

var GL_UNSIGNED_BYTE = 0x1401;
var GL_UNSIGNED_SHORT = 0x1403;
var GL_UNSIGNED_INT = 0x1405;
var GL_FLOAT = 0x1406;

var GL_TEXTURE_WRAP_S = 0x2802;
var GL_TEXTURE_WRAP_T = 0x2803;

var GL_REPEAT = 0x2901;
var GL_CLAMP_TO_EDGE = 0x812F;
var GL_MIRRORED_REPEAT = 0x8370;

var GL_TEXTURE_MAG_FILTER = 0x2800;
var GL_TEXTURE_MIN_FILTER = 0x2801;

var GL_NEAREST = 0x2600;
var GL_LINEAR = 0x2601;
var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR = 0x2703;

var GL_GENERATE_MIPMAP_HINT = 0x8192;
var GL_DONT_CARE = 0x1100;
var GL_FASTEST = 0x1101;
var GL_NICEST = 0x1102;

var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;

var GL_UNPACK_ALIGNMENT = 0x0CF5;
var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;

var GL_BROWSER_DEFAULT_WEBGL = 0x9244;

var GL_TEXTURE0 = 0x84C0;

var MIPMAP_FILTERS = [GL_NEAREST_MIPMAP_NEAREST, GL_NEAREST_MIPMAP_LINEAR, GL_LINEAR_MIPMAP_NEAREST, GL_LINEAR_MIPMAP_LINEAR];

var CHANNELS_FORMAT = [0, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA];

var FORMAT_CHANNELS = {};
FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
FORMAT_CHANNELS[GL_RGBA] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;

var formatTypes = {};
formatTypes[GL_RGBA4] = GL_UNSIGNED_SHORT_4_4_4_4;
formatTypes[GL_RGB565] = GL_UNSIGNED_SHORT_5_6_5;
formatTypes[GL_RGB5_A1] = GL_UNSIGNED_SHORT_5_5_5_1;
formatTypes[GL_DEPTH_COMPONENT] = GL_UNSIGNED_INT;
formatTypes[GL_DEPTH_STENCIL] = GL_UNSIGNED_INT_24_8_WEBGL;

function objectName(str) {
  return '[object ' + str + ']';
}

var CANVAS_CLASS = objectName('HTMLCanvasElement');
var OFFSCREENCANVAS_CLASS = objectName('OffscreenCanvas');
var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');
var BITMAP_CLASS = objectName('ImageBitmap');
var IMAGE_CLASS = objectName('HTMLImageElement');
var VIDEO_CLASS = objectName('HTMLVideoElement');

var PIXEL_CLASSES = sortedObjectKeys(dtypes).concat([CANVAS_CLASS, OFFSCREENCANVAS_CLASS, CONTEXT2D_CLASS, BITMAP_CLASS, IMAGE_CLASS, VIDEO_CLASS]);

// for every texture type, store
// the size in bytes.
var TYPE_SIZES = [];
TYPE_SIZES[GL_UNSIGNED_BYTE] = 1;
TYPE_SIZES[GL_FLOAT] = 4;
TYPE_SIZES[GL_HALF_FLOAT_OES] = 2;

TYPE_SIZES[GL_UNSIGNED_SHORT] = 2;
TYPE_SIZES[GL_UNSIGNED_INT] = 4;

var FORMAT_SIZES_SPECIAL = [];
FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;

FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;

function isNumericArray(arr) {
  return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === 'number');
}

function isRectArray(arr) {
  if (!Array.isArray(arr)) {
    return false;
  }
  var width = arr.length;
  if (width === 0 || !isArrayLike(arr[0])) {
    return false;
  }
  return true;
}

function classString(x) {
  return Object.prototype.toString.call(x);
}

function isCanvasElement(object) {
  return classString(object) === CANVAS_CLASS;
}

function isOffscreenCanvas(object) {
  return classString(object) === OFFSCREENCANVAS_CLASS;
}

function isContext2D(object) {
  return classString(object) === CONTEXT2D_CLASS;
}

function isBitmap(object) {
  return classString(object) === BITMAP_CLASS;
}

function isImageElement(object) {
  return classString(object) === IMAGE_CLASS;
}

function isVideoElement(object) {
  return classString(object) === VIDEO_CLASS;
}

function isPixelData(object) {
  if (!object) {
    return false;
  }
  var className = classString(object);
  if (PIXEL_CLASSES.indexOf(className) >= 0) {
    return true;
  }
  return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);
}

function typedArrayCode(data) {
  return arrayTypes[Object.prototype.toString.call(data)] | 0;
}

function convertData(result, data) {
  var n = data.length;
  switch (result.type) {
    case GL_UNSIGNED_BYTE:
    case GL_UNSIGNED_SHORT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
      var converted = pool.allocType(result.type, n);
      converted.set(data);
      result.data = converted;
      break;

    case GL_HALF_FLOAT_OES:
      result.data = convertToHalfFloat(data);
      break;

    default:
      check.raise('unsupported texture type, must specify a typed array');
  }
}

function preConvert(image, n) {
  return pool.allocType(image.type === GL_HALF_FLOAT_OES ? GL_FLOAT : image.type, n);
}

function postConvert(image, data) {
  if (image.type === GL_HALF_FLOAT_OES) {
    image.data = convertToHalfFloat(data);
    pool.freeType(data);
  } else {
    image.data = data;
  }
}

function transposeData(image, array, strideX, strideY, strideC, offset) {
  var w = image.width;
  var h = image.height;
  var c = image.channels;
  var n = w * h * c;
  var data = preConvert(image, n);

  var p = 0;
  for (var i = 0; i < h; ++i) {
    for (var j = 0; j < w; ++j) {
      for (var k = 0; k < c; ++k) {
        data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
      }
    }
  }

  postConvert(image, data);
}

function getTextureSize(format, type, width, height, isMipmap, isCube) {
  var s;
  if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {
    // we have a special array for dealing with weird color formats such as RGB5A1
    s = FORMAT_SIZES_SPECIAL[format];
  } else {
    s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
  }

  if (isCube) {
    s *= 6;
  }

  if (isMipmap) {
    // compute the total size of all the mipmaps.
    var total = 0;

    var w = width;
    while (w >= 1) {
      // we can only use mipmaps on a square image,
      // so we can simply use the width and ignore the height:
      total += s * w * w;
      w /= 2;
    }
    return total;
  } else {
    return s * width * height;
  }
}

module.exports = function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats, config) {
  // -------------------------------------------------------
  // Initialize constants and parameter tables here
  // -------------------------------------------------------
  var mipmapHint = {
    "don't care": GL_DONT_CARE,
    'dont care': GL_DONT_CARE,
    'nice': GL_NICEST,
    'fast': GL_FASTEST
  };

  var wrapModes = {
    'repeat': GL_REPEAT,
    'clamp': GL_CLAMP_TO_EDGE,
    'mirror': GL_MIRRORED_REPEAT
  };

  var magFilters = {
    'nearest': GL_NEAREST,
    'linear': GL_LINEAR
  };

  var minFilters = extend({
    'mipmap': GL_LINEAR_MIPMAP_LINEAR,
    'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST,
    'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST,
    'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR,
    'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR
  }, magFilters);

  var colorSpace = {
    'none': 0,
    'browser': GL_BROWSER_DEFAULT_WEBGL
  };

  var textureTypes = {
    'uint8': GL_UNSIGNED_BYTE,
    'rgba4': GL_UNSIGNED_SHORT_4_4_4_4,
    'rgb565': GL_UNSIGNED_SHORT_5_6_5,
    'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1
  };

  var textureFormats = {
    'alpha': GL_ALPHA,
    'luminance': GL_LUMINANCE,
    'luminance alpha': GL_LUMINANCE_ALPHA,
    'rgb': GL_RGB,
    'rgba': GL_RGBA,
    'rgba4': GL_RGBA4,
    'rgb5 a1': GL_RGB5_A1,
    'rgb565': GL_RGB565
  };

  var compressedTextureFormats = {};

  if (extensions.ext_srgb) {
    textureFormats.srgb = GL_SRGB_EXT;
    textureFormats.srgba = GL_SRGB_ALPHA_EXT;
  }

  if (extensions.oes_texture_float) {
    textureTypes.float32 = textureTypes.float = GL_FLOAT;
  }

  if (extensions.oes_texture_half_float) {
    textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES;
  }

  if (extensions.webgl_depth_texture) {
    extend(textureFormats, {
      'depth': GL_DEPTH_COMPONENT,
      'depth stencil': GL_DEPTH_STENCIL
    });

    extend(textureTypes, {
      'uint16': GL_UNSIGNED_SHORT,
      'uint32': GL_UNSIGNED_INT,
      'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL
    });
  }

  if (extensions.webgl_compressed_texture_s3tc) {
    extend(compressedTextureFormats, {
      'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
      'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
      'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
      'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
    });
  }

  if (extensions.webgl_compressed_texture_atc) {
    extend(compressedTextureFormats, {
      'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,
      'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
      'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
    });
  }

  if (extensions.webgl_compressed_texture_pvrtc) {
    extend(compressedTextureFormats, {
      'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
      'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
      'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
      'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
    });
  }

  if (extensions.webgl_compressed_texture_etc1) {
    compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;
  }

  // Copy over all texture formats
  var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
  sortedObjectKeys(compressedTextureFormats).forEach(function (name) {
    var format = compressedTextureFormats[name];
    if (supportedCompressedFormats.indexOf(format) >= 0) {
      textureFormats[name] = format;
    }
  });

  var supportedFormats = sortedObjectKeys(textureFormats);
  limits.textureFormats = supportedFormats;

  // associate with every format string its
  // corresponding GL-value.
  var textureFormatsInvert = [];
  sortedObjectKeys(textureFormats).forEach(function (key) {
    var val = textureFormats[key];
    textureFormatsInvert[val] = key;
  });

  // associate with every type string its
  // corresponding GL-value.
  var textureTypesInvert = [];
  sortedObjectKeys(textureTypes).forEach(function (key) {
    var val = textureTypes[key];
    textureTypesInvert[val] = key;
  });

  var magFiltersInvert = [];
  sortedObjectKeys(magFilters).forEach(function (key) {
    var val = magFilters[key];
    magFiltersInvert[val] = key;
  });

  var minFiltersInvert = [];
  sortedObjectKeys(minFilters).forEach(function (key) {
    var val = minFilters[key];
    minFiltersInvert[val] = key;
  });

  var wrapModesInvert = [];
  sortedObjectKeys(wrapModes).forEach(function (key) {
    var val = wrapModes[key];
    wrapModesInvert[val] = key;
  });

  // colorFormats[] gives the format (channels) associated to an
  // internalformat
  var colorFormats = supportedFormats.reduce(function (color, key) {
    var glenum = textureFormats[key];
    if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL || extensions.ext_srgb && (glenum === GL_SRGB_EXT || glenum === GL_SRGB_ALPHA_EXT)) {
      color[glenum] = glenum;
    } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {
      color[glenum] = GL_RGBA;
    } else {
      color[glenum] = GL_RGB;
    }
    return color;
  }, {});

  function TexFlags() {
    // format info
    this.internalformat = GL_RGBA;
    this.format = GL_RGBA;
    this.type = GL_UNSIGNED_BYTE;
    this.compressed = false;

    // pixel storage
    this.premultiplyAlpha = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;

    // shape info
    this.width = 0;
    this.height = 0;
    this.channels = 0;
  }

  function copyFlags(result, other) {
    result.internalformat = other.internalformat;
    result.format = other.format;
    result.type = other.type;
    result.compressed = other.compressed;

    result.premultiplyAlpha = other.premultiplyAlpha;
    result.flipY = other.flipY;
    result.unpackAlignment = other.unpackAlignment;
    result.colorSpace = other.colorSpace;

    result.width = other.width;
    result.height = other.height;
    result.channels = other.channels;
  }

  function parseFlags(flags, options) {
    if (typeof options !== 'object' || !options) {
      return;
    }

    if ('premultiplyAlpha' in options) {
      check.type(options.premultiplyAlpha, 'boolean', 'invalid premultiplyAlpha');
      flags.premultiplyAlpha = options.premultiplyAlpha;
    }

    if ('flipY' in options) {
      check.type(options.flipY, 'boolean', 'invalid texture flip');
      flags.flipY = options.flipY;
    }

    if ('alignment' in options) {
      check.oneOf(options.alignment, [1, 2, 4, 8], 'invalid texture unpack alignment');
      flags.unpackAlignment = options.alignment;
    }

    if ('colorSpace' in options) {
      check.parameter(options.colorSpace, colorSpace, 'invalid colorSpace');
      flags.colorSpace = colorSpace[options.colorSpace];
    }

    if ('type' in options) {
      var type = options.type;
      check(extensions.oes_texture_float || !(type === 'float' || type === 'float32'), 'you must enable the OES_texture_float extension in order to use floating point textures.');
      check(extensions.oes_texture_half_float || !(type === 'half float' || type === 'float16'), 'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');
      check(extensions.webgl_depth_texture || !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check.parameter(type, textureTypes, 'invalid texture type');
      flags.type = textureTypes[type];
    }

    var w = flags.width;
    var h = flags.height;
    var c = flags.channels;
    var hasChannels = false;
    if ('shape' in options) {
      check(Array.isArray(options.shape) && options.shape.length >= 2, 'shape must be an array');
      w = options.shape[0];
      h = options.shape[1];
      if (options.shape.length === 3) {
        c = options.shape[2];
        check(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
      check(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      check(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
    } else {
      if ('radius' in options) {
        w = h = options.radius;
        check(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');
      }
      if ('width' in options) {
        w = options.width;
        check(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
      }
      if ('height' in options) {
        h = options.height;
        check(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
      }
      if ('channels' in options) {
        c = options.channels;
        check(c > 0 && c <= 4, 'invalid number of channels');
        hasChannels = true;
      }
    }
    flags.width = w | 0;
    flags.height = h | 0;
    flags.channels = c | 0;

    var hasFormat = false;
    if ('format' in options) {
      var formatStr = options.format;
      check(extensions.webgl_depth_texture || !(formatStr === 'depth' || formatStr === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
      check.parameter(formatStr, textureFormats, 'invalid texture format');
      var internalformat = flags.internalformat = textureFormats[formatStr];
      flags.format = colorFormats[internalformat];
      if (formatStr in textureTypes) {
        if (!('type' in options)) {
          flags.type = textureTypes[formatStr];
        }
      }
      if (formatStr in compressedTextureFormats) {
        flags.compressed = true;
      }
      hasFormat = true;
    }

    // Reconcile channels and format
    if (!hasChannels && hasFormat) {
      flags.channels = FORMAT_CHANNELS[flags.format];
    } else if (hasChannels && !hasFormat) {
      if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
        flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
      }
    } else if (hasFormat && hasChannels) {
      check(flags.channels === FORMAT_CHANNELS[flags.format], 'number of channels inconsistent with specified format');
    }
  }

  function setFlags(flags) {
    gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
    gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
    gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
    gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
  }

  // -------------------------------------------------------
  // Tex image data
  // -------------------------------------------------------
  function TexImage() {
    TexFlags.call(this);

    this.xOffset = 0;
    this.yOffset = 0;

    // data
    this.data = null;
    this.needsFree = false;

    // html element
    this.element = null;

    // copyTexImage info
    this.needsCopy = false;
  }

  function parseImage(image, options) {
    var data = null;
    if (isPixelData(options)) {
      data = options;
    } else if (options) {
      check.type(options, 'object', 'invalid pixel data type');
      parseFlags(image, options);
      if ('x' in options) {
        image.xOffset = options.x | 0;
      }
      if ('y' in options) {
        image.yOffset = options.y | 0;
      }
      if (isPixelData(options.data)) {
        data = options.data;
      }
    }

    check(!image.compressed || data instanceof Uint8Array, 'compressed texture data must be stored in a uint8array');

    if (options.copy) {
      check(!data, 'can not specify copy and data field for the same texture');
      var viewW = contextState.viewportWidth;
      var viewH = contextState.viewportHeight;
      image.width = image.width || viewW - image.xOffset;
      image.height = image.height || viewH - image.yOffset;
      image.needsCopy = true;
      check(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, 'copy texture read out of bounds');
    } else if (!data) {
      image.width = image.width || 1;
      image.height = image.height || 1;
      image.channels = image.channels || 4;
    } else if (isTypedArray(data)) {
      image.channels = image.channels || 4;
      image.data = data;
      if (!('type' in options) && image.type === GL_UNSIGNED_BYTE) {
        image.type = typedArrayCode(data);
      }
    } else if (isNumericArray(data)) {
      image.channels = image.channels || 4;
      convertData(image, data);
      image.alignment = 1;
      image.needsFree = true;
    } else if (isNDArrayLike(data)) {
      var array = data.data;
      if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE) {
        image.type = typedArrayCode(array);
      }
      var shape = data.shape;
      var stride = data.stride;
      var shapeX, shapeY, shapeC, strideX, strideY, strideC;
      if (shape.length === 3) {
        shapeC = shape[2];
        strideC = stride[2];
      } else {
        check(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');
        shapeC = 1;
        strideC = 1;
      }
      shapeX = shape[0];
      shapeY = shape[1];
      strideX = stride[0];
      strideY = stride[1];
      image.alignment = 1;
      image.width = shapeX;
      image.height = shapeY;
      image.channels = shapeC;
      image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
      image.needsFree = true;
      transposeData(image, array, strideX, strideY, strideC, data.offset);
    } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {
      if (isCanvasElement(data) || isOffscreenCanvas(data)) {
        image.element = data;
      } else {
        image.element = data.canvas;
      }
      image.width = image.element.width;
      image.height = image.element.height;
      image.channels = 4;
    } else if (isBitmap(data)) {
      image.element = data;
      image.width = data.width;
      image.height = data.height;
      image.channels = 4;
    } else if (isImageElement(data)) {
      image.element = data;
      image.width = data.naturalWidth;
      image.height = data.naturalHeight;
      image.channels = 4;
    } else if (isVideoElement(data)) {
      image.element = data;
      image.width = data.videoWidth;
      image.height = data.videoHeight;
      image.channels = 4;
    } else if (isRectArray(data)) {
      var w = image.width || data[0].length;
      var h = image.height || data.length;
      var c = image.channels;
      if (isArrayLike(data[0][0])) {
        c = c || data[0][0].length;
      } else {
        c = c || 1;
      }
      var arrayShape = flattenUtils.shape(data);
      var n = 1;
      for (var dd = 0; dd < arrayShape.length; ++dd) {
        n *= arrayShape[dd];
      }
      var allocData = preConvert(image, n);
      flattenUtils.flatten(data, arrayShape, '', allocData);
      postConvert(image, allocData);
      image.alignment = 1;
      image.width = w;
      image.height = h;
      image.channels = c;
      image.format = image.internalformat = CHANNELS_FORMAT[c];
      image.needsFree = true;
    }

    if (image.type === GL_FLOAT) {
      check(limits.extensions.indexOf('oes_texture_float') >= 0, 'oes_texture_float extension not enabled');
    } else if (image.type === GL_HALF_FLOAT_OES) {
      check(limits.extensions.indexOf('oes_texture_half_float') >= 0, 'oes_texture_half_float extension not enabled');
    }

    // do compressed texture  validation here.
  }

  function setImage(info, target, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texImage2D(target, miplevel, format, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexImage2D(target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);
    } else {
      gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null);
    }
  }

  function setSubImage(info, target, x, y, miplevel) {
    var element = info.element;
    var data = info.data;
    var internalformat = info.internalformat;
    var format = info.format;
    var type = info.type;
    var width = info.width;
    var height = info.height;

    setFlags(info);

    if (element) {
      gl.texSubImage2D(target, miplevel, x, y, format, type, element);
    } else if (info.compressed) {
      gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data);
    } else if (info.needsCopy) {
      reglPoll();
      gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
    } else {
      gl.texSubImage2D(target, miplevel, x, y, width, height, format, type, data);
    }
  }

  // texImage pool
  var imagePool = [];

  function allocImage() {
    return imagePool.pop() || new TexImage();
  }

  function freeImage(image) {
    if (image.needsFree) {
      pool.freeType(image.data);
    }
    TexImage.call(image);
    imagePool.push(image);
  }

  // -------------------------------------------------------
  // Mip map
  // -------------------------------------------------------
  function MipMap() {
    TexFlags.call(this);

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
    this.mipmask = 0;
    this.images = Array(16);
  }

  function parseMipMapFromShape(mipmap, width, height) {
    var img = mipmap.images[0] = allocImage();
    mipmap.mipmask = 1;
    img.width = mipmap.width = width;
    img.height = mipmap.height = height;
    img.channels = mipmap.channels = 4;
  }

  function parseMipMapFromObject(mipmap, options) {
    var imgData = null;
    if (isPixelData(options)) {
      imgData = mipmap.images[0] = allocImage();
      copyFlags(imgData, mipmap);
      parseImage(imgData, options);
      mipmap.mipmask = 1;
    } else {
      parseFlags(mipmap, options);
      if (Array.isArray(options.mipmap)) {
        var mipData = options.mipmap;
        for (var i = 0; i < mipData.length; ++i) {
          imgData = mipmap.images[i] = allocImage();
          copyFlags(imgData, mipmap);
          imgData.width >>= i;
          imgData.height >>= i;
          parseImage(imgData, mipData[i]);
          mipmap.mipmask |= 1 << i;
        }
      } else {
        imgData = mipmap.images[0] = allocImage();
        copyFlags(imgData, mipmap);
        parseImage(imgData, options);
        mipmap.mipmask = 1;
      }
    }
    copyFlags(mipmap, mipmap.images[0]);

    // For textures of the compressed format WEBGL_compressed_texture_s3tc
    // we must have that
    //
    // "When level equals zero width and height must be a multiple of 4.
    // When level is greater than 0 width and height must be 0, 1, 2 or a multiple of 4. "
    //
    // but we do not yet support having multiple mipmap levels for compressed textures,
    // so we only test for level zero.

    if (mipmap.compressed && (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
      check(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, 'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');
    }
  }

  function setMipMap(mipmap, target) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (!images[i]) {
        return;
      }
      setImage(images[i], target, i);
    }
  }

  var mipPool = [];

  function allocMipMap() {
    var result = mipPool.pop() || new MipMap();
    TexFlags.call(result);
    result.mipmask = 0;
    for (var i = 0; i < 16; ++i) {
      result.images[i] = null;
    }
    return result;
  }

  function freeMipMap(mipmap) {
    var images = mipmap.images;
    for (var i = 0; i < images.length; ++i) {
      if (images[i]) {
        freeImage(images[i]);
      }
      images[i] = null;
    }
    mipPool.push(mipmap);
  }

  // -------------------------------------------------------
  // Tex info
  // -------------------------------------------------------
  function TexInfo() {
    this.minFilter = GL_NEAREST;
    this.magFilter = GL_NEAREST;

    this.wrapS = GL_CLAMP_TO_EDGE;
    this.wrapT = GL_CLAMP_TO_EDGE;

    this.anisotropic = 1;

    this.genMipmaps = false;
    this.mipmapHint = GL_DONT_CARE;
  }

  function parseTexInfo(info, options) {
    if ('min' in options) {
      var minFilter = options.min;
      check.parameter(minFilter, minFilters);
      info.minFilter = minFilters[minFilter];
      if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {
        info.genMipmaps = true;
      }
    }

    if ('mag' in options) {
      var magFilter = options.mag;
      check.parameter(magFilter, magFilters);
      info.magFilter = magFilters[magFilter];
    }

    var wrapS = info.wrapS;
    var wrapT = info.wrapT;
    if ('wrap' in options) {
      var wrap = options.wrap;
      if (typeof wrap === 'string') {
        check.parameter(wrap, wrapModes);
        wrapS = wrapT = wrapModes[wrap];
      } else if (Array.isArray(wrap)) {
        check.parameter(wrap[0], wrapModes);
        check.parameter(wrap[1], wrapModes);
        wrapS = wrapModes[wrap[0]];
        wrapT = wrapModes[wrap[1]];
      }
    } else {
      if ('wrapS' in options) {
        var optWrapS = options.wrapS;
        check.parameter(optWrapS, wrapModes);
        wrapS = wrapModes[optWrapS];
      }
      if ('wrapT' in options) {
        var optWrapT = options.wrapT;
        check.parameter(optWrapT, wrapModes);
        wrapT = wrapModes[optWrapT];
      }
    }
    info.wrapS = wrapS;
    info.wrapT = wrapT;

    if ('anisotropic' in options) {
      var anisotropic = options.anisotropic;
      check(typeof anisotropic === 'number' && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, 'aniso samples must be between 1 and ');
      info.anisotropic = options.anisotropic;
    }

    if ('mipmap' in options) {
      var hasMipMap = false;
      switch (typeof options.mipmap) {
        case 'string':
          check.parameter(options.mipmap, mipmapHint, 'invalid mipmap hint');
          info.mipmapHint = mipmapHint[options.mipmap];
          info.genMipmaps = true;
          hasMipMap = true;
          break;

        case 'boolean':
          hasMipMap = info.genMipmaps = options.mipmap;
          break;

        case 'object':
          check(Array.isArray(options.mipmap), 'invalid mipmap type');
          info.genMipmaps = false;
          hasMipMap = true;
          break;

        default:
          check.raise('invalid mipmap type');
      }
      if (hasMipMap && !('min' in options)) {
        info.minFilter = GL_NEAREST_MIPMAP_NEAREST;
      }
    }
  }

  function setTexInfo(info, target) {
    gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
    gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
    gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
    gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
    if (extensions.ext_texture_filter_anisotropic) {
      gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
    }
    if (info.genMipmaps) {
      gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
      gl.generateMipmap(target);
    }
  }

  // -------------------------------------------------------
  // Full texture object
  // -------------------------------------------------------
  var textureCount = 0;
  var textureSet = {};
  var numTexUnits = limits.maxTextureUnits;
  var textureUnits = Array(numTexUnits).map(function () {
    return null;
  });

  function REGLTexture(target) {
    TexFlags.call(this);
    this.mipmask = 0;
    this.internalformat = GL_RGBA;

    this.id = textureCount++;

    this.refCount = 1;

    this.target = target;
    this.texture = gl.createTexture();

    this.unit = -1;
    this.bindCount = 0;

    this.texInfo = new TexInfo();

    if (config.profile) {
      this.stats = { size: 0 };
    }
  }

  function tempBind(texture) {
    gl.activeTexture(GL_TEXTURE0);
    gl.bindTexture(texture.target, texture.texture);
  }

  function tempRestore() {
    var prev = textureUnits[0];
    if (prev) {
      gl.bindTexture(prev.target, prev.texture);
    } else {
      gl.bindTexture(GL_TEXTURE_2D, null);
    }
  }

  function destroy(texture) {
    var handle = texture.texture;
    check(handle, 'must not double destroy texture');
    var unit = texture.unit;
    var target = texture.target;
    if (unit >= 0) {
      gl.activeTexture(GL_TEXTURE0 + unit);
      gl.bindTexture(target, null);
      textureUnits[unit] = null;
    }
    gl.deleteTexture(handle);
    texture.texture = null;
    texture.params = null;
    texture.pixels = null;
    texture.refCount = 0;
    delete textureSet[texture.id];
    stats.textureCount--;
  }

  extend(REGLTexture.prototype, {
    bind: function () {
      var texture = this;
      texture.bindCount += 1;
      var unit = texture.unit;
      if (unit < 0) {
        for (var i = 0; i < numTexUnits; ++i) {
          var other = textureUnits[i];
          if (other) {
            if (other.bindCount > 0) {
              continue;
            }
            other.unit = -1;
          }
          textureUnits[i] = texture;
          unit = i;
          break;
        }
        if (unit >= numTexUnits) {
          check.raise('insufficient number of texture units');
        }
        if (config.profile && stats.maxTextureUnits < unit + 1) {
          stats.maxTextureUnits = unit + 1; // +1, since the units are zero-based
        }
        texture.unit = unit;
        gl.activeTexture(GL_TEXTURE0 + unit);
        gl.bindTexture(texture.target, texture.texture);
      }
      return unit;
    },

    unbind: function () {
      this.bindCount -= 1;
    },

    decRef: function () {
      if (--this.refCount <= 0) {
        destroy(this);
      }
    }
  });

  function createTexture2D(a, b) {
    var texture = new REGLTexture(GL_TEXTURE_2D);
    textureSet[texture.id] = texture;
    stats.textureCount++;

    function reglTexture2D(a, b) {
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      var mipData = allocMipMap();

      if (typeof a === 'number') {
        if (typeof b === 'number') {
          parseMipMapFromShape(mipData, a | 0, b | 0);
        } else {
          parseMipMapFromShape(mipData, a | 0, a | 0);
        }
      } else if (a) {
        check.type(a, 'object', 'invalid arguments to regl.texture');
        parseTexInfo(texInfo, a);
        parseMipMapFromObject(mipData, a);
      } else {
        // empty textures get assigned a default shape of 1x1
        parseMipMapFromShape(mipData, 1, 1);
      }

      if (texInfo.genMipmaps) {
        mipData.mipmask = (mipData.width << 1) - 1;
      }
      texture.mipmask = mipData.mipmask;

      copyFlags(texture, mipData);

      check.texture2D(texInfo, mipData, limits);
      texture.internalformat = mipData.internalformat;

      reglTexture2D.width = mipData.width;
      reglTexture2D.height = mipData.height;

      tempBind(texture);
      setMipMap(mipData, GL_TEXTURE_2D);
      setTexInfo(texInfo, GL_TEXTURE_2D);
      tempRestore();

      freeMipMap(mipData);

      if (config.profile) {
        texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);
      }
      reglTexture2D.format = textureFormatsInvert[texture.internalformat];
      reglTexture2D.type = textureTypesInvert[texture.type];

      reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
      reglTexture2D.min = minFiltersInvert[texInfo.minFilter];

      reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];

      return reglTexture2D;
    }

    function subimage(image, x_, y_, level_) {
      check(!!image, 'must specify image data');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || (texture.width >> level) - x;
      imageData.height = imageData.height || (texture.height >> level) - y;

      check(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');
      check(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');
      check(texture.mipmask & 1 << level, 'missing mipmap data');
      check(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_2D, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTexture2D;
    }

    function resize(w_, h_) {
      var w = w_ | 0;
      var h = h_ | 0 || w;
      if (w === texture.width && h === texture.height) {
        return reglTexture2D;
      }

      reglTexture2D.width = texture.width = w;
      reglTexture2D.height = texture.height = h;

      tempBind(texture);

      for (var i = 0; texture.mipmask >> i; ++i) {
        var _w = w >> i;
        var _h = h >> i;
        if (!_w || !_h) break;
        gl.texImage2D(GL_TEXTURE_2D, i, texture.format, _w, _h, 0, texture.format, texture.type, null);
      }
      tempRestore();

      // also, recompute the texture size.
      if (config.profile) {
        texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);
      }

      return reglTexture2D;
    }

    reglTexture2D(a, b);

    reglTexture2D.subimage = subimage;
    reglTexture2D.resize = resize;
    reglTexture2D._reglType = 'texture2d';
    reglTexture2D._texture = texture;
    if (config.profile) {
      reglTexture2D.stats = texture.stats;
    }
    reglTexture2D.destroy = function () {
      texture.decRef();
    };

    return reglTexture2D;
  }

  function createTextureCube(a0, a1, a2, a3, a4, a5) {
    var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP);
    textureSet[texture.id] = texture;
    stats.cubeCount++;

    var faces = new Array(6);

    function reglTextureCube(a0, a1, a2, a3, a4, a5) {
      var i;
      var texInfo = texture.texInfo;
      TexInfo.call(texInfo);
      for (i = 0; i < 6; ++i) {
        faces[i] = allocMipMap();
      }

      if (typeof a0 === 'number' || !a0) {
        var s = a0 | 0 || 1;
        for (i = 0; i < 6; ++i) {
          parseMipMapFromShape(faces[i], s, s);
        }
      } else if (typeof a0 === 'object') {
        if (a1) {
          parseMipMapFromObject(faces[0], a0);
          parseMipMapFromObject(faces[1], a1);
          parseMipMapFromObject(faces[2], a2);
          parseMipMapFromObject(faces[3], a3);
          parseMipMapFromObject(faces[4], a4);
          parseMipMapFromObject(faces[5], a5);
        } else {
          parseTexInfo(texInfo, a0);
          parseFlags(texture, a0);
          if ('faces' in a0) {
            var faceInput = a0.faces;
            check(Array.isArray(faceInput) && faceInput.length === 6, 'cube faces must be a length 6 array');
            for (i = 0; i < 6; ++i) {
              check(typeof faceInput[i] === 'object' && !!faceInput[i], 'invalid input for cube map face');
              copyFlags(faces[i], texture);
              parseMipMapFromObject(faces[i], faceInput[i]);
            }
          } else {
            for (i = 0; i < 6; ++i) {
              parseMipMapFromObject(faces[i], a0);
            }
          }
        }
      } else {
        check.raise('invalid arguments to cube map');
      }

      copyFlags(texture, faces[0]);
      check.optional(function () {
        if (!limits.npotTextureCube) {
          check(isPow2(texture.width) && isPow2(texture.height), 'your browser does not support non power or two texture dimensions');
        }
      });

      if (texInfo.genMipmaps) {
        texture.mipmask = (faces[0].width << 1) - 1;
      } else {
        texture.mipmask = faces[0].mipmask;
      }

      check.textureCube(texture, texInfo, faces, limits);
      texture.internalformat = faces[0].internalformat;

      reglTextureCube.width = faces[0].width;
      reglTextureCube.height = faces[0].height;

      tempBind(texture);
      for (i = 0; i < 6; ++i) {
        setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X + i);
      }
      setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP);
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);
      }

      reglTextureCube.format = textureFormatsInvert[texture.internalformat];
      reglTextureCube.type = textureTypesInvert[texture.type];

      reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
      reglTextureCube.min = minFiltersInvert[texInfo.minFilter];

      reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
      reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];

      for (i = 0; i < 6; ++i) {
        freeMipMap(faces[i]);
      }

      return reglTextureCube;
    }

    function subimage(face, image, x_, y_, level_) {
      check(!!image, 'must specify image data');
      check(typeof face === 'number' && face === (face | 0) && face >= 0 && face < 6, 'invalid face');

      var x = x_ | 0;
      var y = y_ | 0;
      var level = level_ | 0;

      var imageData = allocImage();
      copyFlags(imageData, texture);
      imageData.width = 0;
      imageData.height = 0;
      parseImage(imageData, image);
      imageData.width = imageData.width || (texture.width >> level) - x;
      imageData.height = imageData.height || (texture.height >> level) - y;

      check(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');
      check(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');
      check(texture.mipmask & 1 << level, 'missing mipmap data');
      check(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');

      tempBind(texture);
      setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X + face, x, y, level);
      tempRestore();

      freeImage(imageData);

      return reglTextureCube;
    }

    function resize(radius_) {
      var radius = radius_ | 0;
      if (radius === texture.width) {
        return;
      }

      reglTextureCube.width = texture.width = radius;
      reglTextureCube.height = texture.height = radius;

      tempBind(texture);
      for (var i = 0; i < 6; ++i) {
        for (var j = 0; texture.mipmask >> j; ++j) {
          gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);
        }
      }
      tempRestore();

      if (config.profile) {
        texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);
      }

      return reglTextureCube;
    }

    reglTextureCube(a0, a1, a2, a3, a4, a5);

    reglTextureCube.subimage = subimage;
    reglTextureCube.resize = resize;
    reglTextureCube._reglType = 'textureCube';
    reglTextureCube._texture = texture;
    if (config.profile) {
      reglTextureCube.stats = texture.stats;
    }
    reglTextureCube.destroy = function () {
      texture.decRef();
    };

    return reglTextureCube;
  }

  // Called when regl is destroyed
  function destroyTextures() {
    for (var i = 0; i < numTexUnits; ++i) {
      gl.activeTexture(GL_TEXTURE0 + i);
      gl.bindTexture(GL_TEXTURE_2D, null);
      textureUnits[i] = null;
    }
    values(textureSet).forEach(destroy);

    stats.cubeCount = 0;
    stats.textureCount = 0;
  }

  if (config.profile) {
    stats.getTotalTextureSize = function () {
      var total = 0;
      sortedObjectKeys(textureSet).forEach(function (key) {
        total += textureSet[key].stats.size;
      });
      return total;
    };
  }

  function restoreTextures() {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
    }

    values(textureSet).forEach(function (texture) {
      texture.texture = gl.createTexture();
      gl.bindTexture(texture.target, texture.texture);
      for (var i = 0; i < 32; ++i) {
        if ((texture.mipmask & 1 << i) === 0) {
          continue;
        }
        if (texture.target === GL_TEXTURE_2D) {
          gl.texImage2D(GL_TEXTURE_2D, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);
        } else {
          for (var j = 0; j < 6; ++j) {
            gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + j, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);
          }
        }
      }
      setTexInfo(texture.texInfo, texture.target);
    });
  }

  function refreshTextures() {
    for (var i = 0; i < numTexUnits; ++i) {
      var tex = textureUnits[i];
      if (tex) {
        tex.bindCount = 0;
        tex.unit = -1;
        textureUnits[i] = null;
      }
      gl.activeTexture(GL_TEXTURE0 + i);
      gl.bindTexture(GL_TEXTURE_2D, null);
      gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
    }
  }

  return {
    create2D: createTexture2D,
    createCube: createTextureCube,
    clear: destroyTextures,
    getTexture: function (wrapper) {
      return null;
    },
    restore: restoreTextures,
    refresh: refreshTextures
  };
};

},{"./constants/arraytypes.json":4,"./util/check":21,"./util/extend":25,"./util/flatten":26,"./util/is-array-like":27,"./util/is-ndarray":28,"./util/is-pow2":29,"./util/is-typed-array":30,"./util/pool":32,"./util/sorted-object-keys":34,"./util/to-half-float":35,"./util/values":36}],20:[function(require,module,exports){
var GL_QUERY_RESULT_EXT = 0x8866;
var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
var GL_TIME_ELAPSED_EXT = 0x88BF;

module.exports = function (gl, extensions) {
  if (!extensions.ext_disjoint_timer_query) {
    return null;
  }

  // QUERY POOL BEGIN
  var queryPool = [];
  function allocQuery() {
    return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();
  }
  function freeQuery(query) {
    queryPool.push(query);
  }
  // QUERY POOL END

  var pendingQueries = [];
  function beginQuery(stats) {
    var query = allocQuery();
    extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
    pendingQueries.push(query);
    pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);
  }

  function endQuery() {
    extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
  }

  //
  // Pending stats pool.
  //
  function PendingStats() {
    this.startQueryIndex = -1;
    this.endQueryIndex = -1;
    this.sum = 0;
    this.stats = null;
  }
  var pendingStatsPool = [];
  function allocPendingStats() {
    return pendingStatsPool.pop() || new PendingStats();
  }
  function freePendingStats(pendingStats) {
    pendingStatsPool.push(pendingStats);
  }
  // Pending stats pool end

  var pendingStats = [];
  function pushScopeStats(start, end, stats) {
    var ps = allocPendingStats();
    ps.startQueryIndex = start;
    ps.endQueryIndex = end;
    ps.sum = 0;
    ps.stats = stats;
    pendingStats.push(ps);
  }

  // we should call this at the beginning of the frame,
  // in order to update gpuTime
  var timeSum = [];
  var queryPtr = [];
  function update() {
    var ptr, i;

    var n = pendingQueries.length;
    if (n === 0) {
      return;
    }

    // Reserve space
    queryPtr.length = Math.max(queryPtr.length, n + 1);
    timeSum.length = Math.max(timeSum.length, n + 1);
    timeSum[0] = 0;
    queryPtr[0] = 0;

    // Update all pending timer queries
    var queryTime = 0;
    ptr = 0;
    for (i = 0; i < pendingQueries.length; ++i) {
      var query = pendingQueries[i];
      if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
        queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
        freeQuery(query);
      } else {
        pendingQueries[ptr++] = query;
      }
      timeSum[i + 1] = queryTime;
      queryPtr[i + 1] = ptr;
    }
    pendingQueries.length = ptr;

    // Update all pending stat queries
    ptr = 0;
    for (i = 0; i < pendingStats.length; ++i) {
      var stats = pendingStats[i];
      var start = stats.startQueryIndex;
      var end = stats.endQueryIndex;
      stats.sum += timeSum[end] - timeSum[start];
      var startPtr = queryPtr[start];
      var endPtr = queryPtr[end];
      if (endPtr === startPtr) {
        stats.stats.gpuTime += stats.sum / 1e6;
        freePendingStats(stats);
      } else {
        stats.startQueryIndex = startPtr;
        stats.endQueryIndex = endPtr;
        pendingStats[ptr++] = stats;
      }
    }
    pendingStats.length = ptr;
  }

  return {
    beginQuery: beginQuery,
    endQuery: endQuery,
    pushScopeStats: pushScopeStats,
    update: update,
    getNumPendingQueries: function () {
      return pendingQueries.length;
    },
    clear: function () {
      queryPool.push.apply(queryPool, pendingQueries);
      for (var i = 0; i < queryPool.length; i++) {
        extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
      }
      pendingQueries.length = 0;
      queryPool.length = 0;
    },
    restore: function () {
      pendingQueries.length = 0;
      queryPool.length = 0;
    }
  };
};

},{}],21:[function(require,module,exports){
// Error checking and parameter validation.
//
// Statements for the form `check.someProcedure(...)` get removed by
// a browserify transform for optimized/minified bundles.
//
/* globals atob */
var sortedObjectKeys = require('./sorted-object-keys');
var isTypedArray = require('./is-typed-array');
var extend = require('./extend');

var endl = '\n';

// only used for extracting shader names.  if atob not present, then errors
// will be slightly crappier
function decodeB64(str) {
  if (typeof atob !== 'undefined') {
    return atob(str);
  }
  return 'base64:' + str;
}

function raise(message) {
  var error = new Error('(regl) ' + message);
  console.error(error);
  throw error;
}

function check(pred, message) {
  if (!pred) {
    raise(message);
  }
}

function encolon(message) {
  if (message) {
    return ': ' + message;
  }
  return '';
}

function checkParameter(param, possibilities, message) {
  if (!(param in possibilities)) {
    raise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + sortedObjectKeys(possibilities).join());
  }
}

function checkIsTypedArray(data, message) {
  if (!isTypedArray(data)) {
    raise('invalid parameter type' + encolon(message) + '. must be a typed array');
  }
}

function standardTypeEh(value, type) {
  switch (type) {
    case 'number':
      return typeof value === 'number';
    case 'object':
      return typeof value === 'object';
    case 'string':
      return typeof value === 'string';
    case 'boolean':
      return typeof value === 'boolean';
    case 'function':
      return typeof value === 'function';
    case 'undefined':
      return typeof value === 'undefined';
    case 'symbol':
      return typeof value === 'symbol';
  }
}

function checkTypeOf(value, type, message) {
  if (!standardTypeEh(value, type)) {
    raise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value);
  }
}

function checkNonNegativeInt(value, message) {
  if (!(value >= 0 && (value | 0) === value)) {
    raise('invalid parameter type, (' + value + ')' + encolon(message) + '. must be a nonnegative integer');
  }
}

function checkOneOf(value, list, message) {
  if (list.indexOf(value) < 0) {
    raise('invalid value' + encolon(message) + '. must be one of: ' + list);
  }
}

var constructorKeys = ['gl', 'canvas', 'container', 'attributes', 'pixelRatio', 'extensions', 'optionalExtensions', 'profile', 'onDone'];

function checkConstructor(obj) {
  sortedObjectKeys(obj).forEach(function (key) {
    if (constructorKeys.indexOf(key) < 0) {
      raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
    }
  });
}

function leftPad(str, n) {
  str = str + '';
  while (str.length < n) {
    str = ' ' + str;
  }
  return str;
}

function ShaderFile() {
  this.name = 'unknown';
  this.lines = [];
  this.index = {};
  this.hasErrors = false;
}

function ShaderLine(number, line) {
  this.number = number;
  this.line = line;
  this.errors = [];
}

function ShaderError(fileNumber, lineNumber, message) {
  this.file = fileNumber;
  this.line = lineNumber;
  this.message = message;
}

function guessCommand() {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1];
  }
  var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
  if (pat2) {
    return pat2[1];
  }
  return 'unknown';
}

function guessCallSite() {
  var error = new Error();
  var stack = (error.stack || error).toString();
  var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
  if (pat) {
    return pat[1];
  }
  var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
  if (pat2) {
    return pat2[1];
  }
  return 'unknown';
}

function parseSource(source, command) {
  var lines = source.split('\n');
  var lineNumber = 1;
  var fileNumber = 0;
  var files = {
    unknown: new ShaderFile(),
    0: new ShaderFile()
  };
  files.unknown.name = files[0].name = command || guessCommand();
  files.unknown.lines.push(new ShaderLine(0, ''));
  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];
    var parts = /^\s*#\s*(\w+)\s+(.+)\s*$/.exec(line);
    if (parts) {
      switch (parts[1]) {
        case 'line':
          var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
          if (lineNumberInfo) {
            lineNumber = lineNumberInfo[1] | 0;
            if (lineNumberInfo[2]) {
              fileNumber = lineNumberInfo[2] | 0;
              if (!(fileNumber in files)) {
                files[fileNumber] = new ShaderFile();
              }
            }
          }
          break;
        case 'define':
          var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
          if (nameInfo) {
            files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];
          }
          break;
      }
    }
    files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));
  }
  sortedObjectKeys(files).forEach(function (fileNumber) {
    var file = files[fileNumber];
    file.lines.forEach(function (line) {
      file.index[line.number] = line;
    });
  });
  return files;
}

function parseErrorLog(errLog) {
  var result = [];
  errLog.split('\n').forEach(function (errMsg) {
    if (errMsg.length < 5) {
      return;
    }
    var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(errMsg);
    if (parts) {
      result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));
    } else if (errMsg.length > 0) {
      result.push(new ShaderError('unknown', 0, errMsg));
    }
  });
  return result;
}

function annotateFiles(files, errors) {
  errors.forEach(function (error) {
    var file = files[error.file];
    if (file) {
      var line = file.index[error.line];
      if (line) {
        line.errors.push(error);
        file.hasErrors = true;
        return;
      }
    }
    files.unknown.hasErrors = true;
    files.unknown.lines[0].errors.push(error);
  });
}

function checkShaderError(gl, shader, source, type, command) {
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    var errLog = gl.getShaderInfoLog(shader);
    var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
    checkCommandType(source, 'string', typeName + ' shader source must be a string', command);
    var files = parseSource(source, command);
    var errors = parseErrorLog(errLog);
    annotateFiles(files, errors);

    sortedObjectKeys(files).forEach(function (fileNumber) {
      var file = files[fileNumber];
      if (!file.hasErrors) {
        return;
      }

      var strings = [''];
      var styles = [''];

      function push(str, style) {
        strings.push(str);
        styles.push(style || '');
      }

      push('file number ' + fileNumber + ': ' + file.name + '\n', 'color:red;text-decoration:underline;font-weight:bold');

      file.lines.forEach(function (line) {
        if (line.errors.length > 0) {
          push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');
          push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');

          // try to guess token
          var offset = 0;
          line.errors.forEach(function (error) {
            var message = error.message;
            var token = /^\s*'(.*)'\s*:\s*(.*)$/.exec(message);
            if (token) {
              var tokenPat = token[1];
              message = token[2];
              switch (tokenPat) {
                case 'assign':
                  tokenPat = '=';
                  break;
              }
              offset = Math.max(line.line.indexOf(tokenPat, offset), 0);
            } else {
              offset = 0;
            }

            push(leftPad('| ', 6));
            push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');
            push(leftPad('| ', 6));
            push(message + endl, 'font-weight:bold');
          });
          push(leftPad('| ', 6) + endl);
        } else {
          push(leftPad(line.number, 4) + '|  ');
          push(line.line + endl, 'color:red');
        }
      });
      if (typeof document !== 'undefined' && !window.chrome) {
        styles[0] = strings.join('%c');
        console.log.apply(console, styles);
      } else {
        console.log(strings.join(''));
      }
    });

    check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);
  }
}

function checkLinkError(gl, program, fragShader, vertShader, command) {
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    var errLog = gl.getProgramInfoLog(program);
    var fragParse = parseSource(fragShader, command);
    var vertParse = parseSource(vertShader, command);

    var header = 'Error linking program with vertex shader, "' + vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';

    if (typeof document !== 'undefined') {
      console.log('%c' + header + endl + '%c' + errLog, 'color:red;text-decoration:underline;font-weight:bold', 'color:red');
    } else {
      console.log(header + endl + errLog);
    }
    check.raise(header);
  }
}

function saveCommandRef(object) {
  object._commandRef = guessCommand();
}

function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {
  saveCommandRef(opts);

  function id(str) {
    if (str) {
      return stringStore.id(str);
    }
    return 0;
  }
  opts._fragId = id(opts.static.frag);
  opts._vertId = id(opts.static.vert);

  function addProps(dict, set) {
    sortedObjectKeys(set).forEach(function (u) {
      dict[stringStore.id(u)] = true;
    });
  }

  var uniformSet = opts._uniformSet = {};
  addProps(uniformSet, uniforms.static);
  addProps(uniformSet, uniforms.dynamic);

  var attributeSet = opts._attributeSet = {};
  addProps(attributeSet, attributes.static);
  addProps(attributeSet, attributes.dynamic);

  opts._hasCount = 'count' in opts.static || 'count' in opts.dynamic || 'elements' in opts.static || 'elements' in opts.dynamic;
}

function commandRaise(message, command) {
  var callSite = guessCallSite();
  raise(message + ' in command ' + (command || guessCommand()) + (callSite === 'unknown' ? '' : ' called from ' + callSite));
}

function checkCommand(pred, message, command) {
  if (!pred) {
    commandRaise(message, command || guessCommand());
  }
}

function checkParameterCommand(param, possibilities, message, command) {
  if (!(param in possibilities)) {
    commandRaise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + sortedObjectKeys(possibilities).join(), command || guessCommand());
  }
}

function checkCommandType(value, type, message, command) {
  if (!standardTypeEh(value, type)) {
    commandRaise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value, command || guessCommand());
  }
}

function checkOptional(block) {
  block();
}

function checkFramebufferFormat(attachment, texFormats, rbFormats) {
  if (attachment.texture) {
    checkOneOf(attachment.texture._texture.internalformat, texFormats, 'unsupported texture format for attachment');
  } else {
    checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, 'unsupported renderbuffer format for attachment');
  }
}

var GL_CLAMP_TO_EDGE = 0x812F;

var GL_NEAREST = 0x2600;
var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
var GL_LINEAR_MIPMAP_LINEAR = 0x2703;

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;
var GL_FLOAT = 5126;

var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;

var GL_HALF_FLOAT_OES = 0x8D61;

var TYPE_SIZE = {};

TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;

TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;

TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;

function pixelSize(type, channels) {
  if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) {
    return 2;
  } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
    return 4;
  } else {
    return TYPE_SIZE[type] * channels;
  }
}

function isPow2(v) {
  return !(v & v - 1) && !!v;
}

function checkTexture2D(info, mipData, limits) {
  var i;
  var w = mipData.width;
  var h = mipData.height;
  var c = mipData.channels;

  // Check texture shape
  check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');

  // check wrap mode
  if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
    check(isPow2(w) && isPow2(h), 'incompatible wrap mode for texture, both width and height must be power of 2');
  }

  if (mipData.mipmask === 1) {
    if (w !== 1 && h !== 1) {
      check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, 'min filter requires mipmap');
    }
  } else {
    // texture must be power of 2
    check(isPow2(w) && isPow2(h), 'texture must be a square power of 2 to support mipmapping');
    check(mipData.mipmask === (w << 1) - 1, 'missing or incomplete mipmap data');
  }

  if (mipData.type === GL_FLOAT) {
    if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {
      check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, 'filter not supported, must enable oes_texture_float_linear');
    }
    check(!info.genMipmaps, 'mipmap generation not supported with float textures');
  }

  // check image complete
  var mipimages = mipData.images;
  for (i = 0; i < 16; ++i) {
    if (mipimages[i]) {
      var mw = w >> i;
      var mh = h >> i;
      check(mipData.mipmask & 1 << i, 'missing mipmap data');

      var img = mipimages[i];

      check(img.width === mw && img.height === mh, 'invalid shape for mip images');

      check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, 'incompatible type for mip image');

      if (img.compressed) {
        // TODO: check size for compressed images
      } else if (img.data) {
        // check(img.data.byteLength === mw * mh *
        // Math.max(pixelSize(img.type, c), img.unpackAlignment),
        var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;
        check(img.data.byteLength === rowSize * mh, 'invalid data for image, buffer size is inconsistent with image format');
      } else if (img.element) {
        // TODO: check element can be loaded
      } else if (img.copy) {
        // TODO: check compatible format and type
      }
    } else if (!info.genMipmaps) {
      check((mipData.mipmask & 1 << i) === 0, 'extra mipmap data');
    }
  }

  if (mipData.compressed) {
    check(!info.genMipmaps, 'mipmap generation for compressed images not supported');
  }
}

function checkTextureCube(texture, info, faces, limits) {
  var w = texture.width;
  var h = texture.height;
  var c = texture.channels;

  // Check texture shape
  check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');
  check(w === h, 'cube map must be square');
  check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, 'wrap mode not supported by cube map');

  for (var i = 0; i < faces.length; ++i) {
    var face = faces[i];
    check(face.width === w && face.height === h, 'inconsistent cube map face shape');

    if (info.genMipmaps) {
      check(!face.compressed, 'can not generate mipmap for compressed textures');
      check(face.mipmask === 1, 'can not specify mipmaps and generate mipmaps');
    } else {
      // TODO: check mip and filter mode
    }

    var mipmaps = face.images;
    for (var j = 0; j < 16; ++j) {
      var img = mipmaps[j];
      if (img) {
        var mw = w >> j;
        var mh = h >> j;
        check(face.mipmask & 1 << j, 'missing mipmap data');
        check(img.width === mw && img.height === mh, 'invalid shape for mip images');
        check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, 'incompatible type for mip image');

        if (img.compressed) {
          // TODO: check size for compressed images
        } else if (img.data) {
          check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c), img.unpackAlignment), 'invalid data for image, buffer size is inconsistent with image format');
        } else if (img.element) {
          // TODO: check element can be loaded
        } else if (img.copy) {
          // TODO: check compatible format and type
        }
      }
    }
  }
}

module.exports = extend(check, {
  optional: checkOptional,
  raise: raise,
  commandRaise: commandRaise,
  command: checkCommand,
  parameter: checkParameter,
  commandParameter: checkParameterCommand,
  constructor: checkConstructor,
  type: checkTypeOf,
  commandType: checkCommandType,
  isTypedArray: checkIsTypedArray,
  nni: checkNonNegativeInt,
  oneOf: checkOneOf,
  shaderError: checkShaderError,
  linkError: checkLinkError,
  callSite: guessCallSite,
  saveCommandRef: saveCommandRef,
  saveDrawInfo: saveDrawCommandInfo,
  framebufferFormat: checkFramebufferFormat,
  guessCommand: guessCommand,
  texture2D: checkTexture2D,
  textureCube: checkTextureCube
});

},{"./extend":25,"./is-typed-array":30,"./sorted-object-keys":34}],22:[function(require,module,exports){
/* globals performance */
module.exports = typeof performance !== 'undefined' && performance.now ? function () {
  return performance.now();
} : function () {
  return +new Date();
};

},{}],23:[function(require,module,exports){
var extend = require('./extend');
var allFns = require('./compiled-fns');

function slice(x) {
  return Array.prototype.slice.call(x);
}

function join(x) {
  return slice(x).join('');
}

module.exports = function createEnvironment() {
  // variable id counters
  var $Counter = 0;
  var vCounter = 0;

  // Linked values are passed from this scope into the generated code block
  // Calling link() passes a value into the generated scope and returns
  // the variable name which it is bound to
  var linkedItems = {};
  function link(value) {
    var name = '$' + $Counter;
    var originalName = false;
    if (typeof value === 'object' && value.name) {
      name = value.name.replace(/ /g, '_');
      originalName = true;
    }

    if (name in linkedItems) return name;

    linkedItems[name] = value;
    if (!originalName) $Counter++;
    return name;
  }

  // create a code block
  function block() {
    var code = [];
    function push() {
      code.push.apply(code, slice(arguments));
    }

    var vars = [];
    function def() {
      var name = 'v' + vCounter;
      vCounter++;

      vars.push(name);

      if (arguments.length > 0) {
        code.push(name, '=');
        code.push.apply(code, slice(arguments));
        code.push(';');
      }

      return name;
    }

    return extend(push, {
      def: def,
      toString: function () {
        return join([vars.length > 0 ? 'var ' + vars.join(',') + ';' : '', join(code)]);
      }
    });
  }

  function scope() {
    var entry = block();
    var exit = block();

    var entryToString = entry.toString;
    var exitToString = exit.toString;

    function save(object, prop) {
      exit(object, prop, '=', entry.def(object, prop), ';');
    }

    return extend(function () {
      entry.apply(entry, slice(arguments));
    }, {
      def: entry.def,
      entry: entry,
      exit: exit,
      save: save,
      set: function (object, prop, value) {
        save(object, prop);
        entry(object, prop, '=', value, ';');
      },
      toString: function () {
        return entryToString() + exitToString();
      }
    });
  }

  function conditional() {
    var pred = join(arguments);
    var thenBlock = scope();
    var elseBlock = scope();

    var thenToString = thenBlock.toString;
    var elseToString = elseBlock.toString;

    return extend(thenBlock, {
      then: function () {
        thenBlock.apply(thenBlock, slice(arguments));
        return this;
      },
      else: function () {
        elseBlock.apply(elseBlock, slice(arguments));
        return this;
      },
      toString: function () {
        var elseClause = elseToString();
        if (elseClause) {
          elseClause = 'else{' + elseClause + '}';
        }
        return join(['if(', pred, '){', thenToString(), '}', elseClause]);
      }
    });
  }

  // procedure list
  var globalBlock = block();
  var procedures = {};
  function proc(name, count) {
    var args = [];
    function arg() {
      var name = 'a' + args.length;
      args.push(name);
      return name;
    }

    count = count || 0;
    for (var i = 0; i < count; ++i) {
      arg();
    }

    var body = scope();
    var bodyToString = body.toString;

    var result = procedures[name] = extend(body, {
      arg: arg,
      toString: function () {
        return join(['function(', args.join(), '){', bodyToString(), '}']);
      }
    });

    return result;
  }

  function compile() {
    var linkedNames = [];
    var linkedValues = [];
    Object.keys(linkedItems).sort(function (a, b) {
      var a$ = a.charAt(0) === '$';
      var b$ = b.charAt(0) === '$';
      if (!a$ && !b$) return a.localeCompare(b);
      if (a$ && b$) return +a.slice(1) < +b.slice(1) ? -1 : 1;
      if (a$ && !b$) return -1;
      return 1;
    }).forEach(function (name) {
      var value = linkedItems[name];
      linkedNames.push(name);
      linkedValues.push(value);
    });

    var lastNumber = 0;
    for (var q = linkedNames.length - 1; q > -1; q--) {
      if (linkedNames[q].charAt(0) === '$') {
        lastNumber = q;
        break;
      }
    }

    var key = linkedNames.slice(lastNumber).join();

    var proc = allFns[key];
    if (!proc) {
      throw new Error('missing precompiled function with key: ' + key);
    }
    return proc.apply(null, linkedValues);
  }

  return {
    global: globalBlock,
    link: link,
    block: block,
    proc: proc,
    scope: scope,
    cond: conditional,
    compile: compile
  };
};

},{"./compiled-fns":24,"./extend":25}],24:[function(require,module,exports){
module.exports = {
  '$0': function ($0) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v74, v75, v76, v77, v78, v79, v80, v81, v88, v89, v94, v95, v96, v97, v98, v99, v100, v101, v104, v105, v106, v107, v108, v109;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v74 = v10.blend_color;
    v75 = v3.blend_color;
    v76 = v10.blend_equation;
    v77 = v3.blend_equation;
    v78 = v10.blend_func;
    v79 = v3.blend_func;
    v80 = v10.colorMask;
    v81 = v3.colorMask;
    v88 = v10.depth_range;
    v89 = v3.depth_range;
    v94 = v10.polygonOffset_offset;
    v95 = v3.polygonOffset_offset;
    v96 = v10.sample_coverage;
    v97 = v3.sample_coverage;
    v98 = v10.scissor_box;
    v99 = v3.scissor_box;
    v100 = v10.stencil_func;
    v101 = v3.stencil_func;
    v104 = v10.stencil_opBack;
    v105 = v3.stencil_opBack;
    v106 = v10.stencil_opFront;
    v107 = v3.stencil_opFront;
    v108 = v10.viewport;
    v109 = v3.viewport;
    return {
      'poll': function () {
        var v47;
        var v65, v66, v67, v68, v69, v70, v71, v72, v73, v82, v83, v84, v85, v86, v87, v90, v91, v92, v93, v102, v103;
        v3.dirty = false;
        v65 = v10.blend_enable;
        v66 = v10.cull_enable;
        v67 = v10.depth_enable;
        v68 = v10.dither;
        v69 = v10.polygonOffset_enable;
        v70 = v10.sample_alpha;
        v71 = v10.sample_enable;
        v72 = v10.scissor_enable;
        v73 = v10.stencil_enable;
        v82 = v10.cull_face;
        v83 = v3.cull_face;
        v84 = v10.depth_func;
        v85 = v3.depth_func;
        v86 = v10.depth_mask;
        v87 = v3.depth_mask;
        v90 = v10.frontFace;
        v91 = v3.frontFace;
        v92 = v10.lineWidth;
        v93 = v3.lineWidth;
        v102 = v10.stencil_mask;
        v103 = v3.stencil_mask;
        v47 = v7.next;
        if (v47 !== v7.cur) {
          if (v47) {
            v8.bindFramebuffer(36160, v47.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v47;
        }
        if (v65 !== v3.blend_enable) {
          if (v65) {
            v8.enable(3042);
          } else {
            v8.disable(3042);
          }
          v3.blend_enable = v65;
        }
        if (v66 !== v3.cull_enable) {
          if (v66) {
            v8.enable(2884);
          } else {
            v8.disable(2884);
          }
          v3.cull_enable = v66;
        }
        if (v67 !== v3.depth_enable) {
          if (v67) {
            v8.enable(2929);
          } else {
            v8.disable(2929);
          }
          v3.depth_enable = v67;
        }
        if (v68 !== v3.dither) {
          if (v68) {
            v8.enable(3024);
          } else {
            v8.disable(3024);
          }
          v3.dither = v68;
        }
        if (v69 !== v3.polygonOffset_enable) {
          if (v69) {
            v8.enable(32823);
          } else {
            v8.disable(32823);
          }
          v3.polygonOffset_enable = v69;
        }
        if (v70 !== v3.sample_alpha) {
          if (v70) {
            v8.enable(32926);
          } else {
            v8.disable(32926);
          }
          v3.sample_alpha = v70;
        }
        if (v71 !== v3.sample_enable) {
          if (v71) {
            v8.enable(32928);
          } else {
            v8.disable(32928);
          }
          v3.sample_enable = v71;
        }
        if (v72 !== v3.scissor_enable) {
          if (v72) {
            v8.enable(3089);
          } else {
            v8.disable(3089);
          }
          v3.scissor_enable = v72;
        }
        if (v73 !== v3.stencil_enable) {
          if (v73) {
            v8.enable(2960);
          } else {
            v8.disable(2960);
          }
          v3.stencil_enable = v73;
        }
        if (v74[0] !== v75[0] || v74[1] !== v75[1] || v74[2] !== v75[2] || v74[3] !== v75[3]) {
          v8.blendColor(v74[0], v74[1], v74[2], v74[3]);
          v75[0] = v74[0];
          v75[1] = v74[1];
          v75[2] = v74[2];
          v75[3] = v74[3];
        }
        if (v76[0] !== v77[0] || v76[1] !== v77[1]) {
          v8.blendEquationSeparate(v76[0], v76[1]);
          v77[0] = v76[0];
          v77[1] = v76[1];
        }
        if (v78[0] !== v79[0] || v78[1] !== v79[1] || v78[2] !== v79[2] || v78[3] !== v79[3]) {
          v8.blendFuncSeparate(v78[0], v78[1], v78[2], v78[3]);
          v79[0] = v78[0];
          v79[1] = v78[1];
          v79[2] = v78[2];
          v79[3] = v78[3];
        }
        if (v80[0] !== v81[0] || v80[1] !== v81[1] || v80[2] !== v81[2] || v80[3] !== v81[3]) {
          v8.colorMask(v80[0], v80[1], v80[2], v80[3]);
          v81[0] = v80[0];
          v81[1] = v80[1];
          v81[2] = v80[2];
          v81[3] = v80[3];
        }
        if (v82 !== v83) {
          v8.cullFace(v82);
          v3.cull_face = v82;
        }
        if (v84 !== v85) {
          v8.depthFunc(v84);
          v3.depth_func = v84;
        }
        if (v86 !== v87) {
          v8.depthMask(v86);
          v3.depth_mask = v86;
        }
        if (v88[0] !== v89[0] || v88[1] !== v89[1]) {
          v8.depthRange(v88[0], v88[1]);
          v89[0] = v88[0];
          v89[1] = v88[1];
        }
        if (v90 !== v91) {
          v8.frontFace(v90);
          v3.frontFace = v90;
        }
        if (v92 !== v93) {
          v8.lineWidth(v92);
          v3.lineWidth = v92;
        }
        if (v94[0] !== v95[0] || v94[1] !== v95[1]) {
          v8.polygonOffset(v94[0], v94[1]);
          v95[0] = v94[0];
          v95[1] = v94[1];
        }
        if (v96[0] !== v97[0] || v96[1] !== v97[1]) {
          v8.sampleCoverage(v96[0], v96[1]);
          v97[0] = v96[0];
          v97[1] = v96[1];
        }
        if (v98[0] !== v99[0] || v98[1] !== v99[1] || v98[2] !== v99[2] || v98[3] !== v99[3]) {
          v8.scissor(v98[0], v98[1], v98[2], v98[3]);
          v99[0] = v98[0];
          v99[1] = v98[1];
          v99[2] = v98[2];
          v99[3] = v98[3];
        }
        if (v100[0] !== v101[0] || v100[1] !== v101[1] || v100[2] !== v101[2]) {
          v8.stencilFunc(v100[0], v100[1], v100[2]);
          v101[0] = v100[0];
          v101[1] = v100[1];
          v101[2] = v100[2];
        }
        if (v102 !== v103) {
          v8.stencilMask(v102);
          v3.stencil_mask = v102;
        }
        if (v104[0] !== v105[0] || v104[1] !== v105[1] || v104[2] !== v105[2] || v104[3] !== v105[3]) {
          v8.stencilOpSeparate(v104[0], v104[1], v104[2], v104[3]);
          v105[0] = v104[0];
          v105[1] = v104[1];
          v105[2] = v104[2];
          v105[3] = v104[3];
        }
        if (v106[0] !== v107[0] || v106[1] !== v107[1] || v106[2] !== v107[2] || v106[3] !== v107[3]) {
          v8.stencilOpSeparate(v106[0], v106[1], v106[2], v106[3]);
          v107[0] = v106[0];
          v107[1] = v106[1];
          v107[2] = v106[2];
          v107[3] = v106[3];
        }
        if (v108[0] !== v109[0] || v108[1] !== v109[1] || v108[2] !== v109[2] || v108[3] !== v109[3]) {
          v8.viewport(v108[0], v108[1], v108[2], v108[3]);
          v109[0] = v108[0];
          v109[1] = v108[1];
          v109[2] = v108[2];
          v109[3] = v108[3];
        }
      },
      'refresh': function () {
        var v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64;
        var v65, v66, v67, v68, v69, v70, v71, v72, v73, v82, v83, v84, v85, v86, v87, v90, v91, v92, v93, v102, v103;
        v3.dirty = false;
        v65 = v10.blend_enable;
        v66 = v10.cull_enable;
        v67 = v10.depth_enable;
        v68 = v10.dither;
        v69 = v10.polygonOffset_enable;
        v70 = v10.sample_alpha;
        v71 = v10.sample_enable;
        v72 = v10.scissor_enable;
        v73 = v10.stencil_enable;
        v82 = v10.cull_face;
        v83 = v3.cull_face;
        v84 = v10.depth_func;
        v85 = v3.depth_func;
        v86 = v10.depth_mask;
        v87 = v3.depth_mask;
        v90 = v10.frontFace;
        v91 = v3.frontFace;
        v92 = v10.lineWidth;
        v93 = v3.lineWidth;
        v102 = v10.stencil_mask;
        v103 = v3.stencil_mask;
        v48 = v7.next;
        if (v48) {
          v8.bindFramebuffer(36160, v48.framebuffer);
        } else {
          v8.bindFramebuffer(36160, null);
        }
        v7.cur = v48;
        v49 = v0[0];
        if (v49.buffer) {
          v8.enableVertexAttribArray(0);
          v8.bindBuffer(34962, v49.buffer.buffer);
          v8.vertexAttribPointer(0, v49.size, v49.type, v49.normalized, v49.stride, v49.offset);
        } else {
          v8.disableVertexAttribArray(0);
          v8.vertexAttrib4f(0, v49.x, v49.y, v49.z, v49.w);
          v49.buffer = null;
        }
        v50 = v0[1];
        if (v50.buffer) {
          v8.enableVertexAttribArray(1);
          v8.bindBuffer(34962, v50.buffer.buffer);
          v8.vertexAttribPointer(1, v50.size, v50.type, v50.normalized, v50.stride, v50.offset);
        } else {
          v8.disableVertexAttribArray(1);
          v8.vertexAttrib4f(1, v50.x, v50.y, v50.z, v50.w);
          v50.buffer = null;
        }
        v51 = v0[2];
        if (v51.buffer) {
          v8.enableVertexAttribArray(2);
          v8.bindBuffer(34962, v51.buffer.buffer);
          v8.vertexAttribPointer(2, v51.size, v51.type, v51.normalized, v51.stride, v51.offset);
        } else {
          v8.disableVertexAttribArray(2);
          v8.vertexAttrib4f(2, v51.x, v51.y, v51.z, v51.w);
          v51.buffer = null;
        }
        v52 = v0[3];
        if (v52.buffer) {
          v8.enableVertexAttribArray(3);
          v8.bindBuffer(34962, v52.buffer.buffer);
          v8.vertexAttribPointer(3, v52.size, v52.type, v52.normalized, v52.stride, v52.offset);
        } else {
          v8.disableVertexAttribArray(3);
          v8.vertexAttrib4f(3, v52.x, v52.y, v52.z, v52.w);
          v52.buffer = null;
        }
        v53 = v0[4];
        if (v53.buffer) {
          v8.enableVertexAttribArray(4);
          v8.bindBuffer(34962, v53.buffer.buffer);
          v8.vertexAttribPointer(4, v53.size, v53.type, v53.normalized, v53.stride, v53.offset);
        } else {
          v8.disableVertexAttribArray(4);
          v8.vertexAttrib4f(4, v53.x, v53.y, v53.z, v53.w);
          v53.buffer = null;
        }
        v54 = v0[5];
        if (v54.buffer) {
          v8.enableVertexAttribArray(5);
          v8.bindBuffer(34962, v54.buffer.buffer);
          v8.vertexAttribPointer(5, v54.size, v54.type, v54.normalized, v54.stride, v54.offset);
        } else {
          v8.disableVertexAttribArray(5);
          v8.vertexAttrib4f(5, v54.x, v54.y, v54.z, v54.w);
          v54.buffer = null;
        }
        v55 = v0[6];
        if (v55.buffer) {
          v8.enableVertexAttribArray(6);
          v8.bindBuffer(34962, v55.buffer.buffer);
          v8.vertexAttribPointer(6, v55.size, v55.type, v55.normalized, v55.stride, v55.offset);
        } else {
          v8.disableVertexAttribArray(6);
          v8.vertexAttrib4f(6, v55.x, v55.y, v55.z, v55.w);
          v55.buffer = null;
        }
        v56 = v0[7];
        if (v56.buffer) {
          v8.enableVertexAttribArray(7);
          v8.bindBuffer(34962, v56.buffer.buffer);
          v8.vertexAttribPointer(7, v56.size, v56.type, v56.normalized, v56.stride, v56.offset);
        } else {
          v8.disableVertexAttribArray(7);
          v8.vertexAttrib4f(7, v56.x, v56.y, v56.z, v56.w);
          v56.buffer = null;
        }
        v57 = v0[8];
        if (v57.buffer) {
          v8.enableVertexAttribArray(8);
          v8.bindBuffer(34962, v57.buffer.buffer);
          v8.vertexAttribPointer(8, v57.size, v57.type, v57.normalized, v57.stride, v57.offset);
        } else {
          v8.disableVertexAttribArray(8);
          v8.vertexAttrib4f(8, v57.x, v57.y, v57.z, v57.w);
          v57.buffer = null;
        }
        v58 = v0[9];
        if (v58.buffer) {
          v8.enableVertexAttribArray(9);
          v8.bindBuffer(34962, v58.buffer.buffer);
          v8.vertexAttribPointer(9, v58.size, v58.type, v58.normalized, v58.stride, v58.offset);
        } else {
          v8.disableVertexAttribArray(9);
          v8.vertexAttrib4f(9, v58.x, v58.y, v58.z, v58.w);
          v58.buffer = null;
        }
        v59 = v0[10];
        if (v59.buffer) {
          v8.enableVertexAttribArray(10);
          v8.bindBuffer(34962, v59.buffer.buffer);
          v8.vertexAttribPointer(10, v59.size, v59.type, v59.normalized, v59.stride, v59.offset);
        } else {
          v8.disableVertexAttribArray(10);
          v8.vertexAttrib4f(10, v59.x, v59.y, v59.z, v59.w);
          v59.buffer = null;
        }
        v60 = v0[11];
        if (v60.buffer) {
          v8.enableVertexAttribArray(11);
          v8.bindBuffer(34962, v60.buffer.buffer);
          v8.vertexAttribPointer(11, v60.size, v60.type, v60.normalized, v60.stride, v60.offset);
        } else {
          v8.disableVertexAttribArray(11);
          v8.vertexAttrib4f(11, v60.x, v60.y, v60.z, v60.w);
          v60.buffer = null;
        }
        v61 = v0[12];
        if (v61.buffer) {
          v8.enableVertexAttribArray(12);
          v8.bindBuffer(34962, v61.buffer.buffer);
          v8.vertexAttribPointer(12, v61.size, v61.type, v61.normalized, v61.stride, v61.offset);
        } else {
          v8.disableVertexAttribArray(12);
          v8.vertexAttrib4f(12, v61.x, v61.y, v61.z, v61.w);
          v61.buffer = null;
        }
        v62 = v0[13];
        if (v62.buffer) {
          v8.enableVertexAttribArray(13);
          v8.bindBuffer(34962, v62.buffer.buffer);
          v8.vertexAttribPointer(13, v62.size, v62.type, v62.normalized, v62.stride, v62.offset);
        } else {
          v8.disableVertexAttribArray(13);
          v8.vertexAttrib4f(13, v62.x, v62.y, v62.z, v62.w);
          v62.buffer = null;
        }
        v63 = v0[14];
        if (v63.buffer) {
          v8.enableVertexAttribArray(14);
          v8.bindBuffer(34962, v63.buffer.buffer);
          v8.vertexAttribPointer(14, v63.size, v63.type, v63.normalized, v63.stride, v63.offset);
        } else {
          v8.disableVertexAttribArray(14);
          v8.vertexAttrib4f(14, v63.x, v63.y, v63.z, v63.w);
          v63.buffer = null;
        }
        v64 = v0[15];
        if (v64.buffer) {
          v8.enableVertexAttribArray(15);
          v8.bindBuffer(34962, v64.buffer.buffer);
          v8.vertexAttribPointer(15, v64.size, v64.type, v64.normalized, v64.stride, v64.offset);
        } else {
          v8.disableVertexAttribArray(15);
          v8.vertexAttrib4f(15, v64.x, v64.y, v64.z, v64.w);
          v64.buffer = null;
        }
        v15.currentVAO = null;
        v15.setVAO(v15.targetVAO);
        if (v65) {
          v8.enable(3042);
        } else {
          v8.disable(3042);
        }
        v3.blend_enable = v65;
        if (v66) {
          v8.enable(2884);
        } else {
          v8.disable(2884);
        }
        v3.cull_enable = v66;
        if (v67) {
          v8.enable(2929);
        } else {
          v8.disable(2929);
        }
        v3.depth_enable = v67;
        if (v68) {
          v8.enable(3024);
        } else {
          v8.disable(3024);
        }
        v3.dither = v68;
        if (v69) {
          v8.enable(32823);
        } else {
          v8.disable(32823);
        }
        v3.polygonOffset_enable = v69;
        if (v70) {
          v8.enable(32926);
        } else {
          v8.disable(32926);
        }
        v3.sample_alpha = v70;
        if (v71) {
          v8.enable(32928);
        } else {
          v8.disable(32928);
        }
        v3.sample_enable = v71;
        if (v72) {
          v8.enable(3089);
        } else {
          v8.disable(3089);
        }
        v3.scissor_enable = v72;
        if (v73) {
          v8.enable(2960);
        } else {
          v8.disable(2960);
        }
        v3.stencil_enable = v73;
        v8.blendColor(v74[0], v74[1], v74[2], v74[3]);
        v75[0] = v74[0];
        v75[1] = v74[1];
        v75[2] = v74[2];
        v75[3] = v74[3];
        v8.blendEquationSeparate(v76[0], v76[1]);
        v77[0] = v76[0];
        v77[1] = v76[1];
        v8.blendFuncSeparate(v78[0], v78[1], v78[2], v78[3]);
        v79[0] = v78[0];
        v79[1] = v78[1];
        v79[2] = v78[2];
        v79[3] = v78[3];
        v8.colorMask(v80[0], v80[1], v80[2], v80[3]);
        v81[0] = v80[0];
        v81[1] = v80[1];
        v81[2] = v80[2];
        v81[3] = v80[3];
        v8.cullFace(v82);
        v3.cull_face = v82;
        v8.depthFunc(v84);
        v3.depth_func = v84;
        v8.depthMask(v86);
        v3.depth_mask = v86;
        v8.depthRange(v88[0], v88[1]);
        v89[0] = v88[0];
        v89[1] = v88[1];
        v8.frontFace(v90);
        v3.frontFace = v90;
        v8.lineWidth(v92);
        v3.lineWidth = v92;
        v8.polygonOffset(v94[0], v94[1]);
        v95[0] = v94[0];
        v95[1] = v94[1];
        v8.sampleCoverage(v96[0], v96[1]);
        v97[0] = v96[0];
        v97[1] = v96[1];
        v8.scissor(v98[0], v98[1], v98[2], v98[3]);
        v99[0] = v98[0];
        v99[1] = v98[1];
        v99[2] = v98[2];
        v99[3] = v98[3];
        v8.stencilFunc(v100[0], v100[1], v100[2]);
        v101[0] = v100[0];
        v101[1] = v100[1];
        v101[2] = v100[2];
        v8.stencilMask(v102);
        v3.stencil_mask = v102;
        v8.stencilOpSeparate(v104[0], v104[1], v104[2], v104[3]);
        v105[0] = v104[0];
        v105[1] = v104[1];
        v105[2] = v104[2];
        v105[3] = v104[3];
        v8.stencilOpSeparate(v106[0], v106[1], v106[2], v106[3]);
        v107[0] = v106[0];
        v107[1] = v106[1];
        v107[2] = v106[2];
        v107[3] = v106[3];
        v8.viewport(v108[0], v108[1], v108[2], v108[3]);
        v109[0] = v108[0];
        v109[1] = v108[1];
        v109[2] = v108[2];
        v109[3] = v108[3];
      }

    };
  },
  '$3': function ($0, $1, $2, $3) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v108, v174;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v108 = {};
    v174 = {};
    return {
      'batch': function (a0, a1) {
        var v113, v114, v169, v170, v171, v172, v173, v175, v176;
        v113 = v6.angle_instanced_arrays;
        v114 = v7.next;
        if (v114 !== v7.cur) {
          if (v114) {
            v8.bindFramebuffer(36160, v114.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v114;
        }
        if (v3.dirty) {
          var v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168;
          v115 = v10.dither;
          if (v115 !== v3.dither) {
            if (v115) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v115;
          }
          v116 = v10.blend_enable;
          if (v116 !== v3.blend_enable) {
            if (v116) {
              v8.enable(3042);
            } else {
              v8.disable(3042);
            }
            v3.blend_enable = v116;
          }
          v117 = v16[0];
          v118 = v16[1];
          v119 = v16[2];
          v120 = v16[3];
          if (v117 !== v17[0] || v118 !== v17[1] || v119 !== v17[2] || v120 !== v17[3]) {
            v8.blendColor(v117, v118, v119, v120);
            v17[0] = v117;
            v17[1] = v118;
            v17[2] = v119;
            v17[3] = v120;
          }
          v121 = v18[0];
          v122 = v18[1];
          if (v121 !== v19[0] || v122 !== v19[1]) {
            v8.blendEquationSeparate(v121, v122);
            v19[0] = v121;
            v19[1] = v122;
          }
          v123 = v20[0];
          v124 = v20[1];
          v125 = v20[2];
          v126 = v20[3];
          if (v123 !== v21[0] || v124 !== v21[1] || v125 !== v21[2] || v126 !== v21[3]) {
            v8.blendFuncSeparate(v123, v124, v125, v126);
            v21[0] = v123;
            v21[1] = v124;
            v21[2] = v125;
            v21[3] = v126;
          }
          v127 = v10.depth_enable;
          if (v127 !== v3.depth_enable) {
            if (v127) {
              v8.enable(2929);
            } else {
              v8.disable(2929);
            }
            v3.depth_enable = v127;
          }
          v128 = v10.depth_func;
          if (v128 !== v3.depth_func) {
            v8.depthFunc(v128);
            v3.depth_func = v128;
          }
          v129 = v24[0];
          v130 = v24[1];
          if (v129 !== v25[0] || v130 !== v25[1]) {
            v8.depthRange(v129, v130);
            v25[0] = v129;
            v25[1] = v130;
          }
          v131 = v10.depth_mask;
          if (v131 !== v3.depth_mask) {
            v8.depthMask(v131);
            v3.depth_mask = v131;
          }
          v132 = v22[0];
          v133 = v22[1];
          v134 = v22[2];
          v135 = v22[3];
          if (v132 !== v23[0] || v133 !== v23[1] || v134 !== v23[2] || v135 !== v23[3]) {
            v8.colorMask(v132, v133, v134, v135);
            v23[0] = v132;
            v23[1] = v133;
            v23[2] = v134;
            v23[3] = v135;
          }
          v136 = v10.cull_enable;
          if (v136 !== v3.cull_enable) {
            if (v136) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v136;
          }
          v137 = v10.cull_face;
          if (v137 !== v3.cull_face) {
            v8.cullFace(v137);
            v3.cull_face = v137;
          }
          v138 = v10.frontFace;
          if (v138 !== v3.frontFace) {
            v8.frontFace(v138);
            v3.frontFace = v138;
          }
          v139 = v10.lineWidth;
          if (v139 !== v3.lineWidth) {
            v8.lineWidth(v139);
            v3.lineWidth = v139;
          }
          v140 = v10.polygonOffset_enable;
          if (v140 !== v3.polygonOffset_enable) {
            if (v140) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v140;
          }
          v141 = v26[0];
          v142 = v26[1];
          if (v141 !== v27[0] || v142 !== v27[1]) {
            v8.polygonOffset(v141, v142);
            v27[0] = v141;
            v27[1] = v142;
          }
          v143 = v10.sample_alpha;
          if (v143 !== v3.sample_alpha) {
            if (v143) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v143;
          }
          v144 = v10.sample_enable;
          if (v144 !== v3.sample_enable) {
            if (v144) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v144;
          }
          v145 = v28[0];
          v146 = v28[1];
          if (v145 !== v29[0] || v146 !== v29[1]) {
            v8.sampleCoverage(v145, v146);
            v29[0] = v145;
            v29[1] = v146;
          }
          v147 = v10.stencil_enable;
          if (v147 !== v3.stencil_enable) {
            if (v147) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v147;
          }
          v148 = v10.stencil_mask;
          if (v148 !== v3.stencil_mask) {
            v8.stencilMask(v148);
            v3.stencil_mask = v148;
          }
          v149 = v32[0];
          v150 = v32[1];
          v151 = v32[2];
          if (v149 !== v33[0] || v150 !== v33[1] || v151 !== v33[2]) {
            v8.stencilFunc(v149, v150, v151);
            v33[0] = v149;
            v33[1] = v150;
            v33[2] = v151;
          }
          v152 = v36[0];
          v153 = v36[1];
          v154 = v36[2];
          v155 = v36[3];
          if (v152 !== v37[0] || v153 !== v37[1] || v154 !== v37[2] || v155 !== v37[3]) {
            v8.stencilOpSeparate(v152, v153, v154, v155);
            v37[0] = v152;
            v37[1] = v153;
            v37[2] = v154;
            v37[3] = v155;
          }
          v156 = v34[0];
          v157 = v34[1];
          v158 = v34[2];
          v159 = v34[3];
          if (v156 !== v35[0] || v157 !== v35[1] || v158 !== v35[2] || v159 !== v35[3]) {
            v8.stencilOpSeparate(v156, v157, v158, v159);
            v35[0] = v156;
            v35[1] = v157;
            v35[2] = v158;
            v35[3] = v159;
          }
          v160 = v10.scissor_enable;
          if (v160 !== v3.scissor_enable) {
            if (v160) {
              v8.enable(3089);
            } else {
              v8.disable(3089);
            }
            v3.scissor_enable = v160;
          }
          v161 = v30[0];
          v162 = v30[1];
          v163 = v30[2];
          v164 = v30[3];
          if (v161 !== v31[0] || v162 !== v31[1] || v163 !== v31[2] || v164 !== v31[3]) {
            v8.scissor(v161, v162, v163, v164);
            v31[0] = v161;
            v31[1] = v162;
            v31[2] = v163;
            v31[3] = v164;
          }
          v165 = v38[0];
          v166 = v38[1];
          v167 = v38[2];
          v168 = v38[3];
          if (v165 !== v39[0] || v166 !== v39[1] || v167 !== v39[2] || v168 !== v39[3]) {
            v8.viewport(v165, v166, v167, v168);
            v39[0] = v165;
            v39[1] = v166;
            v39[2] = v167;
            v39[3] = v168;
          }
          v3.dirty = false;
        }
        v169 = v3.profile;
        if (v169) {
          v170 = performance.now();
          $1.count += a1;
        }
        v171 = v11.frag;
        v172 = v11.vert;
        v173 = v11.program(v172, v171);
        v8.useProgram(v173.program);
        v15.setVAO(null);
        v175 = v173.id;
        v176 = v174[v175];
        if (v176) {
          v176.call(this, a0, a1);
        } else {
          v176 = v174[v175] = $3(v173);
          v176.call(this, a0, a1);
        }
        v15.setVAO(null);
        if (v169) {
          $1.cpuTime += performance.now() - v170;
        }
      },
      'draw': function (a0) {
        var v47, v48, v103, v104, v105, v106, v107, v109, v110;
        v47 = v6.angle_instanced_arrays;
        v48 = v7.next;
        if (v48 !== v7.cur) {
          if (v48) {
            v8.bindFramebuffer(36160, v48.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v48;
        }
        if (v3.dirty) {
          var v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102;
          v49 = v10.dither;
          if (v49 !== v3.dither) {
            if (v49) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v49;
          }
          v50 = v10.blend_enable;
          if (v50 !== v3.blend_enable) {
            if (v50) {
              v8.enable(3042);
            } else {
              v8.disable(3042);
            }
            v3.blend_enable = v50;
          }
          v51 = v16[0];
          v52 = v16[1];
          v53 = v16[2];
          v54 = v16[3];
          if (v51 !== v17[0] || v52 !== v17[1] || v53 !== v17[2] || v54 !== v17[3]) {
            v8.blendColor(v51, v52, v53, v54);
            v17[0] = v51;
            v17[1] = v52;
            v17[2] = v53;
            v17[3] = v54;
          }
          v55 = v18[0];
          v56 = v18[1];
          if (v55 !== v19[0] || v56 !== v19[1]) {
            v8.blendEquationSeparate(v55, v56);
            v19[0] = v55;
            v19[1] = v56;
          }
          v57 = v20[0];
          v58 = v20[1];
          v59 = v20[2];
          v60 = v20[3];
          if (v57 !== v21[0] || v58 !== v21[1] || v59 !== v21[2] || v60 !== v21[3]) {
            v8.blendFuncSeparate(v57, v58, v59, v60);
            v21[0] = v57;
            v21[1] = v58;
            v21[2] = v59;
            v21[3] = v60;
          }
          v61 = v10.depth_enable;
          if (v61 !== v3.depth_enable) {
            if (v61) {
              v8.enable(2929);
            } else {
              v8.disable(2929);
            }
            v3.depth_enable = v61;
          }
          v62 = v10.depth_func;
          if (v62 !== v3.depth_func) {
            v8.depthFunc(v62);
            v3.depth_func = v62;
          }
          v63 = v24[0];
          v64 = v24[1];
          if (v63 !== v25[0] || v64 !== v25[1]) {
            v8.depthRange(v63, v64);
            v25[0] = v63;
            v25[1] = v64;
          }
          v65 = v10.depth_mask;
          if (v65 !== v3.depth_mask) {
            v8.depthMask(v65);
            v3.depth_mask = v65;
          }
          v66 = v22[0];
          v67 = v22[1];
          v68 = v22[2];
          v69 = v22[3];
          if (v66 !== v23[0] || v67 !== v23[1] || v68 !== v23[2] || v69 !== v23[3]) {
            v8.colorMask(v66, v67, v68, v69);
            v23[0] = v66;
            v23[1] = v67;
            v23[2] = v68;
            v23[3] = v69;
          }
          v70 = v10.cull_enable;
          if (v70 !== v3.cull_enable) {
            if (v70) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v70;
          }
          v71 = v10.cull_face;
          if (v71 !== v3.cull_face) {
            v8.cullFace(v71);
            v3.cull_face = v71;
          }
          v72 = v10.frontFace;
          if (v72 !== v3.frontFace) {
            v8.frontFace(v72);
            v3.frontFace = v72;
          }
          v73 = v10.lineWidth;
          if (v73 !== v3.lineWidth) {
            v8.lineWidth(v73);
            v3.lineWidth = v73;
          }
          v74 = v10.polygonOffset_enable;
          if (v74 !== v3.polygonOffset_enable) {
            if (v74) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v74;
          }
          v75 = v26[0];
          v76 = v26[1];
          if (v75 !== v27[0] || v76 !== v27[1]) {
            v8.polygonOffset(v75, v76);
            v27[0] = v75;
            v27[1] = v76;
          }
          v77 = v10.sample_alpha;
          if (v77 !== v3.sample_alpha) {
            if (v77) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v77;
          }
          v78 = v10.sample_enable;
          if (v78 !== v3.sample_enable) {
            if (v78) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v78;
          }
          v79 = v28[0];
          v80 = v28[1];
          if (v79 !== v29[0] || v80 !== v29[1]) {
            v8.sampleCoverage(v79, v80);
            v29[0] = v79;
            v29[1] = v80;
          }
          v81 = v10.stencil_enable;
          if (v81 !== v3.stencil_enable) {
            if (v81) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v81;
          }
          v82 = v10.stencil_mask;
          if (v82 !== v3.stencil_mask) {
            v8.stencilMask(v82);
            v3.stencil_mask = v82;
          }
          v83 = v32[0];
          v84 = v32[1];
          v85 = v32[2];
          if (v83 !== v33[0] || v84 !== v33[1] || v85 !== v33[2]) {
            v8.stencilFunc(v83, v84, v85);
            v33[0] = v83;
            v33[1] = v84;
            v33[2] = v85;
          }
          v86 = v36[0];
          v87 = v36[1];
          v88 = v36[2];
          v89 = v36[3];
          if (v86 !== v37[0] || v87 !== v37[1] || v88 !== v37[2] || v89 !== v37[3]) {
            v8.stencilOpSeparate(v86, v87, v88, v89);
            v37[0] = v86;
            v37[1] = v87;
            v37[2] = v88;
            v37[3] = v89;
          }
          v90 = v34[0];
          v91 = v34[1];
          v92 = v34[2];
          v93 = v34[3];
          if (v90 !== v35[0] || v91 !== v35[1] || v92 !== v35[2] || v93 !== v35[3]) {
            v8.stencilOpSeparate(v90, v91, v92, v93);
            v35[0] = v90;
            v35[1] = v91;
            v35[2] = v92;
            v35[3] = v93;
          }
          v94 = v10.scissor_enable;
          if (v94 !== v3.scissor_enable) {
            if (v94) {
              v8.enable(3089);
            } else {
              v8.disable(3089);
            }
            v3.scissor_enable = v94;
          }
          v95 = v30[0];
          v96 = v30[1];
          v97 = v30[2];
          v98 = v30[3];
          if (v95 !== v31[0] || v96 !== v31[1] || v97 !== v31[2] || v98 !== v31[3]) {
            v8.scissor(v95, v96, v97, v98);
            v31[0] = v95;
            v31[1] = v96;
            v31[2] = v97;
            v31[3] = v98;
          }
          v99 = v38[0];
          v100 = v38[1];
          v101 = v38[2];
          v102 = v38[3];
          if (v99 !== v39[0] || v100 !== v39[1] || v101 !== v39[2] || v102 !== v39[3]) {
            v8.viewport(v99, v100, v101, v102);
            v39[0] = v99;
            v39[1] = v100;
            v39[2] = v101;
            v39[3] = v102;
          }
          v3.dirty = false;
        }
        v103 = v3.profile;
        if (v103) {
          v104 = performance.now();
          $1.count++;
        }
        v105 = v11.frag;
        v106 = v11.vert;
        v107 = v11.program(v106, v105);
        v8.useProgram(v107.program);
        v15.setVAO(null);
        v109 = v107.id;
        v110 = v108[v109];
        if (v110) {
          v110.call(this, a0);
        } else {
          v110 = v108[v109] = $2(v107);
          v110.call(this, a0);
        }
        v15.setVAO(null);
        if (v103) {
          $1.cpuTime += performance.now() - v104;
        }
      },
      'scope': function (a0, a1, a2) {
        var v111, v112;
        v111 = v3.profile;
        if (v111) {
          v112 = performance.now();
          $1.count++;
        }
        a1(v2, a0, a2);
        if (v111) {
          $1.cpuTime += performance.now() - v112;
        }
      }

    };
  },
  '$38,colors,contextColor,dim0A,dim0B,dim0C,dim0D,dim1A,dim1B,dim1C,dim1D,drwLayer,hiA,hiB,hiC,hiD,loA,loB,loC,loD,maskHeight,maskTexture,p01_04,p05_08,p09_12,p13_16,p17_20,p21_24,p25_28,p29_32,p33_36,p37_40,p41_44,p45_48,p49_52,p53_56,p57_60,palette,resolution,viewBoxPos,viewBoxSize': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, colors, contextColor, dim0A, dim0B, dim0C, dim0D, dim1A, dim1B, dim1C, dim1D, drwLayer, hiA, hiB, hiC, hiD, loA, loB, loC, loD, maskHeight, maskTexture, p01_04, p05_08, p09_12, p13_16, p17_20, p21_24, p25_28, p29_32, p33_36, p37_40, p41_44, p45_48, p49_52, p53_56, p57_60, palette, resolution, viewBoxPos, viewBoxSize) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v127, v129, v131, v133, v135, v137, v139, v141, v143, v145, v147, v149, v151, v153, v155, v157, v553, v555, v557, v559, v561, v563, v565, v567, v569, v571, v573, v575, v577, v579, v581, v583;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v48 = {};
    v127 = new Float32Array(16);
    v129 = new Float32Array(16);
    v131 = new Float32Array(16);
    v133 = new Float32Array(16);
    v135 = new Float32Array(16);
    v137 = new Float32Array(16);
    v139 = new Float32Array(16);
    v141 = new Float32Array(16);
    v143 = new Float32Array(16);
    v145 = new Float32Array(16);
    v147 = new Float32Array(16);
    v149 = new Float32Array(16);
    v151 = new Float32Array(16);
    v153 = new Float32Array(16);
    v155 = new Float32Array(16);
    v157 = new Float32Array(16);
    v553 = new Float32Array(16);
    v555 = new Float32Array(16);
    v557 = new Float32Array(16);
    v559 = new Float32Array(16);
    v561 = new Float32Array(16);
    v563 = new Float32Array(16);
    v565 = new Float32Array(16);
    v567 = new Float32Array(16);
    v569 = new Float32Array(16);
    v571 = new Float32Array(16);
    v573 = new Float32Array(16);
    v575 = new Float32Array(16);
    v577 = new Float32Array(16);
    v579 = new Float32Array(16);
    v581 = new Float32Array(16);
    v583 = new Float32Array(16);
    return {
      'batch': function (a0, a1) {
        var v473, v499, v500, v501;
        v473 = v7.next;
        if (v473 !== v7.cur) {
          if (v473) {
            v8.bindFramebuffer(36160, v473.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v473;
        }
        if (v3.dirty) {
          var v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498;
          v474 = v22[0];
          v475 = v22[1];
          v476 = v22[2];
          v477 = v22[3];
          if (v474 !== v23[0] || v475 !== v23[1] || v476 !== v23[2] || v477 !== v23[3]) {
            v8.colorMask(v474, v475, v476, v477);
            v23[0] = v474;
            v23[1] = v475;
            v23[2] = v476;
            v23[3] = v477;
          }
          v478 = v10.frontFace;
          if (v478 !== v3.frontFace) {
            v8.frontFace(v478);
            v3.frontFace = v478;
          }
          v479 = v10.polygonOffset_enable;
          if (v479 !== v3.polygonOffset_enable) {
            if (v479) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v479;
          }
          v480 = v26[0];
          v481 = v26[1];
          if (v480 !== v27[0] || v481 !== v27[1]) {
            v8.polygonOffset(v480, v481);
            v27[0] = v480;
            v27[1] = v481;
          }
          v482 = v10.sample_alpha;
          if (v482 !== v3.sample_alpha) {
            if (v482) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v482;
          }
          v483 = v10.sample_enable;
          if (v483 !== v3.sample_enable) {
            if (v483) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v483;
          }
          v484 = v28[0];
          v485 = v28[1];
          if (v484 !== v29[0] || v485 !== v29[1]) {
            v8.sampleCoverage(v484, v485);
            v29[0] = v484;
            v29[1] = v485;
          }
          v486 = v10.stencil_enable;
          if (v486 !== v3.stencil_enable) {
            if (v486) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v486;
          }
          v487 = v10.stencil_mask;
          if (v487 !== v3.stencil_mask) {
            v8.stencilMask(v487);
            v3.stencil_mask = v487;
          }
          v488 = v32[0];
          v489 = v32[1];
          v490 = v32[2];
          if (v488 !== v33[0] || v489 !== v33[1] || v490 !== v33[2]) {
            v8.stencilFunc(v488, v489, v490);
            v33[0] = v488;
            v33[1] = v489;
            v33[2] = v490;
          }
          v491 = v36[0];
          v492 = v36[1];
          v493 = v36[2];
          v494 = v36[3];
          if (v491 !== v37[0] || v492 !== v37[1] || v493 !== v37[2] || v494 !== v37[3]) {
            v8.stencilOpSeparate(v491, v492, v493, v494);
            v37[0] = v491;
            v37[1] = v492;
            v37[2] = v493;
            v37[3] = v494;
          }
          v495 = v34[0];
          v496 = v34[1];
          v497 = v34[2];
          v498 = v34[3];
          if (v495 !== v35[0] || v496 !== v35[1] || v497 !== v35[2] || v498 !== v35[3]) {
            v8.stencilOpSeparate(v495, v496, v497, v498);
            v35[0] = v495;
            v35[1] = v496;
            v35[2] = v497;
            v35[3] = v498;
          }
        }
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.disable(3042);
        v3.blend_enable = false;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 1, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 1;
        v21[3] = 1;
        v8.enable(2884);
        v3.cull_enable = true;
        v8.cullFace(1029);
        v3.cull_face = 1029;
        v8.enable(2929);
        v3.depth_enable = true;
        v8.depthFunc(513);
        v3.depth_func = 513;
        v8.depthMask(true);
        v3.depth_mask = true;
        v8.depthRange(0, 1);
        v25[0] = 0;
        v25[1] = 1;
        v8.disable(3024);
        v3.dither = false;
        v8.lineWidth(2);
        v3.lineWidth = 2;
        v8.enable(3089);
        v3.scissor_enable = true;
        v499 = v3.profile;
        v3.profile = false;
        v8.useProgram($37.program);
        var v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v614;
        v15.setVAO(null);
        v520 = p01_04.location;
        v521 = v0[v520];
        if (!v521.buffer) {
          v8.enableVertexAttribArray(v520);
        }
        if (v521.type !== $3.dtype || v521.size !== 4 || v521.buffer !== $3 || v521.normalized !== false || v521.offset !== 0 || v521.stride !== 0) {
          v8.bindBuffer(34962, $3.buffer);
          v8.vertexAttribPointer(v520, 4, $3.dtype, false, 0, 0);
          v521.type = $3.dtype;
          v521.size = 4;
          v521.buffer = $3;
          v521.normalized = false;
          v521.offset = 0;
          v521.stride = 0;
        }
        v522 = p05_08.location;
        v523 = v0[v522];
        if (!v523.buffer) {
          v8.enableVertexAttribArray(v522);
        }
        if (v523.type !== $4.dtype || v523.size !== 4 || v523.buffer !== $4 || v523.normalized !== false || v523.offset !== 0 || v523.stride !== 0) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v522, 4, $4.dtype, false, 0, 0);
          v523.type = $4.dtype;
          v523.size = 4;
          v523.buffer = $4;
          v523.normalized = false;
          v523.offset = 0;
          v523.stride = 0;
        }
        v524 = p09_12.location;
        v525 = v0[v524];
        if (!v525.buffer) {
          v8.enableVertexAttribArray(v524);
        }
        if (v525.type !== $5.dtype || v525.size !== 4 || v525.buffer !== $5 || v525.normalized !== false || v525.offset !== 0 || v525.stride !== 0) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v524, 4, $5.dtype, false, 0, 0);
          v525.type = $5.dtype;
          v525.size = 4;
          v525.buffer = $5;
          v525.normalized = false;
          v525.offset = 0;
          v525.stride = 0;
        }
        v526 = p13_16.location;
        v527 = v0[v526];
        if (!v527.buffer) {
          v8.enableVertexAttribArray(v526);
        }
        if (v527.type !== $6.dtype || v527.size !== 4 || v527.buffer !== $6 || v527.normalized !== false || v527.offset !== 0 || v527.stride !== 0) {
          v8.bindBuffer(34962, $6.buffer);
          v8.vertexAttribPointer(v526, 4, $6.dtype, false, 0, 0);
          v527.type = $6.dtype;
          v527.size = 4;
          v527.buffer = $6;
          v527.normalized = false;
          v527.offset = 0;
          v527.stride = 0;
        }
        v528 = p17_20.location;
        v529 = v0[v528];
        if (!v529.buffer) {
          v8.enableVertexAttribArray(v528);
        }
        if (v529.type !== $7.dtype || v529.size !== 4 || v529.buffer !== $7 || v529.normalized !== false || v529.offset !== 0 || v529.stride !== 0) {
          v8.bindBuffer(34962, $7.buffer);
          v8.vertexAttribPointer(v528, 4, $7.dtype, false, 0, 0);
          v529.type = $7.dtype;
          v529.size = 4;
          v529.buffer = $7;
          v529.normalized = false;
          v529.offset = 0;
          v529.stride = 0;
        }
        v530 = p21_24.location;
        v531 = v0[v530];
        if (!v531.buffer) {
          v8.enableVertexAttribArray(v530);
        }
        if (v531.type !== $8.dtype || v531.size !== 4 || v531.buffer !== $8 || v531.normalized !== false || v531.offset !== 0 || v531.stride !== 0) {
          v8.bindBuffer(34962, $8.buffer);
          v8.vertexAttribPointer(v530, 4, $8.dtype, false, 0, 0);
          v531.type = $8.dtype;
          v531.size = 4;
          v531.buffer = $8;
          v531.normalized = false;
          v531.offset = 0;
          v531.stride = 0;
        }
        v532 = p25_28.location;
        v533 = v0[v532];
        if (!v533.buffer) {
          v8.enableVertexAttribArray(v532);
        }
        if (v533.type !== $9.dtype || v533.size !== 4 || v533.buffer !== $9 || v533.normalized !== false || v533.offset !== 0 || v533.stride !== 0) {
          v8.bindBuffer(34962, $9.buffer);
          v8.vertexAttribPointer(v532, 4, $9.dtype, false, 0, 0);
          v533.type = $9.dtype;
          v533.size = 4;
          v533.buffer = $9;
          v533.normalized = false;
          v533.offset = 0;
          v533.stride = 0;
        }
        v534 = p29_32.location;
        v535 = v0[v534];
        if (!v535.buffer) {
          v8.enableVertexAttribArray(v534);
        }
        if (v535.type !== $10.dtype || v535.size !== 4 || v535.buffer !== $10 || v535.normalized !== false || v535.offset !== 0 || v535.stride !== 0) {
          v8.bindBuffer(34962, $10.buffer);
          v8.vertexAttribPointer(v534, 4, $10.dtype, false, 0, 0);
          v535.type = $10.dtype;
          v535.size = 4;
          v535.buffer = $10;
          v535.normalized = false;
          v535.offset = 0;
          v535.stride = 0;
        }
        v536 = p33_36.location;
        v537 = v0[v536];
        if (!v537.buffer) {
          v8.enableVertexAttribArray(v536);
        }
        if (v537.type !== $11.dtype || v537.size !== 4 || v537.buffer !== $11 || v537.normalized !== false || v537.offset !== 0 || v537.stride !== 0) {
          v8.bindBuffer(34962, $11.buffer);
          v8.vertexAttribPointer(v536, 4, $11.dtype, false, 0, 0);
          v537.type = $11.dtype;
          v537.size = 4;
          v537.buffer = $11;
          v537.normalized = false;
          v537.offset = 0;
          v537.stride = 0;
        }
        v538 = p37_40.location;
        v539 = v0[v538];
        if (!v539.buffer) {
          v8.enableVertexAttribArray(v538);
        }
        if (v539.type !== $12.dtype || v539.size !== 4 || v539.buffer !== $12 || v539.normalized !== false || v539.offset !== 0 || v539.stride !== 0) {
          v8.bindBuffer(34962, $12.buffer);
          v8.vertexAttribPointer(v538, 4, $12.dtype, false, 0, 0);
          v539.type = $12.dtype;
          v539.size = 4;
          v539.buffer = $12;
          v539.normalized = false;
          v539.offset = 0;
          v539.stride = 0;
        }
        v540 = p41_44.location;
        v541 = v0[v540];
        if (!v541.buffer) {
          v8.enableVertexAttribArray(v540);
        }
        if (v541.type !== $13.dtype || v541.size !== 4 || v541.buffer !== $13 || v541.normalized !== false || v541.offset !== 0 || v541.stride !== 0) {
          v8.bindBuffer(34962, $13.buffer);
          v8.vertexAttribPointer(v540, 4, $13.dtype, false, 0, 0);
          v541.type = $13.dtype;
          v541.size = 4;
          v541.buffer = $13;
          v541.normalized = false;
          v541.offset = 0;
          v541.stride = 0;
        }
        v542 = p45_48.location;
        v543 = v0[v542];
        if (!v543.buffer) {
          v8.enableVertexAttribArray(v542);
        }
        if (v543.type !== $14.dtype || v543.size !== 4 || v543.buffer !== $14 || v543.normalized !== false || v543.offset !== 0 || v543.stride !== 0) {
          v8.bindBuffer(34962, $14.buffer);
          v8.vertexAttribPointer(v542, 4, $14.dtype, false, 0, 0);
          v543.type = $14.dtype;
          v543.size = 4;
          v543.buffer = $14;
          v543.normalized = false;
          v543.offset = 0;
          v543.stride = 0;
        }
        v544 = p49_52.location;
        v545 = v0[v544];
        if (!v545.buffer) {
          v8.enableVertexAttribArray(v544);
        }
        if (v545.type !== $15.dtype || v545.size !== 4 || v545.buffer !== $15 || v545.normalized !== false || v545.offset !== 0 || v545.stride !== 0) {
          v8.bindBuffer(34962, $15.buffer);
          v8.vertexAttribPointer(v544, 4, $15.dtype, false, 0, 0);
          v545.type = $15.dtype;
          v545.size = 4;
          v545.buffer = $15;
          v545.normalized = false;
          v545.offset = 0;
          v545.stride = 0;
        }
        v546 = p53_56.location;
        v547 = v0[v546];
        if (!v547.buffer) {
          v8.enableVertexAttribArray(v546);
        }
        if (v547.type !== $16.dtype || v547.size !== 4 || v547.buffer !== $16 || v547.normalized !== false || v547.offset !== 0 || v547.stride !== 0) {
          v8.bindBuffer(34962, $16.buffer);
          v8.vertexAttribPointer(v546, 4, $16.dtype, false, 0, 0);
          v547.type = $16.dtype;
          v547.size = 4;
          v547.buffer = $16;
          v547.normalized = false;
          v547.offset = 0;
          v547.stride = 0;
        }
        v548 = p57_60.location;
        v549 = v0[v548];
        if (!v549.buffer) {
          v8.enableVertexAttribArray(v548);
        }
        if (v549.type !== $17.dtype || v549.size !== 4 || v549.buffer !== $17 || v549.normalized !== false || v549.offset !== 0 || v549.stride !== 0) {
          v8.bindBuffer(34962, $17.buffer);
          v8.vertexAttribPointer(v548, 4, $17.dtype, false, 0, 0);
          v549.type = $17.dtype;
          v549.size = 4;
          v549.buffer = $17;
          v549.normalized = false;
          v549.offset = 0;
          v549.stride = 0;
        }
        v550 = colors.location;
        v551 = v0[v550];
        if (!v551.buffer) {
          v8.enableVertexAttribArray(v550);
        }
        if (v551.type !== $18.dtype || v551.size !== 4 || v551.buffer !== $18 || v551.normalized !== false || v551.offset !== 0 || v551.stride !== 0) {
          v8.bindBuffer(34962, $18.buffer);
          v8.vertexAttribPointer(v550, 4, $18.dtype, false, 0, 0);
          v551.type = $18.dtype;
          v551.size = 4;
          v551.buffer = $18;
          v551.normalized = false;
          v551.offset = 0;
          v551.stride = 0;
        }
        v8.uniform1i(palette.location, $38.bind());
        v614 = v4.elements;
        if (v614) {
          v8.bindBuffer(34963, v614.buffer.buffer);
        } else if (v15.currentVAO) {
          v614 = v5.getElements(v15.currentVAO.elements);
          if (v614) v8.bindBuffer(34963, v614.buffer.buffer);
        }
        for (v500 = 0; v500 < a1; ++v500) {
          v501 = a0[v500];
          var v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v552, v554, v556, v558, v560, v562, v564, v566, v568, v570, v572, v574, v576, v578, v580, v582, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608, v609, v610, v611, v612, v613, v615, v616;
          v502 = v501['viewportHeight'];
          v47.height = v502;
          v503 = v501['viewportWidth'];
          v47.width = v503;
          v504 = v501['viewportX'];
          v47.x = v504;
          v505 = v501['viewportY'];
          v47.y = v505;
          v506 = v47.x | 0;
          v507 = v47.y | 0;
          v508 = 'width' in v47 ? v47.width | 0 : v2.framebufferWidth - v506;
          v509 = 'height' in v47 ? v47.height | 0 : v2.framebufferHeight - v507;
          v510 = v2.viewportWidth;
          v2.viewportWidth = v508;
          v511 = v2.viewportHeight;
          v2.viewportHeight = v509;
          v8.viewport(v506, v507, v508, v509);
          v39[0] = v506;
          v39[1] = v507;
          v39[2] = v508;
          v39[3] = v509;
          v512 = v501['scissorHeight'];
          v48.height = v512;
          v513 = v501['scissorWidth'];
          v48.width = v513;
          v514 = v501['scissorX'];
          v48.x = v514;
          v515 = v501['scissorY'];
          v48.y = v515;
          v516 = v48.x | 0;
          v517 = v48.y | 0;
          v518 = 'width' in v48 ? v48.width | 0 : v2.framebufferWidth - v516;
          v519 = 'height' in v48 ? v48.height | 0 : v2.framebufferHeight - v517;
          v8.scissor(v516, v517, v518, v519);
          v31[0] = v516;
          v31[1] = v517;
          v31[2] = v518;
          v31[3] = v519;
          v552 = v501['dim0A'];
          v8.uniformMatrix4fv(dim0A.location, false, Array.isArray(v552) || v552 instanceof Float32Array ? v552 : (v553[0] = v552[0], v553[1] = v552[1], v553[2] = v552[2], v553[3] = v552[3], v553[4] = v552[4], v553[5] = v552[5], v553[6] = v552[6], v553[7] = v552[7], v553[8] = v552[8], v553[9] = v552[9], v553[10] = v552[10], v553[11] = v552[11], v553[12] = v552[12], v553[13] = v552[13], v553[14] = v552[14], v553[15] = v552[15], v553));
          v554 = v501['dim1A'];
          v8.uniformMatrix4fv(dim1A.location, false, Array.isArray(v554) || v554 instanceof Float32Array ? v554 : (v555[0] = v554[0], v555[1] = v554[1], v555[2] = v554[2], v555[3] = v554[3], v555[4] = v554[4], v555[5] = v554[5], v555[6] = v554[6], v555[7] = v554[7], v555[8] = v554[8], v555[9] = v554[9], v555[10] = v554[10], v555[11] = v554[11], v555[12] = v554[12], v555[13] = v554[13], v555[14] = v554[14], v555[15] = v554[15], v555));
          v556 = v501['dim0B'];
          v8.uniformMatrix4fv(dim0B.location, false, Array.isArray(v556) || v556 instanceof Float32Array ? v556 : (v557[0] = v556[0], v557[1] = v556[1], v557[2] = v556[2], v557[3] = v556[3], v557[4] = v556[4], v557[5] = v556[5], v557[6] = v556[6], v557[7] = v556[7], v557[8] = v556[8], v557[9] = v556[9], v557[10] = v556[10], v557[11] = v556[11], v557[12] = v556[12], v557[13] = v556[13], v557[14] = v556[14], v557[15] = v556[15], v557));
          v558 = v501['dim1B'];
          v8.uniformMatrix4fv(dim1B.location, false, Array.isArray(v558) || v558 instanceof Float32Array ? v558 : (v559[0] = v558[0], v559[1] = v558[1], v559[2] = v558[2], v559[3] = v558[3], v559[4] = v558[4], v559[5] = v558[5], v559[6] = v558[6], v559[7] = v558[7], v559[8] = v558[8], v559[9] = v558[9], v559[10] = v558[10], v559[11] = v558[11], v559[12] = v558[12], v559[13] = v558[13], v559[14] = v558[14], v559[15] = v558[15], v559));
          v560 = v501['dim0C'];
          v8.uniformMatrix4fv(dim0C.location, false, Array.isArray(v560) || v560 instanceof Float32Array ? v560 : (v561[0] = v560[0], v561[1] = v560[1], v561[2] = v560[2], v561[3] = v560[3], v561[4] = v560[4], v561[5] = v560[5], v561[6] = v560[6], v561[7] = v560[7], v561[8] = v560[8], v561[9] = v560[9], v561[10] = v560[10], v561[11] = v560[11], v561[12] = v560[12], v561[13] = v560[13], v561[14] = v560[14], v561[15] = v560[15], v561));
          v562 = v501['dim1C'];
          v8.uniformMatrix4fv(dim1C.location, false, Array.isArray(v562) || v562 instanceof Float32Array ? v562 : (v563[0] = v562[0], v563[1] = v562[1], v563[2] = v562[2], v563[3] = v562[3], v563[4] = v562[4], v563[5] = v562[5], v563[6] = v562[6], v563[7] = v562[7], v563[8] = v562[8], v563[9] = v562[9], v563[10] = v562[10], v563[11] = v562[11], v563[12] = v562[12], v563[13] = v562[13], v563[14] = v562[14], v563[15] = v562[15], v563));
          v564 = v501['dim0D'];
          v8.uniformMatrix4fv(dim0D.location, false, Array.isArray(v564) || v564 instanceof Float32Array ? v564 : (v565[0] = v564[0], v565[1] = v564[1], v565[2] = v564[2], v565[3] = v564[3], v565[4] = v564[4], v565[5] = v564[5], v565[6] = v564[6], v565[7] = v564[7], v565[8] = v564[8], v565[9] = v564[9], v565[10] = v564[10], v565[11] = v564[11], v565[12] = v564[12], v565[13] = v564[13], v565[14] = v564[14], v565[15] = v564[15], v565));
          v566 = v501['dim1D'];
          v8.uniformMatrix4fv(dim1D.location, false, Array.isArray(v566) || v566 instanceof Float32Array ? v566 : (v567[0] = v566[0], v567[1] = v566[1], v567[2] = v566[2], v567[3] = v566[3], v567[4] = v566[4], v567[5] = v566[5], v567[6] = v566[6], v567[7] = v566[7], v567[8] = v566[8], v567[9] = v566[9], v567[10] = v566[10], v567[11] = v566[11], v567[12] = v566[12], v567[13] = v566[13], v567[14] = v566[14], v567[15] = v566[15], v567));
          v568 = v501['loA'];
          v8.uniformMatrix4fv(loA.location, false, Array.isArray(v568) || v568 instanceof Float32Array ? v568 : (v569[0] = v568[0], v569[1] = v568[1], v569[2] = v568[2], v569[3] = v568[3], v569[4] = v568[4], v569[5] = v568[5], v569[6] = v568[6], v569[7] = v568[7], v569[8] = v568[8], v569[9] = v568[9], v569[10] = v568[10], v569[11] = v568[11], v569[12] = v568[12], v569[13] = v568[13], v569[14] = v568[14], v569[15] = v568[15], v569));
          v570 = v501['hiA'];
          v8.uniformMatrix4fv(hiA.location, false, Array.isArray(v570) || v570 instanceof Float32Array ? v570 : (v571[0] = v570[0], v571[1] = v570[1], v571[2] = v570[2], v571[3] = v570[3], v571[4] = v570[4], v571[5] = v570[5], v571[6] = v570[6], v571[7] = v570[7], v571[8] = v570[8], v571[9] = v570[9], v571[10] = v570[10], v571[11] = v570[11], v571[12] = v570[12], v571[13] = v570[13], v571[14] = v570[14], v571[15] = v570[15], v571));
          v572 = v501['loB'];
          v8.uniformMatrix4fv(loB.location, false, Array.isArray(v572) || v572 instanceof Float32Array ? v572 : (v573[0] = v572[0], v573[1] = v572[1], v573[2] = v572[2], v573[3] = v572[3], v573[4] = v572[4], v573[5] = v572[5], v573[6] = v572[6], v573[7] = v572[7], v573[8] = v572[8], v573[9] = v572[9], v573[10] = v572[10], v573[11] = v572[11], v573[12] = v572[12], v573[13] = v572[13], v573[14] = v572[14], v573[15] = v572[15], v573));
          v574 = v501['hiB'];
          v8.uniformMatrix4fv(hiB.location, false, Array.isArray(v574) || v574 instanceof Float32Array ? v574 : (v575[0] = v574[0], v575[1] = v574[1], v575[2] = v574[2], v575[3] = v574[3], v575[4] = v574[4], v575[5] = v574[5], v575[6] = v574[6], v575[7] = v574[7], v575[8] = v574[8], v575[9] = v574[9], v575[10] = v574[10], v575[11] = v574[11], v575[12] = v574[12], v575[13] = v574[13], v575[14] = v574[14], v575[15] = v574[15], v575));
          v576 = v501['loC'];
          v8.uniformMatrix4fv(loC.location, false, Array.isArray(v576) || v576 instanceof Float32Array ? v576 : (v577[0] = v576[0], v577[1] = v576[1], v577[2] = v576[2], v577[3] = v576[3], v577[4] = v576[4], v577[5] = v576[5], v577[6] = v576[6], v577[7] = v576[7], v577[8] = v576[8], v577[9] = v576[9], v577[10] = v576[10], v577[11] = v576[11], v577[12] = v576[12], v577[13] = v576[13], v577[14] = v576[14], v577[15] = v576[15], v577));
          v578 = v501['hiC'];
          v8.uniformMatrix4fv(hiC.location, false, Array.isArray(v578) || v578 instanceof Float32Array ? v578 : (v579[0] = v578[0], v579[1] = v578[1], v579[2] = v578[2], v579[3] = v578[3], v579[4] = v578[4], v579[5] = v578[5], v579[6] = v578[6], v579[7] = v578[7], v579[8] = v578[8], v579[9] = v578[9], v579[10] = v578[10], v579[11] = v578[11], v579[12] = v578[12], v579[13] = v578[13], v579[14] = v578[14], v579[15] = v578[15], v579));
          v580 = v501['loD'];
          v8.uniformMatrix4fv(loD.location, false, Array.isArray(v580) || v580 instanceof Float32Array ? v580 : (v581[0] = v580[0], v581[1] = v580[1], v581[2] = v580[2], v581[3] = v580[3], v581[4] = v580[4], v581[5] = v580[5], v581[6] = v580[6], v581[7] = v580[7], v581[8] = v580[8], v581[9] = v580[9], v581[10] = v580[10], v581[11] = v580[11], v581[12] = v580[12], v581[13] = v580[13], v581[14] = v580[14], v581[15] = v580[15], v581));
          v582 = v501['hiD'];
          v8.uniformMatrix4fv(hiD.location, false, Array.isArray(v582) || v582 instanceof Float32Array ? v582 : (v583[0] = v582[0], v583[1] = v582[1], v583[2] = v582[2], v583[3] = v582[3], v583[4] = v582[4], v583[5] = v582[5], v583[6] = v582[6], v583[7] = v582[7], v583[8] = v582[8], v583[9] = v582[9], v583[10] = v582[10], v583[11] = v582[11], v583[12] = v582[12], v583[13] = v582[13], v583[14] = v582[14], v583[15] = v582[15], v583));
          v584 = v501['resolution'];
          v585 = v584[0];
          v587 = v584[1];
          if (!v500 || v586 !== v585 || v588 !== v587) {
            v586 = v585;
            v588 = v587;
            v8.uniform2f(resolution.location, v585, v587);
          }
          v589 = v501['viewBoxPos'];
          v590 = v589[0];
          v592 = v589[1];
          if (!v500 || v591 !== v590 || v593 !== v592) {
            v591 = v590;
            v593 = v592;
            v8.uniform2f(viewBoxPos.location, v590, v592);
          }
          v594 = v501['viewBoxSize'];
          v595 = v594[0];
          v597 = v594[1];
          if (!v500 || v596 !== v595 || v598 !== v597) {
            v596 = v595;
            v598 = v597;
            v8.uniform2f(viewBoxSize.location, v595, v597);
          }
          v599 = v501['maskHeight'];
          if (!v500 || v600 !== v599) {
            v600 = v599;
            v8.uniform1f(maskHeight.location, v599);
          }
          v601 = v501['drwLayer'];
          if (!v500 || v602 !== v601) {
            v602 = v601;
            v8.uniform1f(drwLayer.location, v601);
          }
          v603 = v501['contextColor'];
          v604 = v603[0];
          v606 = v603[1];
          v608 = v603[2];
          v610 = v603[3];
          if (!v500 || v605 !== v604 || v607 !== v606 || v609 !== v608 || v611 !== v610) {
            v605 = v604;
            v607 = v606;
            v609 = v608;
            v611 = v610;
            v8.uniform4f(contextColor.location, v604, v606, v608, v610);
          }
          v612 = v501['maskTexture'];
          if (v612 && v612._reglType === 'framebuffer') {
            v612 = v612.color[0];
          }
          v613 = v612._texture;
          v8.uniform1i(maskTexture.location, v613.bind());
          v615 = v501['offset'];
          v616 = v501['count'];
          if (v616) {
            if (v614) {
              v8.drawElements(1, v616, v614.type, v615 << (v614.type - 5121 >> 1));
            } else {
              v8.drawArrays(1, v615, v616);
            }
            v2.viewportWidth = v510;
            v2.viewportHeight = v511;
            v613.unbind();
          }
        }
        $38.unbind();
        v3.dirty = true;
        v15.setVAO(null);
        v3.profile = v499;
      },
      'draw': function (a0) {
        var v49, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v128, v130, v132, v134, v136, v138, v140, v142, v144, v146, v148, v150, v152, v154, v156, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178;
        v49 = v7.next;
        if (v49 !== v7.cur) {
          if (v49) {
            v8.bindFramebuffer(36160, v49.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v49;
        }
        if (v3.dirty) {
          var v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74;
          v50 = v22[0];
          v51 = v22[1];
          v52 = v22[2];
          v53 = v22[3];
          if (v50 !== v23[0] || v51 !== v23[1] || v52 !== v23[2] || v53 !== v23[3]) {
            v8.colorMask(v50, v51, v52, v53);
            v23[0] = v50;
            v23[1] = v51;
            v23[2] = v52;
            v23[3] = v53;
          }
          v54 = v10.frontFace;
          if (v54 !== v3.frontFace) {
            v8.frontFace(v54);
            v3.frontFace = v54;
          }
          v55 = v10.polygonOffset_enable;
          if (v55 !== v3.polygonOffset_enable) {
            if (v55) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v55;
          }
          v56 = v26[0];
          v57 = v26[1];
          if (v56 !== v27[0] || v57 !== v27[1]) {
            v8.polygonOffset(v56, v57);
            v27[0] = v56;
            v27[1] = v57;
          }
          v58 = v10.sample_alpha;
          if (v58 !== v3.sample_alpha) {
            if (v58) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v58;
          }
          v59 = v10.sample_enable;
          if (v59 !== v3.sample_enable) {
            if (v59) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v59;
          }
          v60 = v28[0];
          v61 = v28[1];
          if (v60 !== v29[0] || v61 !== v29[1]) {
            v8.sampleCoverage(v60, v61);
            v29[0] = v60;
            v29[1] = v61;
          }
          v62 = v10.stencil_enable;
          if (v62 !== v3.stencil_enable) {
            if (v62) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v62;
          }
          v63 = v10.stencil_mask;
          if (v63 !== v3.stencil_mask) {
            v8.stencilMask(v63);
            v3.stencil_mask = v63;
          }
          v64 = v32[0];
          v65 = v32[1];
          v66 = v32[2];
          if (v64 !== v33[0] || v65 !== v33[1] || v66 !== v33[2]) {
            v8.stencilFunc(v64, v65, v66);
            v33[0] = v64;
            v33[1] = v65;
            v33[2] = v66;
          }
          v67 = v36[0];
          v68 = v36[1];
          v69 = v36[2];
          v70 = v36[3];
          if (v67 !== v37[0] || v68 !== v37[1] || v69 !== v37[2] || v70 !== v37[3]) {
            v8.stencilOpSeparate(v67, v68, v69, v70);
            v37[0] = v67;
            v37[1] = v68;
            v37[2] = v69;
            v37[3] = v70;
          }
          v71 = v34[0];
          v72 = v34[1];
          v73 = v34[2];
          v74 = v34[3];
          if (v71 !== v35[0] || v72 !== v35[1] || v73 !== v35[2] || v74 !== v35[3]) {
            v8.stencilOpSeparate(v71, v72, v73, v74);
            v35[0] = v71;
            v35[1] = v72;
            v35[2] = v73;
            v35[3] = v74;
          }
        }
        v75 = a0['viewportHeight'];
        v47.height = v75;
        v76 = a0['viewportWidth'];
        v47.width = v76;
        v77 = a0['viewportX'];
        v47.x = v77;
        v78 = a0['viewportY'];
        v47.y = v78;
        v79 = v47.x | 0;
        v80 = v47.y | 0;
        v81 = 'width' in v47 ? v47.width | 0 : v2.framebufferWidth - v79;
        v82 = 'height' in v47 ? v47.height | 0 : v2.framebufferHeight - v80;
        v83 = v2.viewportWidth;
        v2.viewportWidth = v81;
        v84 = v2.viewportHeight;
        v2.viewportHeight = v82;
        v8.viewport(v79, v80, v81, v82);
        v39[0] = v79;
        v39[1] = v80;
        v39[2] = v81;
        v39[3] = v82;
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.disable(3042);
        v3.blend_enable = false;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 1, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 1;
        v21[3] = 1;
        v8.enable(2884);
        v3.cull_enable = true;
        v8.cullFace(1029);
        v3.cull_face = 1029;
        v8.enable(2929);
        v3.depth_enable = true;
        v8.depthFunc(513);
        v3.depth_func = 513;
        v8.depthMask(true);
        v3.depth_mask = true;
        v8.depthRange(0, 1);
        v25[0] = 0;
        v25[1] = 1;
        v8.disable(3024);
        v3.dither = false;
        v8.lineWidth(2);
        v3.lineWidth = 2;
        v85 = a0['scissorHeight'];
        v48.height = v85;
        v86 = a0['scissorWidth'];
        v48.width = v86;
        v87 = a0['scissorX'];
        v48.x = v87;
        v88 = a0['scissorY'];
        v48.y = v88;
        v89 = v48.x | 0;
        v90 = v48.y | 0;
        v91 = 'width' in v48 ? v48.width | 0 : v2.framebufferWidth - v89;
        v92 = 'height' in v48 ? v48.height | 0 : v2.framebufferHeight - v90;
        v8.scissor(v89, v90, v91, v92);
        v31[0] = v89;
        v31[1] = v90;
        v31[2] = v91;
        v31[3] = v92;
        v8.enable(3089);
        v3.scissor_enable = true;
        v93 = v3.profile;
        v3.profile = false;
        v8.useProgram($2.program);
        v15.setVAO(null);
        v94 = p01_04.location;
        v95 = v0[v94];
        if (!v95.buffer) {
          v8.enableVertexAttribArray(v94);
        }
        if (v95.type !== $3.dtype || v95.size !== 4 || v95.buffer !== $3 || v95.normalized !== false || v95.offset !== 0 || v95.stride !== 0) {
          v8.bindBuffer(34962, $3.buffer);
          v8.vertexAttribPointer(v94, 4, $3.dtype, false, 0, 0);
          v95.type = $3.dtype;
          v95.size = 4;
          v95.buffer = $3;
          v95.normalized = false;
          v95.offset = 0;
          v95.stride = 0;
        }
        v96 = p05_08.location;
        v97 = v0[v96];
        if (!v97.buffer) {
          v8.enableVertexAttribArray(v96);
        }
        if (v97.type !== $4.dtype || v97.size !== 4 || v97.buffer !== $4 || v97.normalized !== false || v97.offset !== 0 || v97.stride !== 0) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v96, 4, $4.dtype, false, 0, 0);
          v97.type = $4.dtype;
          v97.size = 4;
          v97.buffer = $4;
          v97.normalized = false;
          v97.offset = 0;
          v97.stride = 0;
        }
        v98 = p09_12.location;
        v99 = v0[v98];
        if (!v99.buffer) {
          v8.enableVertexAttribArray(v98);
        }
        if (v99.type !== $5.dtype || v99.size !== 4 || v99.buffer !== $5 || v99.normalized !== false || v99.offset !== 0 || v99.stride !== 0) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v98, 4, $5.dtype, false, 0, 0);
          v99.type = $5.dtype;
          v99.size = 4;
          v99.buffer = $5;
          v99.normalized = false;
          v99.offset = 0;
          v99.stride = 0;
        }
        v100 = p13_16.location;
        v101 = v0[v100];
        if (!v101.buffer) {
          v8.enableVertexAttribArray(v100);
        }
        if (v101.type !== $6.dtype || v101.size !== 4 || v101.buffer !== $6 || v101.normalized !== false || v101.offset !== 0 || v101.stride !== 0) {
          v8.bindBuffer(34962, $6.buffer);
          v8.vertexAttribPointer(v100, 4, $6.dtype, false, 0, 0);
          v101.type = $6.dtype;
          v101.size = 4;
          v101.buffer = $6;
          v101.normalized = false;
          v101.offset = 0;
          v101.stride = 0;
        }
        v102 = p17_20.location;
        v103 = v0[v102];
        if (!v103.buffer) {
          v8.enableVertexAttribArray(v102);
        }
        if (v103.type !== $7.dtype || v103.size !== 4 || v103.buffer !== $7 || v103.normalized !== false || v103.offset !== 0 || v103.stride !== 0) {
          v8.bindBuffer(34962, $7.buffer);
          v8.vertexAttribPointer(v102, 4, $7.dtype, false, 0, 0);
          v103.type = $7.dtype;
          v103.size = 4;
          v103.buffer = $7;
          v103.normalized = false;
          v103.offset = 0;
          v103.stride = 0;
        }
        v104 = p21_24.location;
        v105 = v0[v104];
        if (!v105.buffer) {
          v8.enableVertexAttribArray(v104);
        }
        if (v105.type !== $8.dtype || v105.size !== 4 || v105.buffer !== $8 || v105.normalized !== false || v105.offset !== 0 || v105.stride !== 0) {
          v8.bindBuffer(34962, $8.buffer);
          v8.vertexAttribPointer(v104, 4, $8.dtype, false, 0, 0);
          v105.type = $8.dtype;
          v105.size = 4;
          v105.buffer = $8;
          v105.normalized = false;
          v105.offset = 0;
          v105.stride = 0;
        }
        v106 = p25_28.location;
        v107 = v0[v106];
        if (!v107.buffer) {
          v8.enableVertexAttribArray(v106);
        }
        if (v107.type !== $9.dtype || v107.size !== 4 || v107.buffer !== $9 || v107.normalized !== false || v107.offset !== 0 || v107.stride !== 0) {
          v8.bindBuffer(34962, $9.buffer);
          v8.vertexAttribPointer(v106, 4, $9.dtype, false, 0, 0);
          v107.type = $9.dtype;
          v107.size = 4;
          v107.buffer = $9;
          v107.normalized = false;
          v107.offset = 0;
          v107.stride = 0;
        }
        v108 = p29_32.location;
        v109 = v0[v108];
        if (!v109.buffer) {
          v8.enableVertexAttribArray(v108);
        }
        if (v109.type !== $10.dtype || v109.size !== 4 || v109.buffer !== $10 || v109.normalized !== false || v109.offset !== 0 || v109.stride !== 0) {
          v8.bindBuffer(34962, $10.buffer);
          v8.vertexAttribPointer(v108, 4, $10.dtype, false, 0, 0);
          v109.type = $10.dtype;
          v109.size = 4;
          v109.buffer = $10;
          v109.normalized = false;
          v109.offset = 0;
          v109.stride = 0;
        }
        v110 = p33_36.location;
        v111 = v0[v110];
        if (!v111.buffer) {
          v8.enableVertexAttribArray(v110);
        }
        if (v111.type !== $11.dtype || v111.size !== 4 || v111.buffer !== $11 || v111.normalized !== false || v111.offset !== 0 || v111.stride !== 0) {
          v8.bindBuffer(34962, $11.buffer);
          v8.vertexAttribPointer(v110, 4, $11.dtype, false, 0, 0);
          v111.type = $11.dtype;
          v111.size = 4;
          v111.buffer = $11;
          v111.normalized = false;
          v111.offset = 0;
          v111.stride = 0;
        }
        v112 = p37_40.location;
        v113 = v0[v112];
        if (!v113.buffer) {
          v8.enableVertexAttribArray(v112);
        }
        if (v113.type !== $12.dtype || v113.size !== 4 || v113.buffer !== $12 || v113.normalized !== false || v113.offset !== 0 || v113.stride !== 0) {
          v8.bindBuffer(34962, $12.buffer);
          v8.vertexAttribPointer(v112, 4, $12.dtype, false, 0, 0);
          v113.type = $12.dtype;
          v113.size = 4;
          v113.buffer = $12;
          v113.normalized = false;
          v113.offset = 0;
          v113.stride = 0;
        }
        v114 = p41_44.location;
        v115 = v0[v114];
        if (!v115.buffer) {
          v8.enableVertexAttribArray(v114);
        }
        if (v115.type !== $13.dtype || v115.size !== 4 || v115.buffer !== $13 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v8.bindBuffer(34962, $13.buffer);
          v8.vertexAttribPointer(v114, 4, $13.dtype, false, 0, 0);
          v115.type = $13.dtype;
          v115.size = 4;
          v115.buffer = $13;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        v116 = p45_48.location;
        v117 = v0[v116];
        if (!v117.buffer) {
          v8.enableVertexAttribArray(v116);
        }
        if (v117.type !== $14.dtype || v117.size !== 4 || v117.buffer !== $14 || v117.normalized !== false || v117.offset !== 0 || v117.stride !== 0) {
          v8.bindBuffer(34962, $14.buffer);
          v8.vertexAttribPointer(v116, 4, $14.dtype, false, 0, 0);
          v117.type = $14.dtype;
          v117.size = 4;
          v117.buffer = $14;
          v117.normalized = false;
          v117.offset = 0;
          v117.stride = 0;
        }
        v118 = p49_52.location;
        v119 = v0[v118];
        if (!v119.buffer) {
          v8.enableVertexAttribArray(v118);
        }
        if (v119.type !== $15.dtype || v119.size !== 4 || v119.buffer !== $15 || v119.normalized !== false || v119.offset !== 0 || v119.stride !== 0) {
          v8.bindBuffer(34962, $15.buffer);
          v8.vertexAttribPointer(v118, 4, $15.dtype, false, 0, 0);
          v119.type = $15.dtype;
          v119.size = 4;
          v119.buffer = $15;
          v119.normalized = false;
          v119.offset = 0;
          v119.stride = 0;
        }
        v120 = p53_56.location;
        v121 = v0[v120];
        if (!v121.buffer) {
          v8.enableVertexAttribArray(v120);
        }
        if (v121.type !== $16.dtype || v121.size !== 4 || v121.buffer !== $16 || v121.normalized !== false || v121.offset !== 0 || v121.stride !== 0) {
          v8.bindBuffer(34962, $16.buffer);
          v8.vertexAttribPointer(v120, 4, $16.dtype, false, 0, 0);
          v121.type = $16.dtype;
          v121.size = 4;
          v121.buffer = $16;
          v121.normalized = false;
          v121.offset = 0;
          v121.stride = 0;
        }
        v122 = p57_60.location;
        v123 = v0[v122];
        if (!v123.buffer) {
          v8.enableVertexAttribArray(v122);
        }
        if (v123.type !== $17.dtype || v123.size !== 4 || v123.buffer !== $17 || v123.normalized !== false || v123.offset !== 0 || v123.stride !== 0) {
          v8.bindBuffer(34962, $17.buffer);
          v8.vertexAttribPointer(v122, 4, $17.dtype, false, 0, 0);
          v123.type = $17.dtype;
          v123.size = 4;
          v123.buffer = $17;
          v123.normalized = false;
          v123.offset = 0;
          v123.stride = 0;
        }
        v124 = colors.location;
        v125 = v0[v124];
        if (!v125.buffer) {
          v8.enableVertexAttribArray(v124);
        }
        if (v125.type !== $18.dtype || v125.size !== 4 || v125.buffer !== $18 || v125.normalized !== false || v125.offset !== 0 || v125.stride !== 0) {
          v8.bindBuffer(34962, $18.buffer);
          v8.vertexAttribPointer(v124, 4, $18.dtype, false, 0, 0);
          v125.type = $18.dtype;
          v125.size = 4;
          v125.buffer = $18;
          v125.normalized = false;
          v125.offset = 0;
          v125.stride = 0;
        }
        v126 = a0['dim0A'];
        v8.uniformMatrix4fv(dim0A.location, false, Array.isArray(v126) || v126 instanceof Float32Array ? v126 : (v127[0] = v126[0], v127[1] = v126[1], v127[2] = v126[2], v127[3] = v126[3], v127[4] = v126[4], v127[5] = v126[5], v127[6] = v126[6], v127[7] = v126[7], v127[8] = v126[8], v127[9] = v126[9], v127[10] = v126[10], v127[11] = v126[11], v127[12] = v126[12], v127[13] = v126[13], v127[14] = v126[14], v127[15] = v126[15], v127));
        v128 = a0['dim1A'];
        v8.uniformMatrix4fv(dim1A.location, false, Array.isArray(v128) || v128 instanceof Float32Array ? v128 : (v129[0] = v128[0], v129[1] = v128[1], v129[2] = v128[2], v129[3] = v128[3], v129[4] = v128[4], v129[5] = v128[5], v129[6] = v128[6], v129[7] = v128[7], v129[8] = v128[8], v129[9] = v128[9], v129[10] = v128[10], v129[11] = v128[11], v129[12] = v128[12], v129[13] = v128[13], v129[14] = v128[14], v129[15] = v128[15], v129));
        v130 = a0['dim0B'];
        v8.uniformMatrix4fv(dim0B.location, false, Array.isArray(v130) || v130 instanceof Float32Array ? v130 : (v131[0] = v130[0], v131[1] = v130[1], v131[2] = v130[2], v131[3] = v130[3], v131[4] = v130[4], v131[5] = v130[5], v131[6] = v130[6], v131[7] = v130[7], v131[8] = v130[8], v131[9] = v130[9], v131[10] = v130[10], v131[11] = v130[11], v131[12] = v130[12], v131[13] = v130[13], v131[14] = v130[14], v131[15] = v130[15], v131));
        v132 = a0['dim1B'];
        v8.uniformMatrix4fv(dim1B.location, false, Array.isArray(v132) || v132 instanceof Float32Array ? v132 : (v133[0] = v132[0], v133[1] = v132[1], v133[2] = v132[2], v133[3] = v132[3], v133[4] = v132[4], v133[5] = v132[5], v133[6] = v132[6], v133[7] = v132[7], v133[8] = v132[8], v133[9] = v132[9], v133[10] = v132[10], v133[11] = v132[11], v133[12] = v132[12], v133[13] = v132[13], v133[14] = v132[14], v133[15] = v132[15], v133));
        v134 = a0['dim0C'];
        v8.uniformMatrix4fv(dim0C.location, false, Array.isArray(v134) || v134 instanceof Float32Array ? v134 : (v135[0] = v134[0], v135[1] = v134[1], v135[2] = v134[2], v135[3] = v134[3], v135[4] = v134[4], v135[5] = v134[5], v135[6] = v134[6], v135[7] = v134[7], v135[8] = v134[8], v135[9] = v134[9], v135[10] = v134[10], v135[11] = v134[11], v135[12] = v134[12], v135[13] = v134[13], v135[14] = v134[14], v135[15] = v134[15], v135));
        v136 = a0['dim1C'];
        v8.uniformMatrix4fv(dim1C.location, false, Array.isArray(v136) || v136 instanceof Float32Array ? v136 : (v137[0] = v136[0], v137[1] = v136[1], v137[2] = v136[2], v137[3] = v136[3], v137[4] = v136[4], v137[5] = v136[5], v137[6] = v136[6], v137[7] = v136[7], v137[8] = v136[8], v137[9] = v136[9], v137[10] = v136[10], v137[11] = v136[11], v137[12] = v136[12], v137[13] = v136[13], v137[14] = v136[14], v137[15] = v136[15], v137));
        v138 = a0['dim0D'];
        v8.uniformMatrix4fv(dim0D.location, false, Array.isArray(v138) || v138 instanceof Float32Array ? v138 : (v139[0] = v138[0], v139[1] = v138[1], v139[2] = v138[2], v139[3] = v138[3], v139[4] = v138[4], v139[5] = v138[5], v139[6] = v138[6], v139[7] = v138[7], v139[8] = v138[8], v139[9] = v138[9], v139[10] = v138[10], v139[11] = v138[11], v139[12] = v138[12], v139[13] = v138[13], v139[14] = v138[14], v139[15] = v138[15], v139));
        v140 = a0['dim1D'];
        v8.uniformMatrix4fv(dim1D.location, false, Array.isArray(v140) || v140 instanceof Float32Array ? v140 : (v141[0] = v140[0], v141[1] = v140[1], v141[2] = v140[2], v141[3] = v140[3], v141[4] = v140[4], v141[5] = v140[5], v141[6] = v140[6], v141[7] = v140[7], v141[8] = v140[8], v141[9] = v140[9], v141[10] = v140[10], v141[11] = v140[11], v141[12] = v140[12], v141[13] = v140[13], v141[14] = v140[14], v141[15] = v140[15], v141));
        v142 = a0['loA'];
        v8.uniformMatrix4fv(loA.location, false, Array.isArray(v142) || v142 instanceof Float32Array ? v142 : (v143[0] = v142[0], v143[1] = v142[1], v143[2] = v142[2], v143[3] = v142[3], v143[4] = v142[4], v143[5] = v142[5], v143[6] = v142[6], v143[7] = v142[7], v143[8] = v142[8], v143[9] = v142[9], v143[10] = v142[10], v143[11] = v142[11], v143[12] = v142[12], v143[13] = v142[13], v143[14] = v142[14], v143[15] = v142[15], v143));
        v144 = a0['hiA'];
        v8.uniformMatrix4fv(hiA.location, false, Array.isArray(v144) || v144 instanceof Float32Array ? v144 : (v145[0] = v144[0], v145[1] = v144[1], v145[2] = v144[2], v145[3] = v144[3], v145[4] = v144[4], v145[5] = v144[5], v145[6] = v144[6], v145[7] = v144[7], v145[8] = v144[8], v145[9] = v144[9], v145[10] = v144[10], v145[11] = v144[11], v145[12] = v144[12], v145[13] = v144[13], v145[14] = v144[14], v145[15] = v144[15], v145));
        v146 = a0['loB'];
        v8.uniformMatrix4fv(loB.location, false, Array.isArray(v146) || v146 instanceof Float32Array ? v146 : (v147[0] = v146[0], v147[1] = v146[1], v147[2] = v146[2], v147[3] = v146[3], v147[4] = v146[4], v147[5] = v146[5], v147[6] = v146[6], v147[7] = v146[7], v147[8] = v146[8], v147[9] = v146[9], v147[10] = v146[10], v147[11] = v146[11], v147[12] = v146[12], v147[13] = v146[13], v147[14] = v146[14], v147[15] = v146[15], v147));
        v148 = a0['hiB'];
        v8.uniformMatrix4fv(hiB.location, false, Array.isArray(v148) || v148 instanceof Float32Array ? v148 : (v149[0] = v148[0], v149[1] = v148[1], v149[2] = v148[2], v149[3] = v148[3], v149[4] = v148[4], v149[5] = v148[5], v149[6] = v148[6], v149[7] = v148[7], v149[8] = v148[8], v149[9] = v148[9], v149[10] = v148[10], v149[11] = v148[11], v149[12] = v148[12], v149[13] = v148[13], v149[14] = v148[14], v149[15] = v148[15], v149));
        v150 = a0['loC'];
        v8.uniformMatrix4fv(loC.location, false, Array.isArray(v150) || v150 instanceof Float32Array ? v150 : (v151[0] = v150[0], v151[1] = v150[1], v151[2] = v150[2], v151[3] = v150[3], v151[4] = v150[4], v151[5] = v150[5], v151[6] = v150[6], v151[7] = v150[7], v151[8] = v150[8], v151[9] = v150[9], v151[10] = v150[10], v151[11] = v150[11], v151[12] = v150[12], v151[13] = v150[13], v151[14] = v150[14], v151[15] = v150[15], v151));
        v152 = a0['hiC'];
        v8.uniformMatrix4fv(hiC.location, false, Array.isArray(v152) || v152 instanceof Float32Array ? v152 : (v153[0] = v152[0], v153[1] = v152[1], v153[2] = v152[2], v153[3] = v152[3], v153[4] = v152[4], v153[5] = v152[5], v153[6] = v152[6], v153[7] = v152[7], v153[8] = v152[8], v153[9] = v152[9], v153[10] = v152[10], v153[11] = v152[11], v153[12] = v152[12], v153[13] = v152[13], v153[14] = v152[14], v153[15] = v152[15], v153));
        v154 = a0['loD'];
        v8.uniformMatrix4fv(loD.location, false, Array.isArray(v154) || v154 instanceof Float32Array ? v154 : (v155[0] = v154[0], v155[1] = v154[1], v155[2] = v154[2], v155[3] = v154[3], v155[4] = v154[4], v155[5] = v154[5], v155[6] = v154[6], v155[7] = v154[7], v155[8] = v154[8], v155[9] = v154[9], v155[10] = v154[10], v155[11] = v154[11], v155[12] = v154[12], v155[13] = v154[13], v155[14] = v154[14], v155[15] = v154[15], v155));
        v156 = a0['hiD'];
        v8.uniformMatrix4fv(hiD.location, false, Array.isArray(v156) || v156 instanceof Float32Array ? v156 : (v157[0] = v156[0], v157[1] = v156[1], v157[2] = v156[2], v157[3] = v156[3], v157[4] = v156[4], v157[5] = v156[5], v157[6] = v156[6], v157[7] = v156[7], v157[8] = v156[8], v157[9] = v156[9], v157[10] = v156[10], v157[11] = v156[11], v157[12] = v156[12], v157[13] = v156[13], v157[14] = v156[14], v157[15] = v156[15], v157));
        v158 = a0['resolution'];
        v159 = v158[0];
        v160 = v158[1];
        v8.uniform2f(resolution.location, v159, v160);
        v161 = a0['viewBoxPos'];
        v162 = v161[0];
        v163 = v161[1];
        v8.uniform2f(viewBoxPos.location, v162, v163);
        v164 = a0['viewBoxSize'];
        v165 = v164[0];
        v166 = v164[1];
        v8.uniform2f(viewBoxSize.location, v165, v166);
        v167 = a0['maskHeight'];
        v8.uniform1f(maskHeight.location, v167);
        v168 = a0['drwLayer'];
        v8.uniform1f(drwLayer.location, v168);
        v169 = a0['contextColor'];
        v170 = v169[0];
        v171 = v169[1];
        v172 = v169[2];
        v173 = v169[3];
        v8.uniform4f(contextColor.location, v170, v171, v172, v173);
        v174 = a0['maskTexture'];
        if (v174 && v174._reglType === 'framebuffer') {
          v174 = v174.color[0];
        }
        v175 = v174._texture;
        v8.uniform1i(maskTexture.location, v175.bind());
        v8.uniform1i(palette.location, $19.bind());
        v176 = v4.elements;
        if (v176) {
          v8.bindBuffer(34963, v176.buffer.buffer);
        } else if (v15.currentVAO) {
          v176 = v5.getElements(v15.currentVAO.elements);
          if (v176) v8.bindBuffer(34963, v176.buffer.buffer);
        }
        v177 = a0['offset'];
        v178 = a0['count'];
        if (v178) {
          if (v176) {
            v8.drawElements(1, v178, v176.type, v177 << (v176.type - 5121 >> 1));
          } else {
            v8.drawArrays(1, v177, v178);
          }
          v3.dirty = true;
          v15.setVAO(null);
          v2.viewportWidth = v83;
          v2.viewportHeight = v84;
          v3.profile = v93;
          v175.unbind();
          $19.unbind();
        }
      },
      'scope': function (a0, a1, a2) {
        var v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472;
        v179 = a0['viewportHeight'];
        v47.height = v179;
        v180 = a0['viewportWidth'];
        v47.width = v180;
        v181 = a0['viewportX'];
        v47.x = v181;
        v182 = a0['viewportY'];
        v47.y = v182;
        v183 = v47.x | 0;
        v184 = v47.y | 0;
        v185 = 'width' in v47 ? v47.width | 0 : v2.framebufferWidth - v183;
        v186 = 'height' in v47 ? v47.height | 0 : v2.framebufferHeight - v184;
        v187 = v2.viewportWidth;
        v2.viewportWidth = v185;
        v188 = v2.viewportHeight;
        v2.viewportHeight = v186;
        v189 = v38[0];
        v38[0] = v183;
        v190 = v38[1];
        v38[1] = v184;
        v191 = v38[2];
        v38[2] = v185;
        v192 = v38[3];
        v38[3] = v186;
        v193 = v16[0];
        v16[0] = 0;
        v194 = v16[1];
        v16[1] = 0;
        v195 = v16[2];
        v16[2] = 0;
        v196 = v16[3];
        v16[3] = 0;
        v197 = v10.blend_enable;
        v10.blend_enable = false;
        v198 = v18[0];
        v18[0] = 32774;
        v199 = v18[1];
        v18[1] = 32774;
        v200 = v20[0];
        v20[0] = 770;
        v201 = v20[1];
        v20[1] = 771;
        v202 = v20[2];
        v20[2] = 1;
        v203 = v20[3];
        v20[3] = 1;
        v204 = v10.cull_enable;
        v10.cull_enable = true;
        v205 = v10.cull_face;
        v10.cull_face = 1029;
        v206 = v10.depth_enable;
        v10.depth_enable = true;
        v207 = v10.depth_func;
        v10.depth_func = 513;
        v208 = v10.depth_mask;
        v10.depth_mask = true;
        v209 = v24[0];
        v24[0] = 0;
        v210 = v24[1];
        v24[1] = 1;
        v211 = v10.dither;
        v10.dither = false;
        v212 = v10.lineWidth;
        v10.lineWidth = 2;
        v213 = a0['scissorHeight'];
        v48.height = v213;
        v214 = a0['scissorWidth'];
        v48.width = v214;
        v215 = a0['scissorX'];
        v48.x = v215;
        v216 = a0['scissorY'];
        v48.y = v216;
        v217 = v48.x | 0;
        v218 = v48.y | 0;
        v219 = 'width' in v48 ? v48.width | 0 : v2.framebufferWidth - v217;
        v220 = 'height' in v48 ? v48.height | 0 : v2.framebufferHeight - v218;
        v221 = v30[0];
        v30[0] = v217;
        v222 = v30[1];
        v30[1] = v218;
        v223 = v30[2];
        v30[2] = v219;
        v224 = v30[3];
        v30[3] = v220;
        v225 = v10.scissor_enable;
        v10.scissor_enable = true;
        v226 = v3.profile;
        v3.profile = false;
        v227 = a0['offset'];
        v228 = v4.offset;
        v4.offset = v227;
        v229 = a0['count'];
        v230 = v4.count;
        v4.count = v229;
        v231 = v4.primitive;
        v4.primitive = 1;
        v232 = a0['contextColor'];
        v233 = v14[24];
        v14[24] = v232;
        v234 = a0['dim0A'];
        v235 = v14[3];
        v14[3] = v234;
        v236 = a0['dim0B'];
        v237 = v14[5];
        v14[5] = v236;
        v238 = a0['dim0C'];
        v239 = v14[7];
        v14[7] = v238;
        v240 = a0['dim0D'];
        v241 = v14[9];
        v14[9] = v240;
        v242 = a0['dim1A'];
        v243 = v14[4];
        v14[4] = v242;
        v244 = a0['dim1B'];
        v245 = v14[6];
        v14[6] = v244;
        v246 = a0['dim1C'];
        v247 = v14[8];
        v14[8] = v246;
        v248 = a0['dim1D'];
        v249 = v14[10];
        v14[10] = v248;
        v250 = a0['drwLayer'];
        v251 = v14[23];
        v14[23] = v250;
        v252 = a0['hiA'];
        v253 = v14[12];
        v14[12] = v252;
        v254 = a0['hiB'];
        v255 = v14[14];
        v14[14] = v254;
        v256 = a0['hiC'];
        v257 = v14[16];
        v14[16] = v256;
        v258 = a0['hiD'];
        v259 = v14[18];
        v14[18] = v258;
        v260 = a0['loA'];
        v261 = v14[11];
        v14[11] = v260;
        v262 = a0['loB'];
        v263 = v14[13];
        v14[13] = v262;
        v264 = a0['loC'];
        v265 = v14[15];
        v14[15] = v264;
        v266 = a0['loD'];
        v267 = v14[17];
        v14[17] = v266;
        v268 = a0['maskHeight'];
        v269 = v14[22];
        v14[22] = v268;
        v270 = a0['maskTexture'];
        v271 = v14[25];
        v14[25] = v270;
        v272 = v14[26];
        v14[26] = $20;
        v273 = a0['resolution'];
        v274 = v14[19];
        v14[19] = v273;
        v275 = a0['viewBoxPos'];
        v276 = v14[20];
        v14[20] = v275;
        v277 = a0['viewBoxSize'];
        v278 = v14[21];
        v14[21] = v277;
        v279 = $21.buffer;
        $21.buffer = $18;
        v280 = $21.divisor;
        $21.divisor = 0;
        v281 = $21.normalized;
        $21.normalized = false;
        v282 = $21.offset;
        $21.offset = 0;
        v283 = $21.size;
        $21.size = 0;
        v284 = $21.state;
        $21.state = 1;
        v285 = $21.stride;
        $21.stride = 0;
        v286 = $21.type;
        $21.type = $18.dtype;
        v287 = $21.w;
        $21.w = 0;
        v288 = $21.x;
        $21.x = 0;
        v289 = $21.y;
        $21.y = 0;
        v290 = $21.z;
        $21.z = 0;
        v291 = $22.buffer;
        $22.buffer = $3;
        v292 = $22.divisor;
        $22.divisor = 0;
        v293 = $22.normalized;
        $22.normalized = false;
        v294 = $22.offset;
        $22.offset = 0;
        v295 = $22.size;
        $22.size = 0;
        v296 = $22.state;
        $22.state = 1;
        v297 = $22.stride;
        $22.stride = 0;
        v298 = $22.type;
        $22.type = $3.dtype;
        v299 = $22.w;
        $22.w = 0;
        v300 = $22.x;
        $22.x = 0;
        v301 = $22.y;
        $22.y = 0;
        v302 = $22.z;
        $22.z = 0;
        v303 = $23.buffer;
        $23.buffer = $4;
        v304 = $23.divisor;
        $23.divisor = 0;
        v305 = $23.normalized;
        $23.normalized = false;
        v306 = $23.offset;
        $23.offset = 0;
        v307 = $23.size;
        $23.size = 0;
        v308 = $23.state;
        $23.state = 1;
        v309 = $23.stride;
        $23.stride = 0;
        v310 = $23.type;
        $23.type = $4.dtype;
        v311 = $23.w;
        $23.w = 0;
        v312 = $23.x;
        $23.x = 0;
        v313 = $23.y;
        $23.y = 0;
        v314 = $23.z;
        $23.z = 0;
        v315 = $24.buffer;
        $24.buffer = $5;
        v316 = $24.divisor;
        $24.divisor = 0;
        v317 = $24.normalized;
        $24.normalized = false;
        v318 = $24.offset;
        $24.offset = 0;
        v319 = $24.size;
        $24.size = 0;
        v320 = $24.state;
        $24.state = 1;
        v321 = $24.stride;
        $24.stride = 0;
        v322 = $24.type;
        $24.type = $5.dtype;
        v323 = $24.w;
        $24.w = 0;
        v324 = $24.x;
        $24.x = 0;
        v325 = $24.y;
        $24.y = 0;
        v326 = $24.z;
        $24.z = 0;
        v327 = $25.buffer;
        $25.buffer = $6;
        v328 = $25.divisor;
        $25.divisor = 0;
        v329 = $25.normalized;
        $25.normalized = false;
        v330 = $25.offset;
        $25.offset = 0;
        v331 = $25.size;
        $25.size = 0;
        v332 = $25.state;
        $25.state = 1;
        v333 = $25.stride;
        $25.stride = 0;
        v334 = $25.type;
        $25.type = $6.dtype;
        v335 = $25.w;
        $25.w = 0;
        v336 = $25.x;
        $25.x = 0;
        v337 = $25.y;
        $25.y = 0;
        v338 = $25.z;
        $25.z = 0;
        v339 = $26.buffer;
        $26.buffer = $7;
        v340 = $26.divisor;
        $26.divisor = 0;
        v341 = $26.normalized;
        $26.normalized = false;
        v342 = $26.offset;
        $26.offset = 0;
        v343 = $26.size;
        $26.size = 0;
        v344 = $26.state;
        $26.state = 1;
        v345 = $26.stride;
        $26.stride = 0;
        v346 = $26.type;
        $26.type = $7.dtype;
        v347 = $26.w;
        $26.w = 0;
        v348 = $26.x;
        $26.x = 0;
        v349 = $26.y;
        $26.y = 0;
        v350 = $26.z;
        $26.z = 0;
        v351 = $27.buffer;
        $27.buffer = $8;
        v352 = $27.divisor;
        $27.divisor = 0;
        v353 = $27.normalized;
        $27.normalized = false;
        v354 = $27.offset;
        $27.offset = 0;
        v355 = $27.size;
        $27.size = 0;
        v356 = $27.state;
        $27.state = 1;
        v357 = $27.stride;
        $27.stride = 0;
        v358 = $27.type;
        $27.type = $8.dtype;
        v359 = $27.w;
        $27.w = 0;
        v360 = $27.x;
        $27.x = 0;
        v361 = $27.y;
        $27.y = 0;
        v362 = $27.z;
        $27.z = 0;
        v363 = $28.buffer;
        $28.buffer = $9;
        v364 = $28.divisor;
        $28.divisor = 0;
        v365 = $28.normalized;
        $28.normalized = false;
        v366 = $28.offset;
        $28.offset = 0;
        v367 = $28.size;
        $28.size = 0;
        v368 = $28.state;
        $28.state = 1;
        v369 = $28.stride;
        $28.stride = 0;
        v370 = $28.type;
        $28.type = $9.dtype;
        v371 = $28.w;
        $28.w = 0;
        v372 = $28.x;
        $28.x = 0;
        v373 = $28.y;
        $28.y = 0;
        v374 = $28.z;
        $28.z = 0;
        v375 = $29.buffer;
        $29.buffer = $10;
        v376 = $29.divisor;
        $29.divisor = 0;
        v377 = $29.normalized;
        $29.normalized = false;
        v378 = $29.offset;
        $29.offset = 0;
        v379 = $29.size;
        $29.size = 0;
        v380 = $29.state;
        $29.state = 1;
        v381 = $29.stride;
        $29.stride = 0;
        v382 = $29.type;
        $29.type = $10.dtype;
        v383 = $29.w;
        $29.w = 0;
        v384 = $29.x;
        $29.x = 0;
        v385 = $29.y;
        $29.y = 0;
        v386 = $29.z;
        $29.z = 0;
        v387 = $30.buffer;
        $30.buffer = $11;
        v388 = $30.divisor;
        $30.divisor = 0;
        v389 = $30.normalized;
        $30.normalized = false;
        v390 = $30.offset;
        $30.offset = 0;
        v391 = $30.size;
        $30.size = 0;
        v392 = $30.state;
        $30.state = 1;
        v393 = $30.stride;
        $30.stride = 0;
        v394 = $30.type;
        $30.type = $11.dtype;
        v395 = $30.w;
        $30.w = 0;
        v396 = $30.x;
        $30.x = 0;
        v397 = $30.y;
        $30.y = 0;
        v398 = $30.z;
        $30.z = 0;
        v399 = $31.buffer;
        $31.buffer = $12;
        v400 = $31.divisor;
        $31.divisor = 0;
        v401 = $31.normalized;
        $31.normalized = false;
        v402 = $31.offset;
        $31.offset = 0;
        v403 = $31.size;
        $31.size = 0;
        v404 = $31.state;
        $31.state = 1;
        v405 = $31.stride;
        $31.stride = 0;
        v406 = $31.type;
        $31.type = $12.dtype;
        v407 = $31.w;
        $31.w = 0;
        v408 = $31.x;
        $31.x = 0;
        v409 = $31.y;
        $31.y = 0;
        v410 = $31.z;
        $31.z = 0;
        v411 = $32.buffer;
        $32.buffer = $13;
        v412 = $32.divisor;
        $32.divisor = 0;
        v413 = $32.normalized;
        $32.normalized = false;
        v414 = $32.offset;
        $32.offset = 0;
        v415 = $32.size;
        $32.size = 0;
        v416 = $32.state;
        $32.state = 1;
        v417 = $32.stride;
        $32.stride = 0;
        v418 = $32.type;
        $32.type = $13.dtype;
        v419 = $32.w;
        $32.w = 0;
        v420 = $32.x;
        $32.x = 0;
        v421 = $32.y;
        $32.y = 0;
        v422 = $32.z;
        $32.z = 0;
        v423 = $33.buffer;
        $33.buffer = $14;
        v424 = $33.divisor;
        $33.divisor = 0;
        v425 = $33.normalized;
        $33.normalized = false;
        v426 = $33.offset;
        $33.offset = 0;
        v427 = $33.size;
        $33.size = 0;
        v428 = $33.state;
        $33.state = 1;
        v429 = $33.stride;
        $33.stride = 0;
        v430 = $33.type;
        $33.type = $14.dtype;
        v431 = $33.w;
        $33.w = 0;
        v432 = $33.x;
        $33.x = 0;
        v433 = $33.y;
        $33.y = 0;
        v434 = $33.z;
        $33.z = 0;
        v435 = $34.buffer;
        $34.buffer = $15;
        v436 = $34.divisor;
        $34.divisor = 0;
        v437 = $34.normalized;
        $34.normalized = false;
        v438 = $34.offset;
        $34.offset = 0;
        v439 = $34.size;
        $34.size = 0;
        v440 = $34.state;
        $34.state = 1;
        v441 = $34.stride;
        $34.stride = 0;
        v442 = $34.type;
        $34.type = $15.dtype;
        v443 = $34.w;
        $34.w = 0;
        v444 = $34.x;
        $34.x = 0;
        v445 = $34.y;
        $34.y = 0;
        v446 = $34.z;
        $34.z = 0;
        v447 = $35.buffer;
        $35.buffer = $16;
        v448 = $35.divisor;
        $35.divisor = 0;
        v449 = $35.normalized;
        $35.normalized = false;
        v450 = $35.offset;
        $35.offset = 0;
        v451 = $35.size;
        $35.size = 0;
        v452 = $35.state;
        $35.state = 1;
        v453 = $35.stride;
        $35.stride = 0;
        v454 = $35.type;
        $35.type = $16.dtype;
        v455 = $35.w;
        $35.w = 0;
        v456 = $35.x;
        $35.x = 0;
        v457 = $35.y;
        $35.y = 0;
        v458 = $35.z;
        $35.z = 0;
        v459 = $36.buffer;
        $36.buffer = $17;
        v460 = $36.divisor;
        $36.divisor = 0;
        v461 = $36.normalized;
        $36.normalized = false;
        v462 = $36.offset;
        $36.offset = 0;
        v463 = $36.size;
        $36.size = 0;
        v464 = $36.state;
        $36.state = 1;
        v465 = $36.stride;
        $36.stride = 0;
        v466 = $36.type;
        $36.type = $17.dtype;
        v467 = $36.w;
        $36.w = 0;
        v468 = $36.x;
        $36.x = 0;
        v469 = $36.y;
        $36.y = 0;
        v470 = $36.z;
        $36.z = 0;
        v471 = v11.vert;
        v11.vert = 2;
        v472 = v11.frag;
        v11.frag = 1;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v187;
        v2.viewportHeight = v188;
        v38[0] = v189;
        v38[1] = v190;
        v38[2] = v191;
        v38[3] = v192;
        v16[0] = v193;
        v16[1] = v194;
        v16[2] = v195;
        v16[3] = v196;
        v10.blend_enable = v197;
        v18[0] = v198;
        v18[1] = v199;
        v20[0] = v200;
        v20[1] = v201;
        v20[2] = v202;
        v20[3] = v203;
        v10.cull_enable = v204;
        v10.cull_face = v205;
        v10.depth_enable = v206;
        v10.depth_func = v207;
        v10.depth_mask = v208;
        v24[0] = v209;
        v24[1] = v210;
        v10.dither = v211;
        v10.lineWidth = v212;
        v30[0] = v221;
        v30[1] = v222;
        v30[2] = v223;
        v30[3] = v224;
        v10.scissor_enable = v225;
        v3.profile = v226;
        v4.offset = v228;
        v4.count = v230;
        v4.primitive = v231;
        v14[24] = v233;
        v14[3] = v235;
        v14[5] = v237;
        v14[7] = v239;
        v14[9] = v241;
        v14[4] = v243;
        v14[6] = v245;
        v14[8] = v247;
        v14[10] = v249;
        v14[23] = v251;
        v14[12] = v253;
        v14[14] = v255;
        v14[16] = v257;
        v14[18] = v259;
        v14[11] = v261;
        v14[13] = v263;
        v14[15] = v265;
        v14[17] = v267;
        v14[22] = v269;
        v14[25] = v271;
        v14[26] = v272;
        v14[19] = v274;
        v14[20] = v276;
        v14[21] = v278;
        $21.buffer = v279;
        $21.divisor = v280;
        $21.normalized = v281;
        $21.offset = v282;
        $21.size = v283;
        $21.state = v284;
        $21.stride = v285;
        $21.type = v286;
        $21.w = v287;
        $21.x = v288;
        $21.y = v289;
        $21.z = v290;
        $22.buffer = v291;
        $22.divisor = v292;
        $22.normalized = v293;
        $22.offset = v294;
        $22.size = v295;
        $22.state = v296;
        $22.stride = v297;
        $22.type = v298;
        $22.w = v299;
        $22.x = v300;
        $22.y = v301;
        $22.z = v302;
        $23.buffer = v303;
        $23.divisor = v304;
        $23.normalized = v305;
        $23.offset = v306;
        $23.size = v307;
        $23.state = v308;
        $23.stride = v309;
        $23.type = v310;
        $23.w = v311;
        $23.x = v312;
        $23.y = v313;
        $23.z = v314;
        $24.buffer = v315;
        $24.divisor = v316;
        $24.normalized = v317;
        $24.offset = v318;
        $24.size = v319;
        $24.state = v320;
        $24.stride = v321;
        $24.type = v322;
        $24.w = v323;
        $24.x = v324;
        $24.y = v325;
        $24.z = v326;
        $25.buffer = v327;
        $25.divisor = v328;
        $25.normalized = v329;
        $25.offset = v330;
        $25.size = v331;
        $25.state = v332;
        $25.stride = v333;
        $25.type = v334;
        $25.w = v335;
        $25.x = v336;
        $25.y = v337;
        $25.z = v338;
        $26.buffer = v339;
        $26.divisor = v340;
        $26.normalized = v341;
        $26.offset = v342;
        $26.size = v343;
        $26.state = v344;
        $26.stride = v345;
        $26.type = v346;
        $26.w = v347;
        $26.x = v348;
        $26.y = v349;
        $26.z = v350;
        $27.buffer = v351;
        $27.divisor = v352;
        $27.normalized = v353;
        $27.offset = v354;
        $27.size = v355;
        $27.state = v356;
        $27.stride = v357;
        $27.type = v358;
        $27.w = v359;
        $27.x = v360;
        $27.y = v361;
        $27.z = v362;
        $28.buffer = v363;
        $28.divisor = v364;
        $28.normalized = v365;
        $28.offset = v366;
        $28.size = v367;
        $28.state = v368;
        $28.stride = v369;
        $28.type = v370;
        $28.w = v371;
        $28.x = v372;
        $28.y = v373;
        $28.z = v374;
        $29.buffer = v375;
        $29.divisor = v376;
        $29.normalized = v377;
        $29.offset = v378;
        $29.size = v379;
        $29.state = v380;
        $29.stride = v381;
        $29.type = v382;
        $29.w = v383;
        $29.x = v384;
        $29.y = v385;
        $29.z = v386;
        $30.buffer = v387;
        $30.divisor = v388;
        $30.normalized = v389;
        $30.offset = v390;
        $30.size = v391;
        $30.state = v392;
        $30.stride = v393;
        $30.type = v394;
        $30.w = v395;
        $30.x = v396;
        $30.y = v397;
        $30.z = v398;
        $31.buffer = v399;
        $31.divisor = v400;
        $31.normalized = v401;
        $31.offset = v402;
        $31.size = v403;
        $31.state = v404;
        $31.stride = v405;
        $31.type = v406;
        $31.w = v407;
        $31.x = v408;
        $31.y = v409;
        $31.z = v410;
        $32.buffer = v411;
        $32.divisor = v412;
        $32.normalized = v413;
        $32.offset = v414;
        $32.size = v415;
        $32.state = v416;
        $32.stride = v417;
        $32.type = v418;
        $32.w = v419;
        $32.x = v420;
        $32.y = v421;
        $32.z = v422;
        $33.buffer = v423;
        $33.divisor = v424;
        $33.normalized = v425;
        $33.offset = v426;
        $33.size = v427;
        $33.state = v428;
        $33.stride = v429;
        $33.type = v430;
        $33.w = v431;
        $33.x = v432;
        $33.y = v433;
        $33.z = v434;
        $34.buffer = v435;
        $34.divisor = v436;
        $34.normalized = v437;
        $34.offset = v438;
        $34.size = v439;
        $34.state = v440;
        $34.stride = v441;
        $34.type = v442;
        $34.w = v443;
        $34.x = v444;
        $34.y = v445;
        $34.z = v446;
        $35.buffer = v447;
        $35.divisor = v448;
        $35.normalized = v449;
        $35.offset = v450;
        $35.size = v451;
        $35.state = v452;
        $35.stride = v453;
        $35.type = v454;
        $35.w = v455;
        $35.x = v456;
        $35.y = v457;
        $35.z = v458;
        $36.buffer = v459;
        $36.divisor = v460;
        $36.normalized = v461;
        $36.offset = v462;
        $36.size = v463;
        $36.state = v464;
        $36.stride = v465;
        $36.type = v466;
        $36.w = v467;
        $36.x = v468;
        $36.y = v469;
        $36.z = v470;
        v11.vert = v471;
        v11.frag = v472;
        v3.dirty = true;
      }

    };
  },
  '$1': function ($0, $1) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v74, v75, v76, v77, v78, v79, v80, v81, v88, v89, v94, v95, v96, v97, v98, v99, v100, v101, v104, v105, v106, v107, v108, v109;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v74 = v10.blend_color;
    v75 = v3.blend_color;
    v76 = v10.blend_equation;
    v77 = v3.blend_equation;
    v78 = v10.blend_func;
    v79 = v3.blend_func;
    v80 = v10.colorMask;
    v81 = v3.colorMask;
    v88 = v10.depth_range;
    v89 = v3.depth_range;
    v94 = v10.polygonOffset_offset;
    v95 = v3.polygonOffset_offset;
    v96 = v10.sample_coverage;
    v97 = v3.sample_coverage;
    v98 = v10.scissor_box;
    v99 = v3.scissor_box;
    v100 = v10.stencil_func;
    v101 = v3.stencil_func;
    v104 = v10.stencil_opBack;
    v105 = v3.stencil_opBack;
    v106 = v10.stencil_opFront;
    v107 = v3.stencil_opFront;
    v108 = v10.viewport;
    v109 = v3.viewport;
    return {
      'poll': function () {
        var v47;
        var v65, v66, v67, v68, v69, v70, v71, v72, v73, v82, v83, v84, v85, v86, v87, v90, v91, v92, v93, v102, v103;
        v3.dirty = false;
        v65 = v10.blend_enable;
        v66 = v10.cull_enable;
        v67 = v10.depth_enable;
        v68 = v10.dither;
        v69 = v10.polygonOffset_enable;
        v70 = v10.sample_alpha;
        v71 = v10.sample_enable;
        v72 = v10.scissor_enable;
        v73 = v10.stencil_enable;
        v82 = v10.cull_face;
        v83 = v3.cull_face;
        v84 = v10.depth_func;
        v85 = v3.depth_func;
        v86 = v10.depth_mask;
        v87 = v3.depth_mask;
        v90 = v10.frontFace;
        v91 = v3.frontFace;
        v92 = v10.lineWidth;
        v93 = v3.lineWidth;
        v102 = v10.stencil_mask;
        v103 = v3.stencil_mask;
        v47 = v7.next;
        if (v47 !== v7.cur) {
          if (v47) {
            v8.bindFramebuffer(36160, v47.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v47;
        }
        if (v65 !== v3.blend_enable) {
          if (v65) {
            v8.enable(3042);
          } else {
            v8.disable(3042);
          }
          v3.blend_enable = v65;
        }
        if (v66 !== v3.cull_enable) {
          if (v66) {
            v8.enable(2884);
          } else {
            v8.disable(2884);
          }
          v3.cull_enable = v66;
        }
        if (v67 !== v3.depth_enable) {
          if (v67) {
            v8.enable(2929);
          } else {
            v8.disable(2929);
          }
          v3.depth_enable = v67;
        }
        if (v68 !== v3.dither) {
          if (v68) {
            v8.enable(3024);
          } else {
            v8.disable(3024);
          }
          v3.dither = v68;
        }
        if (v69 !== v3.polygonOffset_enable) {
          if (v69) {
            v8.enable(32823);
          } else {
            v8.disable(32823);
          }
          v3.polygonOffset_enable = v69;
        }
        if (v70 !== v3.sample_alpha) {
          if (v70) {
            v8.enable(32926);
          } else {
            v8.disable(32926);
          }
          v3.sample_alpha = v70;
        }
        if (v71 !== v3.sample_enable) {
          if (v71) {
            v8.enable(32928);
          } else {
            v8.disable(32928);
          }
          v3.sample_enable = v71;
        }
        if (v72 !== v3.scissor_enable) {
          if (v72) {
            v8.enable(3089);
          } else {
            v8.disable(3089);
          }
          v3.scissor_enable = v72;
        }
        if (v73 !== v3.stencil_enable) {
          if (v73) {
            v8.enable(2960);
          } else {
            v8.disable(2960);
          }
          v3.stencil_enable = v73;
        }
        if (v74[0] !== v75[0] || v74[1] !== v75[1] || v74[2] !== v75[2] || v74[3] !== v75[3]) {
          v8.blendColor(v74[0], v74[1], v74[2], v74[3]);
          v75[0] = v74[0];
          v75[1] = v74[1];
          v75[2] = v74[2];
          v75[3] = v74[3];
        }
        if (v76[0] !== v77[0] || v76[1] !== v77[1]) {
          v8.blendEquationSeparate(v76[0], v76[1]);
          v77[0] = v76[0];
          v77[1] = v76[1];
        }
        if (v78[0] !== v79[0] || v78[1] !== v79[1] || v78[2] !== v79[2] || v78[3] !== v79[3]) {
          v8.blendFuncSeparate(v78[0], v78[1], v78[2], v78[3]);
          v79[0] = v78[0];
          v79[1] = v78[1];
          v79[2] = v78[2];
          v79[3] = v78[3];
        }
        if (v80[0] !== v81[0] || v80[1] !== v81[1] || v80[2] !== v81[2] || v80[3] !== v81[3]) {
          v8.colorMask(v80[0], v80[1], v80[2], v80[3]);
          v81[0] = v80[0];
          v81[1] = v80[1];
          v81[2] = v80[2];
          v81[3] = v80[3];
        }
        if (v82 !== v83) {
          v8.cullFace(v82);
          v3.cull_face = v82;
        }
        if (v84 !== v85) {
          v8.depthFunc(v84);
          v3.depth_func = v84;
        }
        if (v86 !== v87) {
          v8.depthMask(v86);
          v3.depth_mask = v86;
        }
        if (v88[0] !== v89[0] || v88[1] !== v89[1]) {
          v8.depthRange(v88[0], v88[1]);
          v89[0] = v88[0];
          v89[1] = v88[1];
        }
        if (v90 !== v91) {
          v8.frontFace(v90);
          v3.frontFace = v90;
        }
        if (v92 !== v93) {
          v8.lineWidth(v92);
          v3.lineWidth = v92;
        }
        if (v94[0] !== v95[0] || v94[1] !== v95[1]) {
          v8.polygonOffset(v94[0], v94[1]);
          v95[0] = v94[0];
          v95[1] = v94[1];
        }
        if (v96[0] !== v97[0] || v96[1] !== v97[1]) {
          v8.sampleCoverage(v96[0], v96[1]);
          v97[0] = v96[0];
          v97[1] = v96[1];
        }
        if (v98[0] !== v99[0] || v98[1] !== v99[1] || v98[2] !== v99[2] || v98[3] !== v99[3]) {
          v8.scissor(v98[0], v98[1], v98[2], v98[3]);
          v99[0] = v98[0];
          v99[1] = v98[1];
          v99[2] = v98[2];
          v99[3] = v98[3];
        }
        if (v100[0] !== v101[0] || v100[1] !== v101[1] || v100[2] !== v101[2]) {
          v8.stencilFunc(v100[0], v100[1], v100[2]);
          v101[0] = v100[0];
          v101[1] = v100[1];
          v101[2] = v100[2];
        }
        if (v102 !== v103) {
          v8.stencilMask(v102);
          v3.stencil_mask = v102;
        }
        if (v104[0] !== v105[0] || v104[1] !== v105[1] || v104[2] !== v105[2] || v104[3] !== v105[3]) {
          v8.stencilOpSeparate(v104[0], v104[1], v104[2], v104[3]);
          v105[0] = v104[0];
          v105[1] = v104[1];
          v105[2] = v104[2];
          v105[3] = v104[3];
        }
        if (v106[0] !== v107[0] || v106[1] !== v107[1] || v106[2] !== v107[2] || v106[3] !== v107[3]) {
          v8.stencilOpSeparate(v106[0], v106[1], v106[2], v106[3]);
          v107[0] = v106[0];
          v107[1] = v106[1];
          v107[2] = v106[2];
          v107[3] = v106[3];
        }
        if (v108[0] !== v109[0] || v108[1] !== v109[1] || v108[2] !== v109[2] || v108[3] !== v109[3]) {
          v8.viewport(v108[0], v108[1], v108[2], v108[3]);
          v109[0] = v108[0];
          v109[1] = v108[1];
          v109[2] = v108[2];
          v109[3] = v108[3];
        }
      },
      'refresh': function () {
        var v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64;
        var v65, v66, v67, v68, v69, v70, v71, v72, v73, v82, v83, v84, v85, v86, v87, v90, v91, v92, v93, v102, v103;
        v3.dirty = false;
        v65 = v10.blend_enable;
        v66 = v10.cull_enable;
        v67 = v10.depth_enable;
        v68 = v10.dither;
        v69 = v10.polygonOffset_enable;
        v70 = v10.sample_alpha;
        v71 = v10.sample_enable;
        v72 = v10.scissor_enable;
        v73 = v10.stencil_enable;
        v82 = v10.cull_face;
        v83 = v3.cull_face;
        v84 = v10.depth_func;
        v85 = v3.depth_func;
        v86 = v10.depth_mask;
        v87 = v3.depth_mask;
        v90 = v10.frontFace;
        v91 = v3.frontFace;
        v92 = v10.lineWidth;
        v93 = v3.lineWidth;
        v102 = v10.stencil_mask;
        v103 = v3.stencil_mask;
        v48 = v7.next;
        if (v48) {
          v8.bindFramebuffer(36160, v48.framebuffer);
        } else {
          v8.bindFramebuffer(36160, null);
        }
        v7.cur = v48;
        v49 = v0[0];
        if (v49.buffer) {
          v8.enableVertexAttribArray(0);
          v8.bindBuffer(34962, v49.buffer.buffer);
          v8.vertexAttribPointer(0, v49.size, v49.type, v49.normalized, v49.stride, v49.offset);
        } else {
          v8.disableVertexAttribArray(0);
          v8.vertexAttrib4f(0, v49.x, v49.y, v49.z, v49.w);
          v49.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(0, v49.divisor);
        v50 = v0[1];
        if (v50.buffer) {
          v8.enableVertexAttribArray(1);
          v8.bindBuffer(34962, v50.buffer.buffer);
          v8.vertexAttribPointer(1, v50.size, v50.type, v50.normalized, v50.stride, v50.offset);
        } else {
          v8.disableVertexAttribArray(1);
          v8.vertexAttrib4f(1, v50.x, v50.y, v50.z, v50.w);
          v50.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(1, v50.divisor);
        v51 = v0[2];
        if (v51.buffer) {
          v8.enableVertexAttribArray(2);
          v8.bindBuffer(34962, v51.buffer.buffer);
          v8.vertexAttribPointer(2, v51.size, v51.type, v51.normalized, v51.stride, v51.offset);
        } else {
          v8.disableVertexAttribArray(2);
          v8.vertexAttrib4f(2, v51.x, v51.y, v51.z, v51.w);
          v51.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(2, v51.divisor);
        v52 = v0[3];
        if (v52.buffer) {
          v8.enableVertexAttribArray(3);
          v8.bindBuffer(34962, v52.buffer.buffer);
          v8.vertexAttribPointer(3, v52.size, v52.type, v52.normalized, v52.stride, v52.offset);
        } else {
          v8.disableVertexAttribArray(3);
          v8.vertexAttrib4f(3, v52.x, v52.y, v52.z, v52.w);
          v52.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(3, v52.divisor);
        v53 = v0[4];
        if (v53.buffer) {
          v8.enableVertexAttribArray(4);
          v8.bindBuffer(34962, v53.buffer.buffer);
          v8.vertexAttribPointer(4, v53.size, v53.type, v53.normalized, v53.stride, v53.offset);
        } else {
          v8.disableVertexAttribArray(4);
          v8.vertexAttrib4f(4, v53.x, v53.y, v53.z, v53.w);
          v53.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(4, v53.divisor);
        v54 = v0[5];
        if (v54.buffer) {
          v8.enableVertexAttribArray(5);
          v8.bindBuffer(34962, v54.buffer.buffer);
          v8.vertexAttribPointer(5, v54.size, v54.type, v54.normalized, v54.stride, v54.offset);
        } else {
          v8.disableVertexAttribArray(5);
          v8.vertexAttrib4f(5, v54.x, v54.y, v54.z, v54.w);
          v54.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(5, v54.divisor);
        v55 = v0[6];
        if (v55.buffer) {
          v8.enableVertexAttribArray(6);
          v8.bindBuffer(34962, v55.buffer.buffer);
          v8.vertexAttribPointer(6, v55.size, v55.type, v55.normalized, v55.stride, v55.offset);
        } else {
          v8.disableVertexAttribArray(6);
          v8.vertexAttrib4f(6, v55.x, v55.y, v55.z, v55.w);
          v55.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(6, v55.divisor);
        v56 = v0[7];
        if (v56.buffer) {
          v8.enableVertexAttribArray(7);
          v8.bindBuffer(34962, v56.buffer.buffer);
          v8.vertexAttribPointer(7, v56.size, v56.type, v56.normalized, v56.stride, v56.offset);
        } else {
          v8.disableVertexAttribArray(7);
          v8.vertexAttrib4f(7, v56.x, v56.y, v56.z, v56.w);
          v56.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(7, v56.divisor);
        v57 = v0[8];
        if (v57.buffer) {
          v8.enableVertexAttribArray(8);
          v8.bindBuffer(34962, v57.buffer.buffer);
          v8.vertexAttribPointer(8, v57.size, v57.type, v57.normalized, v57.stride, v57.offset);
        } else {
          v8.disableVertexAttribArray(8);
          v8.vertexAttrib4f(8, v57.x, v57.y, v57.z, v57.w);
          v57.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(8, v57.divisor);
        v58 = v0[9];
        if (v58.buffer) {
          v8.enableVertexAttribArray(9);
          v8.bindBuffer(34962, v58.buffer.buffer);
          v8.vertexAttribPointer(9, v58.size, v58.type, v58.normalized, v58.stride, v58.offset);
        } else {
          v8.disableVertexAttribArray(9);
          v8.vertexAttrib4f(9, v58.x, v58.y, v58.z, v58.w);
          v58.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(9, v58.divisor);
        v59 = v0[10];
        if (v59.buffer) {
          v8.enableVertexAttribArray(10);
          v8.bindBuffer(34962, v59.buffer.buffer);
          v8.vertexAttribPointer(10, v59.size, v59.type, v59.normalized, v59.stride, v59.offset);
        } else {
          v8.disableVertexAttribArray(10);
          v8.vertexAttrib4f(10, v59.x, v59.y, v59.z, v59.w);
          v59.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(10, v59.divisor);
        v60 = v0[11];
        if (v60.buffer) {
          v8.enableVertexAttribArray(11);
          v8.bindBuffer(34962, v60.buffer.buffer);
          v8.vertexAttribPointer(11, v60.size, v60.type, v60.normalized, v60.stride, v60.offset);
        } else {
          v8.disableVertexAttribArray(11);
          v8.vertexAttrib4f(11, v60.x, v60.y, v60.z, v60.w);
          v60.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(11, v60.divisor);
        v61 = v0[12];
        if (v61.buffer) {
          v8.enableVertexAttribArray(12);
          v8.bindBuffer(34962, v61.buffer.buffer);
          v8.vertexAttribPointer(12, v61.size, v61.type, v61.normalized, v61.stride, v61.offset);
        } else {
          v8.disableVertexAttribArray(12);
          v8.vertexAttrib4f(12, v61.x, v61.y, v61.z, v61.w);
          v61.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(12, v61.divisor);
        v62 = v0[13];
        if (v62.buffer) {
          v8.enableVertexAttribArray(13);
          v8.bindBuffer(34962, v62.buffer.buffer);
          v8.vertexAttribPointer(13, v62.size, v62.type, v62.normalized, v62.stride, v62.offset);
        } else {
          v8.disableVertexAttribArray(13);
          v8.vertexAttrib4f(13, v62.x, v62.y, v62.z, v62.w);
          v62.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(13, v62.divisor);
        v63 = v0[14];
        if (v63.buffer) {
          v8.enableVertexAttribArray(14);
          v8.bindBuffer(34962, v63.buffer.buffer);
          v8.vertexAttribPointer(14, v63.size, v63.type, v63.normalized, v63.stride, v63.offset);
        } else {
          v8.disableVertexAttribArray(14);
          v8.vertexAttrib4f(14, v63.x, v63.y, v63.z, v63.w);
          v63.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(14, v63.divisor);
        v64 = v0[15];
        if (v64.buffer) {
          v8.enableVertexAttribArray(15);
          v8.bindBuffer(34962, v64.buffer.buffer);
          v8.vertexAttribPointer(15, v64.size, v64.type, v64.normalized, v64.stride, v64.offset);
        } else {
          v8.disableVertexAttribArray(15);
          v8.vertexAttrib4f(15, v64.x, v64.y, v64.z, v64.w);
          v64.buffer = null;
        }
        $1.vertexAttribDivisorANGLE(15, v64.divisor);
        v15.currentVAO = null;
        v15.setVAO(v15.targetVAO);
        if (v65) {
          v8.enable(3042);
        } else {
          v8.disable(3042);
        }
        v3.blend_enable = v65;
        if (v66) {
          v8.enable(2884);
        } else {
          v8.disable(2884);
        }
        v3.cull_enable = v66;
        if (v67) {
          v8.enable(2929);
        } else {
          v8.disable(2929);
        }
        v3.depth_enable = v67;
        if (v68) {
          v8.enable(3024);
        } else {
          v8.disable(3024);
        }
        v3.dither = v68;
        if (v69) {
          v8.enable(32823);
        } else {
          v8.disable(32823);
        }
        v3.polygonOffset_enable = v69;
        if (v70) {
          v8.enable(32926);
        } else {
          v8.disable(32926);
        }
        v3.sample_alpha = v70;
        if (v71) {
          v8.enable(32928);
        } else {
          v8.disable(32928);
        }
        v3.sample_enable = v71;
        if (v72) {
          v8.enable(3089);
        } else {
          v8.disable(3089);
        }
        v3.scissor_enable = v72;
        if (v73) {
          v8.enable(2960);
        } else {
          v8.disable(2960);
        }
        v3.stencil_enable = v73;
        v8.blendColor(v74[0], v74[1], v74[2], v74[3]);
        v75[0] = v74[0];
        v75[1] = v74[1];
        v75[2] = v74[2];
        v75[3] = v74[3];
        v8.blendEquationSeparate(v76[0], v76[1]);
        v77[0] = v76[0];
        v77[1] = v76[1];
        v8.blendFuncSeparate(v78[0], v78[1], v78[2], v78[3]);
        v79[0] = v78[0];
        v79[1] = v78[1];
        v79[2] = v78[2];
        v79[3] = v78[3];
        v8.colorMask(v80[0], v80[1], v80[2], v80[3]);
        v81[0] = v80[0];
        v81[1] = v80[1];
        v81[2] = v80[2];
        v81[3] = v80[3];
        v8.cullFace(v82);
        v3.cull_face = v82;
        v8.depthFunc(v84);
        v3.depth_func = v84;
        v8.depthMask(v86);
        v3.depth_mask = v86;
        v8.depthRange(v88[0], v88[1]);
        v89[0] = v88[0];
        v89[1] = v88[1];
        v8.frontFace(v90);
        v3.frontFace = v90;
        v8.lineWidth(v92);
        v3.lineWidth = v92;
        v8.polygonOffset(v94[0], v94[1]);
        v95[0] = v94[0];
        v95[1] = v94[1];
        v8.sampleCoverage(v96[0], v96[1]);
        v97[0] = v96[0];
        v97[1] = v96[1];
        v8.scissor(v98[0], v98[1], v98[2], v98[3]);
        v99[0] = v98[0];
        v99[1] = v98[1];
        v99[2] = v98[2];
        v99[3] = v98[3];
        v8.stencilFunc(v100[0], v100[1], v100[2]);
        v101[0] = v100[0];
        v101[1] = v100[1];
        v101[2] = v100[2];
        v8.stencilMask(v102);
        v3.stencil_mask = v102;
        v8.stencilOpSeparate(v104[0], v104[1], v104[2], v104[3]);
        v105[0] = v104[0];
        v105[1] = v104[1];
        v105[2] = v104[2];
        v105[3] = v104[3];
        v8.stencilOpSeparate(v106[0], v106[1], v106[2], v106[3]);
        v107[0] = v106[0];
        v107[1] = v106[1];
        v107[2] = v106[2];
        v107[3] = v106[3];
        v8.viewport(v108[0], v108[1], v108[2], v108[3]);
        v109[0] = v108[0];
        v109[1] = v108[1];
        v109[2] = v108[2];
        v109[3] = v108[3];
      }

    };
  },
  '$32,capOffset,capSize,color,direction,error,lineOffset,lineWidth,opacity,position,positionFract,scale,scaleFract,translate,translateFract,viewport': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, capOffset, capSize, color, direction, error, lineOffset, lineWidth, opacity, position, positionFract, scale, scaleFract, translate, translateFract, viewport) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v47.buffer = $2;
    v47.divisor = 1;
    v48 = {};
    v48.buffer = $3;
    v48.divisor = 1;
    v49 = {};
    v49.buffer = $4;
    v49.divisor = 1;
    v50 = {};
    v50.buffer = $5;
    v50.divisor = 1;
    return {
      'batch': function (a0, a1) {
        var v397, v398, v432, v433, v434, v435, v436;
        v397 = v6.angle_instanced_arrays;
        v398 = v7.next;
        if (v398 !== v7.cur) {
          if (v398) {
            v8.bindFramebuffer(36160, v398.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v398;
        }
        if (v3.dirty) {
          var v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431;
          v399 = v10.dither;
          if (v399 !== v3.dither) {
            if (v399) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v399;
          }
          v400 = v10.depth_func;
          if (v400 !== v3.depth_func) {
            v8.depthFunc(v400);
            v3.depth_func = v400;
          }
          v401 = v24[0];
          v402 = v24[1];
          if (v401 !== v25[0] || v402 !== v25[1]) {
            v8.depthRange(v401, v402);
            v25[0] = v401;
            v25[1] = v402;
          }
          v403 = v10.depth_mask;
          if (v403 !== v3.depth_mask) {
            v8.depthMask(v403);
            v3.depth_mask = v403;
          }
          v404 = v22[0];
          v405 = v22[1];
          v406 = v22[2];
          v407 = v22[3];
          if (v404 !== v23[0] || v405 !== v23[1] || v406 !== v23[2] || v407 !== v23[3]) {
            v8.colorMask(v404, v405, v406, v407);
            v23[0] = v404;
            v23[1] = v405;
            v23[2] = v406;
            v23[3] = v407;
          }
          v408 = v10.cull_enable;
          if (v408 !== v3.cull_enable) {
            if (v408) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v408;
          }
          v409 = v10.cull_face;
          if (v409 !== v3.cull_face) {
            v8.cullFace(v409);
            v3.cull_face = v409;
          }
          v410 = v10.frontFace;
          if (v410 !== v3.frontFace) {
            v8.frontFace(v410);
            v3.frontFace = v410;
          }
          v411 = v10.lineWidth;
          if (v411 !== v3.lineWidth) {
            v8.lineWidth(v411);
            v3.lineWidth = v411;
          }
          v412 = v10.polygonOffset_enable;
          if (v412 !== v3.polygonOffset_enable) {
            if (v412) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v412;
          }
          v413 = v26[0];
          v414 = v26[1];
          if (v413 !== v27[0] || v414 !== v27[1]) {
            v8.polygonOffset(v413, v414);
            v27[0] = v413;
            v27[1] = v414;
          }
          v415 = v10.sample_alpha;
          if (v415 !== v3.sample_alpha) {
            if (v415) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v415;
          }
          v416 = v10.sample_enable;
          if (v416 !== v3.sample_enable) {
            if (v416) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v416;
          }
          v417 = v28[0];
          v418 = v28[1];
          if (v417 !== v29[0] || v418 !== v29[1]) {
            v8.sampleCoverage(v417, v418);
            v29[0] = v417;
            v29[1] = v418;
          }
          v419 = v10.stencil_enable;
          if (v419 !== v3.stencil_enable) {
            if (v419) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v419;
          }
          v420 = v10.stencil_mask;
          if (v420 !== v3.stencil_mask) {
            v8.stencilMask(v420);
            v3.stencil_mask = v420;
          }
          v421 = v32[0];
          v422 = v32[1];
          v423 = v32[2];
          if (v421 !== v33[0] || v422 !== v33[1] || v423 !== v33[2]) {
            v8.stencilFunc(v421, v422, v423);
            v33[0] = v421;
            v33[1] = v422;
            v33[2] = v423;
          }
          v424 = v36[0];
          v425 = v36[1];
          v426 = v36[2];
          v427 = v36[3];
          if (v424 !== v37[0] || v425 !== v37[1] || v426 !== v37[2] || v427 !== v37[3]) {
            v8.stencilOpSeparate(v424, v425, v426, v427);
            v37[0] = v424;
            v37[1] = v425;
            v37[2] = v426;
            v37[3] = v427;
          }
          v428 = v34[0];
          v429 = v34[1];
          v430 = v34[2];
          v431 = v34[3];
          if (v428 !== v35[0] || v429 !== v35[1] || v430 !== v35[2] || v431 !== v35[3]) {
            v8.stencilOpSeparate(v428, v429, v430, v431);
            v35[0] = v428;
            v35[1] = v429;
            v35[2] = v430;
            v35[3] = v431;
          }
        }
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.enable(3089);
        v3.scissor_enable = true;
        v432 = v3.profile;
        if (v432) {
          v433 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($27.program);
        v434 = v6.angle_instanced_arrays;
        var v449, v450, v451, v452, v453, v454, v558, v559;
        v15.setVAO(null);
        v449 = direction.location;
        v450 = v0[v449];
        if (!v450.buffer) {
          v8.enableVertexAttribArray(v449);
        }
        if (v450.type !== 5126 || v450.size !== 2 || v450.buffer !== $11 || v450.normalized !== false || v450.offset !== 0 || v450.stride !== 24) {
          v8.bindBuffer(34962, $11.buffer);
          v8.vertexAttribPointer(v449, 2, 5126, false, 24, 0);
          v450.type = 5126;
          v450.size = 2;
          v450.buffer = $11;
          v450.normalized = false;
          v450.offset = 0;
          v450.stride = 24;
        }
        if (v450.divisor !== 0) {
          v434.vertexAttribDivisorANGLE(v449, 0);
          v450.divisor = 0;
        }
        v451 = lineOffset.location;
        v452 = v0[v451];
        if (!v452.buffer) {
          v8.enableVertexAttribArray(v451);
        }
        if (v452.type !== 5126 || v452.size !== 2 || v452.buffer !== $12 || v452.normalized !== false || v452.offset !== 8 || v452.stride !== 24) {
          v8.bindBuffer(34962, $12.buffer);
          v8.vertexAttribPointer(v451, 2, 5126, false, 24, 8);
          v452.type = 5126;
          v452.size = 2;
          v452.buffer = $12;
          v452.normalized = false;
          v452.offset = 8;
          v452.stride = 24;
        }
        if (v452.divisor !== 0) {
          v434.vertexAttribDivisorANGLE(v451, 0);
          v452.divisor = 0;
        }
        v453 = capOffset.location;
        v454 = v0[v453];
        if (!v454.buffer) {
          v8.enableVertexAttribArray(v453);
        }
        if (v454.type !== 5126 || v454.size !== 2 || v454.buffer !== $13 || v454.normalized !== false || v454.offset !== 16 || v454.stride !== 24) {
          v8.bindBuffer(34962, $13.buffer);
          v8.vertexAttribPointer(v453, 2, 5126, false, 24, 16);
          v454.type = 5126;
          v454.size = 2;
          v454.buffer = $13;
          v454.normalized = false;
          v454.offset = 16;
          v454.stride = 24;
        }
        if (v454.divisor !== 0) {
          v434.vertexAttribDivisorANGLE(v453, 0);
          v454.divisor = 0;
        }
        v558 = v4.elements;
        if (v558) {
          v8.bindBuffer(34963, v558.buffer.buffer);
        } else if (v15.currentVAO) {
          v558 = v5.getElements(v15.currentVAO.elements);
          if (v558) v8.bindBuffer(34963, v558.buffer.buffer);
        }
        v559 = v4.offset;
        for (v435 = 0; v435 < a1; ++v435) {
          v436 = a0[v435];
          var v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v560;
          v437 = v436['viewport'];
          v438 = v437.x | 0;
          v439 = v437.y | 0;
          v440 = 'width' in v437 ? v437.width | 0 : v2.framebufferWidth - v438;
          v441 = 'height' in v437 ? v437.height | 0 : v2.framebufferHeight - v439;
          v442 = v2.viewportWidth;
          v2.viewportWidth = v440;
          v443 = v2.viewportHeight;
          v2.viewportHeight = v441;
          v8.viewport(v438, v439, v440, v441);
          v39[0] = v438;
          v39[1] = v439;
          v39[2] = v440;
          v39[3] = v441;
          v444 = v436['viewport'];
          v445 = v444.x | 0;
          v446 = v444.y | 0;
          v447 = 'width' in v444 ? v444.width | 0 : v2.framebufferWidth - v445;
          v448 = 'height' in v444 ? v444.height | 0 : v2.framebufferHeight - v446;
          v8.scissor(v445, v446, v447, v448);
          v31[0] = v445;
          v31[1] = v446;
          v31[2] = v447;
          v31[3] = v448;
          v455 = $28.call(this, v2, v436, v435);
          v49.offset = v455;
          v456 = false;
          v457 = null;
          v458 = 0;
          v459 = false;
          v460 = 0;
          v461 = 0;
          v462 = 1;
          v463 = 0;
          v464 = 5126;
          v465 = 0;
          v466 = 0;
          v467 = 0;
          v468 = 0;
          if (v9(v49)) {
            v456 = true;
            v457 = v1.createStream(34962, v49);
            v464 = v457.dtype;
          } else {
            v457 = v1.getBuffer(v49);
            if (v457) {
              v464 = v457.dtype;
            } else if ('constant' in v49) {
              v462 = 2;
              if (typeof v49.constant === 'number') {
                v466 = v49.constant;
                v467 = v468 = v465 = 0;
              } else {
                v466 = v49.constant.length > 0 ? v49.constant[0] : 0;
                v467 = v49.constant.length > 1 ? v49.constant[1] : 0;
                v468 = v49.constant.length > 2 ? v49.constant[2] : 0;
                v465 = v49.constant.length > 3 ? v49.constant[3] : 0;
              }
            } else {
              if (v9(v49.buffer)) {
                v457 = v1.createStream(34962, v49.buffer);
              } else {
                v457 = v1.getBuffer(v49.buffer);
              }
              v464 = 'type' in v49 ? v43[v49.type] : v457.dtype;
              v459 = !!v49.normalized;
              v461 = v49.size | 0;
              v460 = v49.offset | 0;
              v463 = v49.stride | 0;
              v458 = v49.divisor | 0;
            }
          }
          v469 = position.location;
          v470 = v0[v469];
          if (v462 === 1) {
            if (!v470.buffer) {
              v8.enableVertexAttribArray(v469);
            }
            v471 = v461 || 2;
            if (v470.type !== v464 || v470.size !== v471 || v470.buffer !== v457 || v470.normalized !== v459 || v470.offset !== v460 || v470.stride !== v463) {
              v8.bindBuffer(34962, v457.buffer);
              v8.vertexAttribPointer(v469, v471, v464, v459, v463, v460);
              v470.type = v464;
              v470.size = v471;
              v470.buffer = v457;
              v470.normalized = v459;
              v470.offset = v460;
              v470.stride = v463;
            }
            if (v470.divisor !== v458) {
              v434.vertexAttribDivisorANGLE(v469, v458);
              v470.divisor = v458;
            }
          } else {
            if (v470.buffer) {
              v8.disableVertexAttribArray(v469);
              v470.buffer = null;
            }
            if (v470.x !== v466 || v470.y !== v467 || v470.z !== v468 || v470.w !== v465) {
              v8.vertexAttrib4f(v469, v466, v467, v468, v465);
              v470.x = v466;
              v470.y = v467;
              v470.z = v468;
              v470.w = v465;
            }
          }
          v472 = $29.call(this, v2, v436, v435);
          v50.offset = v472;
          v473 = false;
          v474 = null;
          v475 = 0;
          v476 = false;
          v477 = 0;
          v478 = 0;
          v479 = 1;
          v480 = 0;
          v481 = 5126;
          v482 = 0;
          v483 = 0;
          v484 = 0;
          v485 = 0;
          if (v9(v50)) {
            v473 = true;
            v474 = v1.createStream(34962, v50);
            v481 = v474.dtype;
          } else {
            v474 = v1.getBuffer(v50);
            if (v474) {
              v481 = v474.dtype;
            } else if ('constant' in v50) {
              v479 = 2;
              if (typeof v50.constant === 'number') {
                v483 = v50.constant;
                v484 = v485 = v482 = 0;
              } else {
                v483 = v50.constant.length > 0 ? v50.constant[0] : 0;
                v484 = v50.constant.length > 1 ? v50.constant[1] : 0;
                v485 = v50.constant.length > 2 ? v50.constant[2] : 0;
                v482 = v50.constant.length > 3 ? v50.constant[3] : 0;
              }
            } else {
              if (v9(v50.buffer)) {
                v474 = v1.createStream(34962, v50.buffer);
              } else {
                v474 = v1.getBuffer(v50.buffer);
              }
              v481 = 'type' in v50 ? v43[v50.type] : v474.dtype;
              v476 = !!v50.normalized;
              v478 = v50.size | 0;
              v477 = v50.offset | 0;
              v480 = v50.stride | 0;
              v475 = v50.divisor | 0;
            }
          }
          v486 = positionFract.location;
          v487 = v0[v486];
          if (v479 === 1) {
            if (!v487.buffer) {
              v8.enableVertexAttribArray(v486);
            }
            v488 = v478 || 2;
            if (v487.type !== v481 || v487.size !== v488 || v487.buffer !== v474 || v487.normalized !== v476 || v487.offset !== v477 || v487.stride !== v480) {
              v8.bindBuffer(34962, v474.buffer);
              v8.vertexAttribPointer(v486, v488, v481, v476, v480, v477);
              v487.type = v481;
              v487.size = v488;
              v487.buffer = v474;
              v487.normalized = v476;
              v487.offset = v477;
              v487.stride = v480;
            }
            if (v487.divisor !== v475) {
              v434.vertexAttribDivisorANGLE(v486, v475);
              v487.divisor = v475;
            }
          } else {
            if (v487.buffer) {
              v8.disableVertexAttribArray(v486);
              v487.buffer = null;
            }
            if (v487.x !== v483 || v487.y !== v484 || v487.z !== v485 || v487.w !== v482) {
              v8.vertexAttrib4f(v486, v483, v484, v485, v482);
              v487.x = v483;
              v487.y = v484;
              v487.z = v485;
              v487.w = v482;
            }
          }
          v489 = $30.call(this, v2, v436, v435);
          v48.offset = v489;
          v490 = false;
          v491 = null;
          v492 = 0;
          v493 = false;
          v494 = 0;
          v495 = 0;
          v496 = 1;
          v497 = 0;
          v498 = 5126;
          v499 = 0;
          v500 = 0;
          v501 = 0;
          v502 = 0;
          if (v9(v48)) {
            v490 = true;
            v491 = v1.createStream(34962, v48);
            v498 = v491.dtype;
          } else {
            v491 = v1.getBuffer(v48);
            if (v491) {
              v498 = v491.dtype;
            } else if ('constant' in v48) {
              v496 = 2;
              if (typeof v48.constant === 'number') {
                v500 = v48.constant;
                v501 = v502 = v499 = 0;
              } else {
                v500 = v48.constant.length > 0 ? v48.constant[0] : 0;
                v501 = v48.constant.length > 1 ? v48.constant[1] : 0;
                v502 = v48.constant.length > 2 ? v48.constant[2] : 0;
                v499 = v48.constant.length > 3 ? v48.constant[3] : 0;
              }
            } else {
              if (v9(v48.buffer)) {
                v491 = v1.createStream(34962, v48.buffer);
              } else {
                v491 = v1.getBuffer(v48.buffer);
              }
              v498 = 'type' in v48 ? v43[v48.type] : v491.dtype;
              v493 = !!v48.normalized;
              v495 = v48.size | 0;
              v494 = v48.offset | 0;
              v497 = v48.stride | 0;
              v492 = v48.divisor | 0;
            }
          }
          v503 = error.location;
          v504 = v0[v503];
          if (v496 === 1) {
            if (!v504.buffer) {
              v8.enableVertexAttribArray(v503);
            }
            v505 = v495 || 4;
            if (v504.type !== v498 || v504.size !== v505 || v504.buffer !== v491 || v504.normalized !== v493 || v504.offset !== v494 || v504.stride !== v497) {
              v8.bindBuffer(34962, v491.buffer);
              v8.vertexAttribPointer(v503, v505, v498, v493, v497, v494);
              v504.type = v498;
              v504.size = v505;
              v504.buffer = v491;
              v504.normalized = v493;
              v504.offset = v494;
              v504.stride = v497;
            }
            if (v504.divisor !== v492) {
              v434.vertexAttribDivisorANGLE(v503, v492);
              v504.divisor = v492;
            }
          } else {
            if (v504.buffer) {
              v8.disableVertexAttribArray(v503);
              v504.buffer = null;
            }
            if (v504.x !== v500 || v504.y !== v501 || v504.z !== v502 || v504.w !== v499) {
              v8.vertexAttrib4f(v503, v500, v501, v502, v499);
              v504.x = v500;
              v504.y = v501;
              v504.z = v502;
              v504.w = v499;
            }
          }
          v506 = $31.call(this, v2, v436, v435);
          v47.offset = v506;
          v507 = false;
          v508 = null;
          v509 = 0;
          v510 = false;
          v511 = 0;
          v512 = 0;
          v513 = 1;
          v514 = 0;
          v515 = 5126;
          v516 = 0;
          v517 = 0;
          v518 = 0;
          v519 = 0;
          if (v9(v47)) {
            v507 = true;
            v508 = v1.createStream(34962, v47);
            v515 = v508.dtype;
          } else {
            v508 = v1.getBuffer(v47);
            if (v508) {
              v515 = v508.dtype;
            } else if ('constant' in v47) {
              v513 = 2;
              if (typeof v47.constant === 'number') {
                v517 = v47.constant;
                v518 = v519 = v516 = 0;
              } else {
                v517 = v47.constant.length > 0 ? v47.constant[0] : 0;
                v518 = v47.constant.length > 1 ? v47.constant[1] : 0;
                v519 = v47.constant.length > 2 ? v47.constant[2] : 0;
                v516 = v47.constant.length > 3 ? v47.constant[3] : 0;
              }
            } else {
              if (v9(v47.buffer)) {
                v508 = v1.createStream(34962, v47.buffer);
              } else {
                v508 = v1.getBuffer(v47.buffer);
              }
              v515 = 'type' in v47 ? v43[v47.type] : v508.dtype;
              v510 = !!v47.normalized;
              v512 = v47.size | 0;
              v511 = v47.offset | 0;
              v514 = v47.stride | 0;
              v509 = v47.divisor | 0;
            }
          }
          v520 = color.location;
          v521 = v0[v520];
          if (v513 === 1) {
            if (!v521.buffer) {
              v8.enableVertexAttribArray(v520);
            }
            v522 = v512 || 4;
            if (v521.type !== v515 || v521.size !== v522 || v521.buffer !== v508 || v521.normalized !== v510 || v521.offset !== v511 || v521.stride !== v514) {
              v8.bindBuffer(34962, v508.buffer);
              v8.vertexAttribPointer(v520, v522, v515, v510, v514, v511);
              v521.type = v515;
              v521.size = v522;
              v521.buffer = v508;
              v521.normalized = v510;
              v521.offset = v511;
              v521.stride = v514;
            }
            if (v521.divisor !== v509) {
              v434.vertexAttribDivisorANGLE(v520, v509);
              v521.divisor = v509;
            }
          } else {
            if (v521.buffer) {
              v8.disableVertexAttribArray(v520);
              v521.buffer = null;
            }
            if (v521.x !== v517 || v521.y !== v518 || v521.z !== v519 || v521.w !== v516) {
              v8.vertexAttrib4f(v520, v517, v518, v519, v516);
              v521.x = v517;
              v521.y = v518;
              v521.z = v519;
              v521.w = v516;
            }
          }
          v523 = $32.call(this, v2, v436, v435);
          v524 = v523[0];
          v526 = v523[1];
          v528 = v523[2];
          v530 = v523[3];
          if (!v435 || v525 !== v524 || v527 !== v526 || v529 !== v528 || v531 !== v530) {
            v525 = v524;
            v527 = v526;
            v529 = v528;
            v531 = v530;
            v8.uniform4f(viewport.location, v524, v526, v528, v530);
          }
          v532 = v436['lineWidth'];
          if (!v435 || v533 !== v532) {
            v533 = v532;
            v8.uniform1f(lineWidth.location, v532);
          }
          v534 = v436['capSize'];
          if (!v435 || v535 !== v534) {
            v535 = v534;
            v8.uniform1f(capSize.location, v534);
          }
          v536 = v436['scale'];
          v537 = v536[0];
          v539 = v536[1];
          if (!v435 || v538 !== v537 || v540 !== v539) {
            v538 = v537;
            v540 = v539;
            v8.uniform2f(scale.location, v537, v539);
          }
          v541 = v436['scaleFract'];
          v542 = v541[0];
          v544 = v541[1];
          if (!v435 || v543 !== v542 || v545 !== v544) {
            v543 = v542;
            v545 = v544;
            v8.uniform2f(scaleFract.location, v542, v544);
          }
          v546 = v436['translate'];
          v547 = v546[0];
          v549 = v546[1];
          if (!v435 || v548 !== v547 || v550 !== v549) {
            v548 = v547;
            v550 = v549;
            v8.uniform2f(translate.location, v547, v549);
          }
          v551 = v436['translateFract'];
          v552 = v551[0];
          v554 = v551[1];
          if (!v435 || v553 !== v552 || v555 !== v554) {
            v553 = v552;
            v555 = v554;
            v8.uniform2f(translateFract.location, v552, v554);
          }
          v556 = v436['opacity'];
          if (!v435 || v557 !== v556) {
            v557 = v556;
            v8.uniform1f(opacity.location, v556);
          }
          v560 = v436['count'];
          if (v560 > 0) {
            if (v558) {
              v434.drawElementsInstancedANGLE(4, 36, v558.type, v559 << (v558.type - 5121 >> 1), v560);
            } else {
              v434.drawArraysInstancedANGLE(4, v559, 36, v560);
            }
          } else if (v560 < 0) {
            if (v558) {
              v8.drawElements(4, 36, v558.type, v559 << (v558.type - 5121 >> 1));
            } else {
              v8.drawArrays(4, v559, 36);
            }
          }
          v2.viewportWidth = v442;
          v2.viewportHeight = v443;
          if (v456) {
            v1.destroyStream(v457);
          }
          if (v473) {
            v1.destroyStream(v474);
          }
          if (v490) {
            v1.destroyStream(v491);
          }
          if (v507) {
            v1.destroyStream(v508);
          }
        }
        v3.dirty = true;
        v15.setVAO(null);
        if (v432) {
          $1.cpuTime += performance.now() - v433;
        }
      },
      'draw': function (a0) {
        var v51, v52, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197;
        v51 = v6.angle_instanced_arrays;
        v52 = v7.next;
        if (v52 !== v7.cur) {
          if (v52) {
            v8.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v52;
        }
        if (v3.dirty) {
          var v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85;
          v53 = v10.dither;
          if (v53 !== v3.dither) {
            if (v53) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v53;
          }
          v54 = v10.depth_func;
          if (v54 !== v3.depth_func) {
            v8.depthFunc(v54);
            v3.depth_func = v54;
          }
          v55 = v24[0];
          v56 = v24[1];
          if (v55 !== v25[0] || v56 !== v25[1]) {
            v8.depthRange(v55, v56);
            v25[0] = v55;
            v25[1] = v56;
          }
          v57 = v10.depth_mask;
          if (v57 !== v3.depth_mask) {
            v8.depthMask(v57);
            v3.depth_mask = v57;
          }
          v58 = v22[0];
          v59 = v22[1];
          v60 = v22[2];
          v61 = v22[3];
          if (v58 !== v23[0] || v59 !== v23[1] || v60 !== v23[2] || v61 !== v23[3]) {
            v8.colorMask(v58, v59, v60, v61);
            v23[0] = v58;
            v23[1] = v59;
            v23[2] = v60;
            v23[3] = v61;
          }
          v62 = v10.cull_enable;
          if (v62 !== v3.cull_enable) {
            if (v62) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v62;
          }
          v63 = v10.cull_face;
          if (v63 !== v3.cull_face) {
            v8.cullFace(v63);
            v3.cull_face = v63;
          }
          v64 = v10.frontFace;
          if (v64 !== v3.frontFace) {
            v8.frontFace(v64);
            v3.frontFace = v64;
          }
          v65 = v10.lineWidth;
          if (v65 !== v3.lineWidth) {
            v8.lineWidth(v65);
            v3.lineWidth = v65;
          }
          v66 = v10.polygonOffset_enable;
          if (v66 !== v3.polygonOffset_enable) {
            if (v66) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v66;
          }
          v67 = v26[0];
          v68 = v26[1];
          if (v67 !== v27[0] || v68 !== v27[1]) {
            v8.polygonOffset(v67, v68);
            v27[0] = v67;
            v27[1] = v68;
          }
          v69 = v10.sample_alpha;
          if (v69 !== v3.sample_alpha) {
            if (v69) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v69;
          }
          v70 = v10.sample_enable;
          if (v70 !== v3.sample_enable) {
            if (v70) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v70;
          }
          v71 = v28[0];
          v72 = v28[1];
          if (v71 !== v29[0] || v72 !== v29[1]) {
            v8.sampleCoverage(v71, v72);
            v29[0] = v71;
            v29[1] = v72;
          }
          v73 = v10.stencil_enable;
          if (v73 !== v3.stencil_enable) {
            if (v73) {
              v8.enable(2960);
            } else {
              v8.disable(2960);
            }
            v3.stencil_enable = v73;
          }
          v74 = v10.stencil_mask;
          if (v74 !== v3.stencil_mask) {
            v8.stencilMask(v74);
            v3.stencil_mask = v74;
          }
          v75 = v32[0];
          v76 = v32[1];
          v77 = v32[2];
          if (v75 !== v33[0] || v76 !== v33[1] || v77 !== v33[2]) {
            v8.stencilFunc(v75, v76, v77);
            v33[0] = v75;
            v33[1] = v76;
            v33[2] = v77;
          }
          v78 = v36[0];
          v79 = v36[1];
          v80 = v36[2];
          v81 = v36[3];
          if (v78 !== v37[0] || v79 !== v37[1] || v80 !== v37[2] || v81 !== v37[3]) {
            v8.stencilOpSeparate(v78, v79, v80, v81);
            v37[0] = v78;
            v37[1] = v79;
            v37[2] = v80;
            v37[3] = v81;
          }
          v82 = v34[0];
          v83 = v34[1];
          v84 = v34[2];
          v85 = v34[3];
          if (v82 !== v35[0] || v83 !== v35[1] || v84 !== v35[2] || v85 !== v35[3]) {
            v8.stencilOpSeparate(v82, v83, v84, v85);
            v35[0] = v82;
            v35[1] = v83;
            v35[2] = v84;
            v35[3] = v85;
          }
        }
        v86 = a0['viewport'];
        v87 = v86.x | 0;
        v88 = v86.y | 0;
        v89 = 'width' in v86 ? v86.width | 0 : v2.framebufferWidth - v87;
        v90 = 'height' in v86 ? v86.height | 0 : v2.framebufferHeight - v88;
        v91 = v2.viewportWidth;
        v2.viewportWidth = v89;
        v92 = v2.viewportHeight;
        v2.viewportHeight = v90;
        v8.viewport(v87, v88, v89, v90);
        v39[0] = v87;
        v39[1] = v88;
        v39[2] = v89;
        v39[3] = v90;
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v93 = a0['viewport'];
        v94 = v93.x | 0;
        v95 = v93.y | 0;
        v96 = 'width' in v93 ? v93.width | 0 : v2.framebufferWidth - v94;
        v97 = 'height' in v93 ? v93.height | 0 : v2.framebufferHeight - v95;
        v8.scissor(v94, v95, v96, v97);
        v31[0] = v94;
        v31[1] = v95;
        v31[2] = v96;
        v31[3] = v97;
        v8.enable(3089);
        v3.scissor_enable = true;
        v98 = v3.profile;
        if (v98) {
          v99 = performance.now();
          $1.count++;
        }
        v8.useProgram($6.program);
        v100 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v101 = $7.call(this, v2, a0, 0);
        v49.offset = v101;
        v102 = false;
        v103 = null;
        v104 = 0;
        v105 = false;
        v106 = 0;
        v107 = 0;
        v108 = 1;
        v109 = 0;
        v110 = 5126;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        if (v9(v49)) {
          v102 = true;
          v103 = v1.createStream(34962, v49);
          v110 = v103.dtype;
        } else {
          v103 = v1.getBuffer(v49);
          if (v103) {
            v110 = v103.dtype;
          } else if ('constant' in v49) {
            v108 = 2;
            if (typeof v49.constant === 'number') {
              v112 = v49.constant;
              v113 = v114 = v111 = 0;
            } else {
              v112 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v113 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v114 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v111 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v103 = v1.createStream(34962, v49.buffer);
            } else {
              v103 = v1.getBuffer(v49.buffer);
            }
            v110 = 'type' in v49 ? v43[v49.type] : v103.dtype;
            v105 = !!v49.normalized;
            v107 = v49.size | 0;
            v106 = v49.offset | 0;
            v109 = v49.stride | 0;
            v104 = v49.divisor | 0;
          }
        }
        v115 = position.location;
        v116 = v0[v115];
        if (v108 === 1) {
          if (!v116.buffer) {
            v8.enableVertexAttribArray(v115);
          }
          v117 = v107 || 2;
          if (v116.type !== v110 || v116.size !== v117 || v116.buffer !== v103 || v116.normalized !== v105 || v116.offset !== v106 || v116.stride !== v109) {
            v8.bindBuffer(34962, v103.buffer);
            v8.vertexAttribPointer(v115, v117, v110, v105, v109, v106);
            v116.type = v110;
            v116.size = v117;
            v116.buffer = v103;
            v116.normalized = v105;
            v116.offset = v106;
            v116.stride = v109;
          }
          if (v116.divisor !== v104) {
            v100.vertexAttribDivisorANGLE(v115, v104);
            v116.divisor = v104;
          }
        } else {
          if (v116.buffer) {
            v8.disableVertexAttribArray(v115);
            v116.buffer = null;
          }
          if (v116.x !== v112 || v116.y !== v113 || v116.z !== v114 || v116.w !== v111) {
            v8.vertexAttrib4f(v115, v112, v113, v114, v111);
            v116.x = v112;
            v116.y = v113;
            v116.z = v114;
            v116.w = v111;
          }
        }
        v118 = $8.call(this, v2, a0, 0);
        v50.offset = v118;
        v119 = false;
        v120 = null;
        v121 = 0;
        v122 = false;
        v123 = 0;
        v124 = 0;
        v125 = 1;
        v126 = 0;
        v127 = 5126;
        v128 = 0;
        v129 = 0;
        v130 = 0;
        v131 = 0;
        if (v9(v50)) {
          v119 = true;
          v120 = v1.createStream(34962, v50);
          v127 = v120.dtype;
        } else {
          v120 = v1.getBuffer(v50);
          if (v120) {
            v127 = v120.dtype;
          } else if ('constant' in v50) {
            v125 = 2;
            if (typeof v50.constant === 'number') {
              v129 = v50.constant;
              v130 = v131 = v128 = 0;
            } else {
              v129 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v130 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v131 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v128 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v120 = v1.createStream(34962, v50.buffer);
            } else {
              v120 = v1.getBuffer(v50.buffer);
            }
            v127 = 'type' in v50 ? v43[v50.type] : v120.dtype;
            v122 = !!v50.normalized;
            v124 = v50.size | 0;
            v123 = v50.offset | 0;
            v126 = v50.stride | 0;
            v121 = v50.divisor | 0;
          }
        }
        v132 = positionFract.location;
        v133 = v0[v132];
        if (v125 === 1) {
          if (!v133.buffer) {
            v8.enableVertexAttribArray(v132);
          }
          v134 = v124 || 2;
          if (v133.type !== v127 || v133.size !== v134 || v133.buffer !== v120 || v133.normalized !== v122 || v133.offset !== v123 || v133.stride !== v126) {
            v8.bindBuffer(34962, v120.buffer);
            v8.vertexAttribPointer(v132, v134, v127, v122, v126, v123);
            v133.type = v127;
            v133.size = v134;
            v133.buffer = v120;
            v133.normalized = v122;
            v133.offset = v123;
            v133.stride = v126;
          }
          if (v133.divisor !== v121) {
            v100.vertexAttribDivisorANGLE(v132, v121);
            v133.divisor = v121;
          }
        } else {
          if (v133.buffer) {
            v8.disableVertexAttribArray(v132);
            v133.buffer = null;
          }
          if (v133.x !== v129 || v133.y !== v130 || v133.z !== v131 || v133.w !== v128) {
            v8.vertexAttrib4f(v132, v129, v130, v131, v128);
            v133.x = v129;
            v133.y = v130;
            v133.z = v131;
            v133.w = v128;
          }
        }
        v135 = $9.call(this, v2, a0, 0);
        v48.offset = v135;
        v136 = false;
        v137 = null;
        v138 = 0;
        v139 = false;
        v140 = 0;
        v141 = 0;
        v142 = 1;
        v143 = 0;
        v144 = 5126;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        if (v9(v48)) {
          v136 = true;
          v137 = v1.createStream(34962, v48);
          v144 = v137.dtype;
        } else {
          v137 = v1.getBuffer(v48);
          if (v137) {
            v144 = v137.dtype;
          } else if ('constant' in v48) {
            v142 = 2;
            if (typeof v48.constant === 'number') {
              v146 = v48.constant;
              v147 = v148 = v145 = 0;
            } else {
              v146 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v147 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v148 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v145 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v137 = v1.createStream(34962, v48.buffer);
            } else {
              v137 = v1.getBuffer(v48.buffer);
            }
            v144 = 'type' in v48 ? v43[v48.type] : v137.dtype;
            v139 = !!v48.normalized;
            v141 = v48.size | 0;
            v140 = v48.offset | 0;
            v143 = v48.stride | 0;
            v138 = v48.divisor | 0;
          }
        }
        v149 = error.location;
        v150 = v0[v149];
        if (v142 === 1) {
          if (!v150.buffer) {
            v8.enableVertexAttribArray(v149);
          }
          v151 = v141 || 4;
          if (v150.type !== v144 || v150.size !== v151 || v150.buffer !== v137 || v150.normalized !== v139 || v150.offset !== v140 || v150.stride !== v143) {
            v8.bindBuffer(34962, v137.buffer);
            v8.vertexAttribPointer(v149, v151, v144, v139, v143, v140);
            v150.type = v144;
            v150.size = v151;
            v150.buffer = v137;
            v150.normalized = v139;
            v150.offset = v140;
            v150.stride = v143;
          }
          if (v150.divisor !== v138) {
            v100.vertexAttribDivisorANGLE(v149, v138);
            v150.divisor = v138;
          }
        } else {
          if (v150.buffer) {
            v8.disableVertexAttribArray(v149);
            v150.buffer = null;
          }
          if (v150.x !== v146 || v150.y !== v147 || v150.z !== v148 || v150.w !== v145) {
            v8.vertexAttrib4f(v149, v146, v147, v148, v145);
            v150.x = v146;
            v150.y = v147;
            v150.z = v148;
            v150.w = v145;
          }
        }
        v152 = $10.call(this, v2, a0, 0);
        v47.offset = v152;
        v153 = false;
        v154 = null;
        v155 = 0;
        v156 = false;
        v157 = 0;
        v158 = 0;
        v159 = 1;
        v160 = 0;
        v161 = 5126;
        v162 = 0;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        if (v9(v47)) {
          v153 = true;
          v154 = v1.createStream(34962, v47);
          v161 = v154.dtype;
        } else {
          v154 = v1.getBuffer(v47);
          if (v154) {
            v161 = v154.dtype;
          } else if ('constant' in v47) {
            v159 = 2;
            if (typeof v47.constant === 'number') {
              v163 = v47.constant;
              v164 = v165 = v162 = 0;
            } else {
              v163 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v164 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v165 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v162 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v154 = v1.createStream(34962, v47.buffer);
            } else {
              v154 = v1.getBuffer(v47.buffer);
            }
            v161 = 'type' in v47 ? v43[v47.type] : v154.dtype;
            v156 = !!v47.normalized;
            v158 = v47.size | 0;
            v157 = v47.offset | 0;
            v160 = v47.stride | 0;
            v155 = v47.divisor | 0;
          }
        }
        v166 = color.location;
        v167 = v0[v166];
        if (v159 === 1) {
          if (!v167.buffer) {
            v8.enableVertexAttribArray(v166);
          }
          v168 = v158 || 4;
          if (v167.type !== v161 || v167.size !== v168 || v167.buffer !== v154 || v167.normalized !== v156 || v167.offset !== v157 || v167.stride !== v160) {
            v8.bindBuffer(34962, v154.buffer);
            v8.vertexAttribPointer(v166, v168, v161, v156, v160, v157);
            v167.type = v161;
            v167.size = v168;
            v167.buffer = v154;
            v167.normalized = v156;
            v167.offset = v157;
            v167.stride = v160;
          }
          if (v167.divisor !== v155) {
            v100.vertexAttribDivisorANGLE(v166, v155);
            v167.divisor = v155;
          }
        } else {
          if (v167.buffer) {
            v8.disableVertexAttribArray(v166);
            v167.buffer = null;
          }
          if (v167.x !== v163 || v167.y !== v164 || v167.z !== v165 || v167.w !== v162) {
            v8.vertexAttrib4f(v166, v163, v164, v165, v162);
            v167.x = v163;
            v167.y = v164;
            v167.z = v165;
            v167.w = v162;
          }
        }
        v169 = direction.location;
        v170 = v0[v169];
        if (!v170.buffer) {
          v8.enableVertexAttribArray(v169);
        }
        if (v170.type !== 5126 || v170.size !== 2 || v170.buffer !== $11 || v170.normalized !== false || v170.offset !== 0 || v170.stride !== 24) {
          v8.bindBuffer(34962, $11.buffer);
          v8.vertexAttribPointer(v169, 2, 5126, false, 24, 0);
          v170.type = 5126;
          v170.size = 2;
          v170.buffer = $11;
          v170.normalized = false;
          v170.offset = 0;
          v170.stride = 24;
        }
        if (v170.divisor !== 0) {
          v100.vertexAttribDivisorANGLE(v169, 0);
          v170.divisor = 0;
        }
        v171 = lineOffset.location;
        v172 = v0[v171];
        if (!v172.buffer) {
          v8.enableVertexAttribArray(v171);
        }
        if (v172.type !== 5126 || v172.size !== 2 || v172.buffer !== $12 || v172.normalized !== false || v172.offset !== 8 || v172.stride !== 24) {
          v8.bindBuffer(34962, $12.buffer);
          v8.vertexAttribPointer(v171, 2, 5126, false, 24, 8);
          v172.type = 5126;
          v172.size = 2;
          v172.buffer = $12;
          v172.normalized = false;
          v172.offset = 8;
          v172.stride = 24;
        }
        if (v172.divisor !== 0) {
          v100.vertexAttribDivisorANGLE(v171, 0);
          v172.divisor = 0;
        }
        v173 = capOffset.location;
        v174 = v0[v173];
        if (!v174.buffer) {
          v8.enableVertexAttribArray(v173);
        }
        if (v174.type !== 5126 || v174.size !== 2 || v174.buffer !== $13 || v174.normalized !== false || v174.offset !== 16 || v174.stride !== 24) {
          v8.bindBuffer(34962, $13.buffer);
          v8.vertexAttribPointer(v173, 2, 5126, false, 24, 16);
          v174.type = 5126;
          v174.size = 2;
          v174.buffer = $13;
          v174.normalized = false;
          v174.offset = 16;
          v174.stride = 24;
        }
        if (v174.divisor !== 0) {
          v100.vertexAttribDivisorANGLE(v173, 0);
          v174.divisor = 0;
        }
        v175 = $14.call(this, v2, a0, 0);
        v176 = v175[0];
        v177 = v175[1];
        v178 = v175[2];
        v179 = v175[3];
        v8.uniform4f(viewport.location, v176, v177, v178, v179);
        v180 = a0['lineWidth'];
        v8.uniform1f(lineWidth.location, v180);
        v181 = a0['capSize'];
        v8.uniform1f(capSize.location, v181);
        v182 = a0['scale'];
        v183 = v182[0];
        v184 = v182[1];
        v8.uniform2f(scale.location, v183, v184);
        v185 = a0['scaleFract'];
        v186 = v185[0];
        v187 = v185[1];
        v8.uniform2f(scaleFract.location, v186, v187);
        v188 = a0['translate'];
        v189 = v188[0];
        v190 = v188[1];
        v8.uniform2f(translate.location, v189, v190);
        v191 = a0['translateFract'];
        v192 = v191[0];
        v193 = v191[1];
        v8.uniform2f(translateFract.location, v192, v193);
        v194 = a0['opacity'];
        v8.uniform1f(opacity.location, v194);
        v195 = v4.elements;
        if (v195) {
          v8.bindBuffer(34963, v195.buffer.buffer);
        } else if (v15.currentVAO) {
          v195 = v5.getElements(v15.currentVAO.elements);
          if (v195) v8.bindBuffer(34963, v195.buffer.buffer);
        }
        v196 = v4.offset;
        v197 = a0['count'];
        if (v197 > 0) {
          if (v195) {
            v100.drawElementsInstancedANGLE(4, 36, v195.type, v196 << (v195.type - 5121 >> 1), v197);
          } else {
            v100.drawArraysInstancedANGLE(4, v196, 36, v197);
          }
        } else if (v197 < 0) {
          if (v195) {
            v8.drawElements(4, 36, v195.type, v196 << (v195.type - 5121 >> 1));
          } else {
            v8.drawArrays(4, v196, 36);
          }
        }
        v3.dirty = true;
        v15.setVAO(null);
        v2.viewportWidth = v91;
        v2.viewportHeight = v92;
        if (v98) {
          $1.cpuTime += performance.now() - v99;
        }
        if (v102) {
          v1.destroyStream(v103);
        }
        if (v119) {
          v1.destroyStream(v120);
        }
        if (v136) {
          v1.destroyStream(v137);
        }
        if (v153) {
          v1.destroyStream(v154);
        }
      },
      'scope': function (a0, a1, a2) {
        var v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396;
        v198 = a0['viewport'];
        v199 = v198.x | 0;
        v200 = v198.y | 0;
        v201 = 'width' in v198 ? v198.width | 0 : v2.framebufferWidth - v199;
        v202 = 'height' in v198 ? v198.height | 0 : v2.framebufferHeight - v200;
        v203 = v2.viewportWidth;
        v2.viewportWidth = v201;
        v204 = v2.viewportHeight;
        v2.viewportHeight = v202;
        v205 = v38[0];
        v38[0] = v199;
        v206 = v38[1];
        v38[1] = v200;
        v207 = v38[2];
        v38[2] = v201;
        v208 = v38[3];
        v38[3] = v202;
        v209 = v16[0];
        v16[0] = 0;
        v210 = v16[1];
        v16[1] = 0;
        v211 = v16[2];
        v16[2] = 0;
        v212 = v16[3];
        v16[3] = 0;
        v213 = v10.blend_enable;
        v10.blend_enable = true;
        v214 = v18[0];
        v18[0] = 32774;
        v215 = v18[1];
        v18[1] = 32774;
        v216 = v20[0];
        v20[0] = 770;
        v217 = v20[1];
        v20[1] = 771;
        v218 = v20[2];
        v20[2] = 773;
        v219 = v20[3];
        v20[3] = 1;
        v220 = v10.depth_enable;
        v10.depth_enable = false;
        v221 = a0['viewport'];
        v222 = v221.x | 0;
        v223 = v221.y | 0;
        v224 = 'width' in v221 ? v221.width | 0 : v2.framebufferWidth - v222;
        v225 = 'height' in v221 ? v221.height | 0 : v2.framebufferHeight - v223;
        v226 = v30[0];
        v30[0] = v222;
        v227 = v30[1];
        v30[1] = v223;
        v228 = v30[2];
        v30[2] = v224;
        v229 = v30[3];
        v30[3] = v225;
        v230 = v10.scissor_enable;
        v10.scissor_enable = true;
        v231 = v3.profile;
        if (v231) {
          v232 = performance.now();
          $1.count++;
        }
        v233 = v4.count;
        v4.count = 36;
        v234 = a0['count'];
        v235 = v4.instances;
        v4.instances = v234;
        v236 = v4.primitive;
        v4.primitive = 4;
        v237 = a0['capSize'];
        v238 = v14[5];
        v14[5] = v237;
        v239 = a0['lineWidth'];
        v240 = v14[4];
        v14[4] = v239;
        v241 = a0['opacity'];
        v242 = v14[10];
        v14[10] = v241;
        v243 = a0['range'];
        v244 = v14[18];
        v14[18] = v243;
        v245 = a0['scale'];
        v246 = v14[6];
        v14[6] = v245;
        v247 = a0['scaleFract'];
        v248 = v14[7];
        v14[7] = v247;
        v249 = a0['translate'];
        v250 = v14[8];
        v14[8] = v249;
        v251 = a0['translateFract'];
        v252 = v14[9];
        v14[9] = v251;
        v253 = $15.call(this, v2, a0, a2);
        v254 = v14[3];
        v14[3] = v253;
        v255 = $16.buffer;
        $16.buffer = $13;
        v256 = $16.divisor;
        $16.divisor = 0;
        v257 = $16.normalized;
        $16.normalized = false;
        v258 = $16.offset;
        $16.offset = 16;
        v259 = $16.size;
        $16.size = 0;
        v260 = $16.state;
        $16.state = 1;
        v261 = $16.stride;
        $16.stride = 24;
        v262 = $16.type;
        $16.type = 5126;
        v263 = $16.w;
        $16.w = 0;
        v264 = $16.x;
        $16.x = 0;
        v265 = $16.y;
        $16.y = 0;
        v266 = $16.z;
        $16.z = 0;
        v267 = $17.call(this, v2, a0, a2);
        v47.offset = v267;
        v268 = false;
        v269 = null;
        v270 = 0;
        v271 = false;
        v272 = 0;
        v273 = 0;
        v274 = 1;
        v275 = 0;
        v276 = 5126;
        v277 = 0;
        v278 = 0;
        v279 = 0;
        v280 = 0;
        if (v9(v47)) {
          v268 = true;
          v269 = v1.createStream(34962, v47);
          v276 = v269.dtype;
        } else {
          v269 = v1.getBuffer(v47);
          if (v269) {
            v276 = v269.dtype;
          } else if ('constant' in v47) {
            v274 = 2;
            if (typeof v47.constant === 'number') {
              v278 = v47.constant;
              v279 = v280 = v277 = 0;
            } else {
              v278 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v279 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v280 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v277 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v269 = v1.createStream(34962, v47.buffer);
            } else {
              v269 = v1.getBuffer(v47.buffer);
            }
            v276 = 'type' in v47 ? v43[v47.type] : v269.dtype;
            v271 = !!v47.normalized;
            v273 = v47.size | 0;
            v272 = v47.offset | 0;
            v275 = v47.stride | 0;
            v270 = v47.divisor | 0;
          }
        }
        v281 = $18.buffer;
        $18.buffer = v269;
        v282 = $18.divisor;
        $18.divisor = v270;
        v283 = $18.normalized;
        $18.normalized = v271;
        v284 = $18.offset;
        $18.offset = v272;
        v285 = $18.size;
        $18.size = v273;
        v286 = $18.state;
        $18.state = v274;
        v287 = $18.stride;
        $18.stride = v275;
        v288 = $18.type;
        $18.type = v276;
        v289 = $18.w;
        $18.w = v277;
        v290 = $18.x;
        $18.x = v278;
        v291 = $18.y;
        $18.y = v279;
        v292 = $18.z;
        $18.z = v280;
        v293 = $19.buffer;
        $19.buffer = $11;
        v294 = $19.divisor;
        $19.divisor = 0;
        v295 = $19.normalized;
        $19.normalized = false;
        v296 = $19.offset;
        $19.offset = 0;
        v297 = $19.size;
        $19.size = 0;
        v298 = $19.state;
        $19.state = 1;
        v299 = $19.stride;
        $19.stride = 24;
        v300 = $19.type;
        $19.type = 5126;
        v301 = $19.w;
        $19.w = 0;
        v302 = $19.x;
        $19.x = 0;
        v303 = $19.y;
        $19.y = 0;
        v304 = $19.z;
        $19.z = 0;
        v305 = $20.call(this, v2, a0, a2);
        v48.offset = v305;
        v306 = false;
        v307 = null;
        v308 = 0;
        v309 = false;
        v310 = 0;
        v311 = 0;
        v312 = 1;
        v313 = 0;
        v314 = 5126;
        v315 = 0;
        v316 = 0;
        v317 = 0;
        v318 = 0;
        if (v9(v48)) {
          v306 = true;
          v307 = v1.createStream(34962, v48);
          v314 = v307.dtype;
        } else {
          v307 = v1.getBuffer(v48);
          if (v307) {
            v314 = v307.dtype;
          } else if ('constant' in v48) {
            v312 = 2;
            if (typeof v48.constant === 'number') {
              v316 = v48.constant;
              v317 = v318 = v315 = 0;
            } else {
              v316 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v317 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v318 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v315 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v307 = v1.createStream(34962, v48.buffer);
            } else {
              v307 = v1.getBuffer(v48.buffer);
            }
            v314 = 'type' in v48 ? v43[v48.type] : v307.dtype;
            v309 = !!v48.normalized;
            v311 = v48.size | 0;
            v310 = v48.offset | 0;
            v313 = v48.stride | 0;
            v308 = v48.divisor | 0;
          }
        }
        v319 = $21.buffer;
        $21.buffer = v307;
        v320 = $21.divisor;
        $21.divisor = v308;
        v321 = $21.normalized;
        $21.normalized = v309;
        v322 = $21.offset;
        $21.offset = v310;
        v323 = $21.size;
        $21.size = v311;
        v324 = $21.state;
        $21.state = v312;
        v325 = $21.stride;
        $21.stride = v313;
        v326 = $21.type;
        $21.type = v314;
        v327 = $21.w;
        $21.w = v315;
        v328 = $21.x;
        $21.x = v316;
        v329 = $21.y;
        $21.y = v317;
        v330 = $21.z;
        $21.z = v318;
        v331 = $22.buffer;
        $22.buffer = $12;
        v332 = $22.divisor;
        $22.divisor = 0;
        v333 = $22.normalized;
        $22.normalized = false;
        v334 = $22.offset;
        $22.offset = 8;
        v335 = $22.size;
        $22.size = 0;
        v336 = $22.state;
        $22.state = 1;
        v337 = $22.stride;
        $22.stride = 24;
        v338 = $22.type;
        $22.type = 5126;
        v339 = $22.w;
        $22.w = 0;
        v340 = $22.x;
        $22.x = 0;
        v341 = $22.y;
        $22.y = 0;
        v342 = $22.z;
        $22.z = 0;
        v343 = $23.call(this, v2, a0, a2);
        v49.offset = v343;
        v344 = false;
        v345 = null;
        v346 = 0;
        v347 = false;
        v348 = 0;
        v349 = 0;
        v350 = 1;
        v351 = 0;
        v352 = 5126;
        v353 = 0;
        v354 = 0;
        v355 = 0;
        v356 = 0;
        if (v9(v49)) {
          v344 = true;
          v345 = v1.createStream(34962, v49);
          v352 = v345.dtype;
        } else {
          v345 = v1.getBuffer(v49);
          if (v345) {
            v352 = v345.dtype;
          } else if ('constant' in v49) {
            v350 = 2;
            if (typeof v49.constant === 'number') {
              v354 = v49.constant;
              v355 = v356 = v353 = 0;
            } else {
              v354 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v355 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v356 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v353 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v345 = v1.createStream(34962, v49.buffer);
            } else {
              v345 = v1.getBuffer(v49.buffer);
            }
            v352 = 'type' in v49 ? v43[v49.type] : v345.dtype;
            v347 = !!v49.normalized;
            v349 = v49.size | 0;
            v348 = v49.offset | 0;
            v351 = v49.stride | 0;
            v346 = v49.divisor | 0;
          }
        }
        v357 = $24.buffer;
        $24.buffer = v345;
        v358 = $24.divisor;
        $24.divisor = v346;
        v359 = $24.normalized;
        $24.normalized = v347;
        v360 = $24.offset;
        $24.offset = v348;
        v361 = $24.size;
        $24.size = v349;
        v362 = $24.state;
        $24.state = v350;
        v363 = $24.stride;
        $24.stride = v351;
        v364 = $24.type;
        $24.type = v352;
        v365 = $24.w;
        $24.w = v353;
        v366 = $24.x;
        $24.x = v354;
        v367 = $24.y;
        $24.y = v355;
        v368 = $24.z;
        $24.z = v356;
        v369 = $25.call(this, v2, a0, a2);
        v50.offset = v369;
        v370 = false;
        v371 = null;
        v372 = 0;
        v373 = false;
        v374 = 0;
        v375 = 0;
        v376 = 1;
        v377 = 0;
        v378 = 5126;
        v379 = 0;
        v380 = 0;
        v381 = 0;
        v382 = 0;
        if (v9(v50)) {
          v370 = true;
          v371 = v1.createStream(34962, v50);
          v378 = v371.dtype;
        } else {
          v371 = v1.getBuffer(v50);
          if (v371) {
            v378 = v371.dtype;
          } else if ('constant' in v50) {
            v376 = 2;
            if (typeof v50.constant === 'number') {
              v380 = v50.constant;
              v381 = v382 = v379 = 0;
            } else {
              v380 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v381 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v382 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v379 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v371 = v1.createStream(34962, v50.buffer);
            } else {
              v371 = v1.getBuffer(v50.buffer);
            }
            v378 = 'type' in v50 ? v43[v50.type] : v371.dtype;
            v373 = !!v50.normalized;
            v375 = v50.size | 0;
            v374 = v50.offset | 0;
            v377 = v50.stride | 0;
            v372 = v50.divisor | 0;
          }
        }
        v383 = $26.buffer;
        $26.buffer = v371;
        v384 = $26.divisor;
        $26.divisor = v372;
        v385 = $26.normalized;
        $26.normalized = v373;
        v386 = $26.offset;
        $26.offset = v374;
        v387 = $26.size;
        $26.size = v375;
        v388 = $26.state;
        $26.state = v376;
        v389 = $26.stride;
        $26.stride = v377;
        v390 = $26.type;
        $26.type = v378;
        v391 = $26.w;
        $26.w = v379;
        v392 = $26.x;
        $26.x = v380;
        v393 = $26.y;
        $26.y = v381;
        v394 = $26.z;
        $26.z = v382;
        v395 = v11.vert;
        v11.vert = 2;
        v396 = v11.frag;
        v11.frag = 1;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v203;
        v2.viewportHeight = v204;
        v38[0] = v205;
        v38[1] = v206;
        v38[2] = v207;
        v38[3] = v208;
        v16[0] = v209;
        v16[1] = v210;
        v16[2] = v211;
        v16[3] = v212;
        v10.blend_enable = v213;
        v18[0] = v214;
        v18[1] = v215;
        v20[0] = v216;
        v20[1] = v217;
        v20[2] = v218;
        v20[3] = v219;
        v10.depth_enable = v220;
        v30[0] = v226;
        v30[1] = v227;
        v30[2] = v228;
        v30[3] = v229;
        v10.scissor_enable = v230;
        if (v231) {
          $1.cpuTime += performance.now() - v232;
        }
        v4.count = v233;
        v4.instances = v235;
        v4.primitive = v236;
        v14[5] = v238;
        v14[4] = v240;
        v14[10] = v242;
        v14[18] = v244;
        v14[6] = v246;
        v14[7] = v248;
        v14[8] = v250;
        v14[9] = v252;
        v14[3] = v254;
        $16.buffer = v255;
        $16.divisor = v256;
        $16.normalized = v257;
        $16.offset = v258;
        $16.size = v259;
        $16.state = v260;
        $16.stride = v261;
        $16.type = v262;
        $16.w = v263;
        $16.x = v264;
        $16.y = v265;
        $16.z = v266;
        if (v268) {
          v1.destroyStream(v269);
        }
        $18.buffer = v281;
        $18.divisor = v282;
        $18.normalized = v283;
        $18.offset = v284;
        $18.size = v285;
        $18.state = v286;
        $18.stride = v287;
        $18.type = v288;
        $18.w = v289;
        $18.x = v290;
        $18.y = v291;
        $18.z = v292;
        $19.buffer = v293;
        $19.divisor = v294;
        $19.normalized = v295;
        $19.offset = v296;
        $19.size = v297;
        $19.state = v298;
        $19.stride = v299;
        $19.type = v300;
        $19.w = v301;
        $19.x = v302;
        $19.y = v303;
        $19.z = v304;
        if (v306) {
          v1.destroyStream(v307);
        }
        $21.buffer = v319;
        $21.divisor = v320;
        $21.normalized = v321;
        $21.offset = v322;
        $21.size = v323;
        $21.state = v324;
        $21.stride = v325;
        $21.type = v326;
        $21.w = v327;
        $21.x = v328;
        $21.y = v329;
        $21.z = v330;
        $22.buffer = v331;
        $22.divisor = v332;
        $22.normalized = v333;
        $22.offset = v334;
        $22.size = v335;
        $22.state = v336;
        $22.stride = v337;
        $22.type = v338;
        $22.w = v339;
        $22.x = v340;
        $22.y = v341;
        $22.z = v342;
        if (v344) {
          v1.destroyStream(v345);
        }
        $24.buffer = v357;
        $24.divisor = v358;
        $24.normalized = v359;
        $24.offset = v360;
        $24.size = v361;
        $24.state = v362;
        $24.stride = v363;
        $24.type = v364;
        $24.w = v365;
        $24.x = v366;
        $24.y = v367;
        $24.z = v368;
        if (v370) {
          v1.destroyStream(v371);
        }
        $26.buffer = v383;
        $26.divisor = v384;
        $26.normalized = v385;
        $26.offset = v386;
        $26.size = v387;
        $26.state = v388;
        $26.stride = v389;
        $26.type = v390;
        $26.w = v391;
        $26.x = v392;
        $26.y = v393;
        $26.z = v394;
        v11.vert = v395;
        v11.frag = v396;
        v3.dirty = true;
      }

    };
  },
  '$19,aCoord,aCoordFract,bCoord,bCoordFract,color,dashLength,dashTexture,depth,lineEnd,lineTop,opacity,scale,scaleFract,thickness,translate,translateFract,viewport': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, aCoord, aCoordFract, bCoord, bCoordFract, color, dashLength, dashTexture, depth, lineEnd, lineTop, opacity, scale, scaleFract, thickness, translate, translateFract, viewport) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v47.divisor = 1;
    v47.offset = 8;
    v47.stride = 8;
    v48 = {};
    v48.divisor = 1;
    v48.offset = 8;
    v48.stride = 8;
    v49 = {};
    v49.divisor = 1;
    v49.offset = 16;
    v49.stride = 8;
    v50 = {};
    v50.divisor = 1;
    v50.offset = 16;
    v50.stride = 8;
    v51 = {};
    v51.divisor = 1;
    v51.offset = 0;
    v51.stride = 4;
    return {
      'batch': function (a0, a1) {
        var v442, v443, v476, v477, v478, v479, v480;
        v442 = v6.angle_instanced_arrays;
        v443 = v7.next;
        if (v443 !== v7.cur) {
          if (v443) {
            v8.bindFramebuffer(36160, v443.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v443;
        }
        if (v3.dirty) {
          var v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475;
          v444 = v10.dither;
          if (v444 !== v3.dither) {
            if (v444) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v444;
          }
          v445 = v10.depth_func;
          if (v445 !== v3.depth_func) {
            v8.depthFunc(v445);
            v3.depth_func = v445;
          }
          v446 = v24[0];
          v447 = v24[1];
          if (v446 !== v25[0] || v447 !== v25[1]) {
            v8.depthRange(v446, v447);
            v25[0] = v446;
            v25[1] = v447;
          }
          v448 = v10.depth_mask;
          if (v448 !== v3.depth_mask) {
            v8.depthMask(v448);
            v3.depth_mask = v448;
          }
          v449 = v22[0];
          v450 = v22[1];
          v451 = v22[2];
          v452 = v22[3];
          if (v449 !== v23[0] || v450 !== v23[1] || v451 !== v23[2] || v452 !== v23[3]) {
            v8.colorMask(v449, v450, v451, v452);
            v23[0] = v449;
            v23[1] = v450;
            v23[2] = v451;
            v23[3] = v452;
          }
          v453 = v10.cull_enable;
          if (v453 !== v3.cull_enable) {
            if (v453) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v453;
          }
          v454 = v10.cull_face;
          if (v454 !== v3.cull_face) {
            v8.cullFace(v454);
            v3.cull_face = v454;
          }
          v455 = v10.frontFace;
          if (v455 !== v3.frontFace) {
            v8.frontFace(v455);
            v3.frontFace = v455;
          }
          v456 = v10.lineWidth;
          if (v456 !== v3.lineWidth) {
            v8.lineWidth(v456);
            v3.lineWidth = v456;
          }
          v457 = v10.polygonOffset_enable;
          if (v457 !== v3.polygonOffset_enable) {
            if (v457) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v457;
          }
          v458 = v26[0];
          v459 = v26[1];
          if (v458 !== v27[0] || v459 !== v27[1]) {
            v8.polygonOffset(v458, v459);
            v27[0] = v458;
            v27[1] = v459;
          }
          v460 = v10.sample_alpha;
          if (v460 !== v3.sample_alpha) {
            if (v460) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v460;
          }
          v461 = v10.sample_enable;
          if (v461 !== v3.sample_enable) {
            if (v461) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v461;
          }
          v462 = v28[0];
          v463 = v28[1];
          if (v462 !== v29[0] || v463 !== v29[1]) {
            v8.sampleCoverage(v462, v463);
            v29[0] = v462;
            v29[1] = v463;
          }
          v464 = v10.stencil_mask;
          if (v464 !== v3.stencil_mask) {
            v8.stencilMask(v464);
            v3.stencil_mask = v464;
          }
          v465 = v32[0];
          v466 = v32[1];
          v467 = v32[2];
          if (v465 !== v33[0] || v466 !== v33[1] || v467 !== v33[2]) {
            v8.stencilFunc(v465, v466, v467);
            v33[0] = v465;
            v33[1] = v466;
            v33[2] = v467;
          }
          v468 = v36[0];
          v469 = v36[1];
          v470 = v36[2];
          v471 = v36[3];
          if (v468 !== v37[0] || v469 !== v37[1] || v470 !== v37[2] || v471 !== v37[3]) {
            v8.stencilOpSeparate(v468, v469, v470, v471);
            v37[0] = v468;
            v37[1] = v469;
            v37[2] = v470;
            v37[3] = v471;
          }
          v472 = v34[0];
          v473 = v34[1];
          v474 = v34[2];
          v475 = v34[3];
          if (v472 !== v35[0] || v473 !== v35[1] || v474 !== v35[2] || v475 !== v35[3]) {
            v8.stencilOpSeparate(v472, v473, v474, v475);
            v35[0] = v472;
            v35[1] = v473;
            v35[2] = v474;
            v35[3] = v475;
          }
        }
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v476 = v3.profile;
        if (v476) {
          v477 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($17.program);
        v478 = v6.angle_instanced_arrays;
        var v494, v495, v496, v497, v622;
        v15.setVAO(null);
        v494 = lineEnd.location;
        v495 = v0[v494];
        if (!v495.buffer) {
          v8.enableVertexAttribArray(v494);
        }
        if (v495.type !== 5126 || v495.size !== 1 || v495.buffer !== $4 || v495.normalized !== false || v495.offset !== 0 || v495.stride !== 8) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v494, 1, 5126, false, 8, 0);
          v495.type = 5126;
          v495.size = 1;
          v495.buffer = $4;
          v495.normalized = false;
          v495.offset = 0;
          v495.stride = 8;
        }
        if (v495.divisor !== 0) {
          v478.vertexAttribDivisorANGLE(v494, 0);
          v495.divisor = 0;
        }
        v496 = lineTop.location;
        v497 = v0[v496];
        if (!v497.buffer) {
          v8.enableVertexAttribArray(v496);
        }
        if (v497.type !== 5126 || v497.size !== 1 || v497.buffer !== $5 || v497.normalized !== false || v497.offset !== 4 || v497.stride !== 8) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v496, 1, 5126, false, 8, 4);
          v497.type = 5126;
          v497.size = 1;
          v497.buffer = $5;
          v497.normalized = false;
          v497.offset = 4;
          v497.stride = 8;
        }
        if (v497.divisor !== 0) {
          v478.vertexAttribDivisorANGLE(v496, 0);
          v497.divisor = 0;
        }
        v622 = v4.elements;
        if (v622) {
          v8.bindBuffer(34963, v622.buffer.buffer);
        } else if (v15.currentVAO) {
          v622 = v5.getElements(v15.currentVAO.elements);
          if (v622) v8.bindBuffer(34963, v622.buffer.buffer);
        }
        for (v479 = 0; v479 < a1; ++v479) {
          v480 = a0[v479];
          var v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, v573, v574, v575, v576, v577, v578, v579, v580, v581, v582, v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608, v609, v610, v611, v612, v613, v614, v615, v616, v617, v618, v619, v620, v621, v623;
          v481 = v480['viewport'];
          v482 = v481.x | 0;
          v483 = v481.y | 0;
          v484 = 'width' in v481 ? v481.width | 0 : v2.framebufferWidth - v482;
          v485 = 'height' in v481 ? v481.height | 0 : v2.framebufferHeight - v483;
          v486 = v2.viewportWidth;
          v2.viewportWidth = v484;
          v487 = v2.viewportHeight;
          v2.viewportHeight = v485;
          v8.viewport(v482, v483, v484, v485);
          v39[0] = v482;
          v39[1] = v483;
          v39[2] = v484;
          v39[3] = v485;
          v488 = $18.call(this, v2, v480, v479);
          if (v488) {
            v8.enable(2929);
          } else {
            v8.disable(2929);
          }
          v3.depth_enable = v488;
          v489 = v480['viewport'];
          v490 = v489.x | 0;
          v491 = v489.y | 0;
          v492 = 'width' in v489 ? v489.width | 0 : v2.framebufferWidth - v490;
          v493 = 'height' in v489 ? v489.height | 0 : v2.framebufferHeight - v491;
          v8.scissor(v490, v491, v492, v493);
          v31[0] = v490;
          v31[1] = v491;
          v31[2] = v492;
          v31[3] = v493;
          v498 = v480['positionBuffer'];
          v47.buffer = v498;
          v499 = false;
          v500 = null;
          v501 = 0;
          v502 = false;
          v503 = 0;
          v504 = 0;
          v505 = 1;
          v506 = 0;
          v507 = 5126;
          v508 = 0;
          v509 = 0;
          v510 = 0;
          v511 = 0;
          if (v9(v47)) {
            v499 = true;
            v500 = v1.createStream(34962, v47);
            v507 = v500.dtype;
          } else {
            v500 = v1.getBuffer(v47);
            if (v500) {
              v507 = v500.dtype;
            } else if ('constant' in v47) {
              v505 = 2;
              if (typeof v47.constant === 'number') {
                v509 = v47.constant;
                v510 = v511 = v508 = 0;
              } else {
                v509 = v47.constant.length > 0 ? v47.constant[0] : 0;
                v510 = v47.constant.length > 1 ? v47.constant[1] : 0;
                v511 = v47.constant.length > 2 ? v47.constant[2] : 0;
                v508 = v47.constant.length > 3 ? v47.constant[3] : 0;
              }
            } else {
              if (v9(v47.buffer)) {
                v500 = v1.createStream(34962, v47.buffer);
              } else {
                v500 = v1.getBuffer(v47.buffer);
              }
              v507 = 'type' in v47 ? v43[v47.type] : v500.dtype;
              v502 = !!v47.normalized;
              v504 = v47.size | 0;
              v503 = v47.offset | 0;
              v506 = v47.stride | 0;
              v501 = v47.divisor | 0;
            }
          }
          v512 = aCoord.location;
          v513 = v0[v512];
          if (v505 === 1) {
            if (!v513.buffer) {
              v8.enableVertexAttribArray(v512);
            }
            v514 = v504 || 2;
            if (v513.type !== v507 || v513.size !== v514 || v513.buffer !== v500 || v513.normalized !== v502 || v513.offset !== v503 || v513.stride !== v506) {
              v8.bindBuffer(34962, v500.buffer);
              v8.vertexAttribPointer(v512, v514, v507, v502, v506, v503);
              v513.type = v507;
              v513.size = v514;
              v513.buffer = v500;
              v513.normalized = v502;
              v513.offset = v503;
              v513.stride = v506;
            }
            if (v513.divisor !== v501) {
              v478.vertexAttribDivisorANGLE(v512, v501);
              v513.divisor = v501;
            }
          } else {
            if (v513.buffer) {
              v8.disableVertexAttribArray(v512);
              v513.buffer = null;
            }
            if (v513.x !== v509 || v513.y !== v510 || v513.z !== v511 || v513.w !== v508) {
              v8.vertexAttrib4f(v512, v509, v510, v511, v508);
              v513.x = v509;
              v513.y = v510;
              v513.z = v511;
              v513.w = v508;
            }
          }
          v515 = v480['positionBuffer'];
          v49.buffer = v515;
          v516 = false;
          v517 = null;
          v518 = 0;
          v519 = false;
          v520 = 0;
          v521 = 0;
          v522 = 1;
          v523 = 0;
          v524 = 5126;
          v525 = 0;
          v526 = 0;
          v527 = 0;
          v528 = 0;
          if (v9(v49)) {
            v516 = true;
            v517 = v1.createStream(34962, v49);
            v524 = v517.dtype;
          } else {
            v517 = v1.getBuffer(v49);
            if (v517) {
              v524 = v517.dtype;
            } else if ('constant' in v49) {
              v522 = 2;
              if (typeof v49.constant === 'number') {
                v526 = v49.constant;
                v527 = v528 = v525 = 0;
              } else {
                v526 = v49.constant.length > 0 ? v49.constant[0] : 0;
                v527 = v49.constant.length > 1 ? v49.constant[1] : 0;
                v528 = v49.constant.length > 2 ? v49.constant[2] : 0;
                v525 = v49.constant.length > 3 ? v49.constant[3] : 0;
              }
            } else {
              if (v9(v49.buffer)) {
                v517 = v1.createStream(34962, v49.buffer);
              } else {
                v517 = v1.getBuffer(v49.buffer);
              }
              v524 = 'type' in v49 ? v43[v49.type] : v517.dtype;
              v519 = !!v49.normalized;
              v521 = v49.size | 0;
              v520 = v49.offset | 0;
              v523 = v49.stride | 0;
              v518 = v49.divisor | 0;
            }
          }
          v529 = bCoord.location;
          v530 = v0[v529];
          if (v522 === 1) {
            if (!v530.buffer) {
              v8.enableVertexAttribArray(v529);
            }
            v531 = v521 || 2;
            if (v530.type !== v524 || v530.size !== v531 || v530.buffer !== v517 || v530.normalized !== v519 || v530.offset !== v520 || v530.stride !== v523) {
              v8.bindBuffer(34962, v517.buffer);
              v8.vertexAttribPointer(v529, v531, v524, v519, v523, v520);
              v530.type = v524;
              v530.size = v531;
              v530.buffer = v517;
              v530.normalized = v519;
              v530.offset = v520;
              v530.stride = v523;
            }
            if (v530.divisor !== v518) {
              v478.vertexAttribDivisorANGLE(v529, v518);
              v530.divisor = v518;
            }
          } else {
            if (v530.buffer) {
              v8.disableVertexAttribArray(v529);
              v530.buffer = null;
            }
            if (v530.x !== v526 || v530.y !== v527 || v530.z !== v528 || v530.w !== v525) {
              v8.vertexAttrib4f(v529, v526, v527, v528, v525);
              v530.x = v526;
              v530.y = v527;
              v530.z = v528;
              v530.w = v525;
            }
          }
          v532 = v480['positionFractBuffer'];
          v48.buffer = v532;
          v533 = false;
          v534 = null;
          v535 = 0;
          v536 = false;
          v537 = 0;
          v538 = 0;
          v539 = 1;
          v540 = 0;
          v541 = 5126;
          v542 = 0;
          v543 = 0;
          v544 = 0;
          v545 = 0;
          if (v9(v48)) {
            v533 = true;
            v534 = v1.createStream(34962, v48);
            v541 = v534.dtype;
          } else {
            v534 = v1.getBuffer(v48);
            if (v534) {
              v541 = v534.dtype;
            } else if ('constant' in v48) {
              v539 = 2;
              if (typeof v48.constant === 'number') {
                v543 = v48.constant;
                v544 = v545 = v542 = 0;
              } else {
                v543 = v48.constant.length > 0 ? v48.constant[0] : 0;
                v544 = v48.constant.length > 1 ? v48.constant[1] : 0;
                v545 = v48.constant.length > 2 ? v48.constant[2] : 0;
                v542 = v48.constant.length > 3 ? v48.constant[3] : 0;
              }
            } else {
              if (v9(v48.buffer)) {
                v534 = v1.createStream(34962, v48.buffer);
              } else {
                v534 = v1.getBuffer(v48.buffer);
              }
              v541 = 'type' in v48 ? v43[v48.type] : v534.dtype;
              v536 = !!v48.normalized;
              v538 = v48.size | 0;
              v537 = v48.offset | 0;
              v540 = v48.stride | 0;
              v535 = v48.divisor | 0;
            }
          }
          v546 = aCoordFract.location;
          v547 = v0[v546];
          if (v539 === 1) {
            if (!v547.buffer) {
              v8.enableVertexAttribArray(v546);
            }
            v548 = v538 || 2;
            if (v547.type !== v541 || v547.size !== v548 || v547.buffer !== v534 || v547.normalized !== v536 || v547.offset !== v537 || v547.stride !== v540) {
              v8.bindBuffer(34962, v534.buffer);
              v8.vertexAttribPointer(v546, v548, v541, v536, v540, v537);
              v547.type = v541;
              v547.size = v548;
              v547.buffer = v534;
              v547.normalized = v536;
              v547.offset = v537;
              v547.stride = v540;
            }
            if (v547.divisor !== v535) {
              v478.vertexAttribDivisorANGLE(v546, v535);
              v547.divisor = v535;
            }
          } else {
            if (v547.buffer) {
              v8.disableVertexAttribArray(v546);
              v547.buffer = null;
            }
            if (v547.x !== v543 || v547.y !== v544 || v547.z !== v545 || v547.w !== v542) {
              v8.vertexAttrib4f(v546, v543, v544, v545, v542);
              v547.x = v543;
              v547.y = v544;
              v547.z = v545;
              v547.w = v542;
            }
          }
          v549 = v480['positionFractBuffer'];
          v50.buffer = v549;
          v550 = false;
          v551 = null;
          v552 = 0;
          v553 = false;
          v554 = 0;
          v555 = 0;
          v556 = 1;
          v557 = 0;
          v558 = 5126;
          v559 = 0;
          v560 = 0;
          v561 = 0;
          v562 = 0;
          if (v9(v50)) {
            v550 = true;
            v551 = v1.createStream(34962, v50);
            v558 = v551.dtype;
          } else {
            v551 = v1.getBuffer(v50);
            if (v551) {
              v558 = v551.dtype;
            } else if ('constant' in v50) {
              v556 = 2;
              if (typeof v50.constant === 'number') {
                v560 = v50.constant;
                v561 = v562 = v559 = 0;
              } else {
                v560 = v50.constant.length > 0 ? v50.constant[0] : 0;
                v561 = v50.constant.length > 1 ? v50.constant[1] : 0;
                v562 = v50.constant.length > 2 ? v50.constant[2] : 0;
                v559 = v50.constant.length > 3 ? v50.constant[3] : 0;
              }
            } else {
              if (v9(v50.buffer)) {
                v551 = v1.createStream(34962, v50.buffer);
              } else {
                v551 = v1.getBuffer(v50.buffer);
              }
              v558 = 'type' in v50 ? v43[v50.type] : v551.dtype;
              v553 = !!v50.normalized;
              v555 = v50.size | 0;
              v554 = v50.offset | 0;
              v557 = v50.stride | 0;
              v552 = v50.divisor | 0;
            }
          }
          v563 = bCoordFract.location;
          v564 = v0[v563];
          if (v556 === 1) {
            if (!v564.buffer) {
              v8.enableVertexAttribArray(v563);
            }
            v565 = v555 || 2;
            if (v564.type !== v558 || v564.size !== v565 || v564.buffer !== v551 || v564.normalized !== v553 || v564.offset !== v554 || v564.stride !== v557) {
              v8.bindBuffer(34962, v551.buffer);
              v8.vertexAttribPointer(v563, v565, v558, v553, v557, v554);
              v564.type = v558;
              v564.size = v565;
              v564.buffer = v551;
              v564.normalized = v553;
              v564.offset = v554;
              v564.stride = v557;
            }
            if (v564.divisor !== v552) {
              v478.vertexAttribDivisorANGLE(v563, v552);
              v564.divisor = v552;
            }
          } else {
            if (v564.buffer) {
              v8.disableVertexAttribArray(v563);
              v564.buffer = null;
            }
            if (v564.x !== v560 || v564.y !== v561 || v564.z !== v562 || v564.w !== v559) {
              v8.vertexAttrib4f(v563, v560, v561, v562, v559);
              v564.x = v560;
              v564.y = v561;
              v564.z = v562;
              v564.w = v559;
            }
          }
          v566 = v480['colorBuffer'];
          v51.buffer = v566;
          v567 = false;
          v568 = null;
          v569 = 0;
          v570 = false;
          v571 = 0;
          v572 = 0;
          v573 = 1;
          v574 = 0;
          v575 = 5126;
          v576 = 0;
          v577 = 0;
          v578 = 0;
          v579 = 0;
          if (v9(v51)) {
            v567 = true;
            v568 = v1.createStream(34962, v51);
            v575 = v568.dtype;
          } else {
            v568 = v1.getBuffer(v51);
            if (v568) {
              v575 = v568.dtype;
            } else if ('constant' in v51) {
              v573 = 2;
              if (typeof v51.constant === 'number') {
                v577 = v51.constant;
                v578 = v579 = v576 = 0;
              } else {
                v577 = v51.constant.length > 0 ? v51.constant[0] : 0;
                v578 = v51.constant.length > 1 ? v51.constant[1] : 0;
                v579 = v51.constant.length > 2 ? v51.constant[2] : 0;
                v576 = v51.constant.length > 3 ? v51.constant[3] : 0;
              }
            } else {
              if (v9(v51.buffer)) {
                v568 = v1.createStream(34962, v51.buffer);
              } else {
                v568 = v1.getBuffer(v51.buffer);
              }
              v575 = 'type' in v51 ? v43[v51.type] : v568.dtype;
              v570 = !!v51.normalized;
              v572 = v51.size | 0;
              v571 = v51.offset | 0;
              v574 = v51.stride | 0;
              v569 = v51.divisor | 0;
            }
          }
          v580 = color.location;
          v581 = v0[v580];
          if (v573 === 1) {
            if (!v581.buffer) {
              v8.enableVertexAttribArray(v580);
            }
            v582 = v572 || 4;
            if (v581.type !== v575 || v581.size !== v582 || v581.buffer !== v568 || v581.normalized !== v570 || v581.offset !== v571 || v581.stride !== v574) {
              v8.bindBuffer(34962, v568.buffer);
              v8.vertexAttribPointer(v580, v582, v575, v570, v574, v571);
              v581.type = v575;
              v581.size = v582;
              v581.buffer = v568;
              v581.normalized = v570;
              v581.offset = v571;
              v581.stride = v574;
            }
            if (v581.divisor !== v569) {
              v478.vertexAttribDivisorANGLE(v580, v569);
              v581.divisor = v569;
            }
          } else {
            if (v581.buffer) {
              v8.disableVertexAttribArray(v580);
              v581.buffer = null;
            }
            if (v581.x !== v577 || v581.y !== v578 || v581.z !== v579 || v581.w !== v576) {
              v8.vertexAttrib4f(v580, v577, v578, v579, v576);
              v581.x = v577;
              v581.y = v578;
              v581.z = v579;
              v581.w = v576;
            }
          }
          v583 = v480['scale'];
          v584 = v583[0];
          v586 = v583[1];
          if (!v479 || v585 !== v584 || v587 !== v586) {
            v585 = v584;
            v587 = v586;
            v8.uniform2f(scale.location, v584, v586);
          }
          v588 = v480['scaleFract'];
          v589 = v588[0];
          v591 = v588[1];
          if (!v479 || v590 !== v589 || v592 !== v591) {
            v590 = v589;
            v592 = v591;
            v8.uniform2f(scaleFract.location, v589, v591);
          }
          v593 = v480['translate'];
          v594 = v593[0];
          v596 = v593[1];
          if (!v479 || v595 !== v594 || v597 !== v596) {
            v595 = v594;
            v597 = v596;
            v8.uniform2f(translate.location, v594, v596);
          }
          v598 = v480['translateFract'];
          v599 = v598[0];
          v601 = v598[1];
          if (!v479 || v600 !== v599 || v602 !== v601) {
            v600 = v599;
            v602 = v601;
            v8.uniform2f(translateFract.location, v599, v601);
          }
          v603 = v480['thickness'];
          if (!v479 || v604 !== v603) {
            v604 = v603;
            v8.uniform1f(thickness.location, v603);
          }
          v605 = v480['depth'];
          if (!v479 || v606 !== v605) {
            v606 = v605;
            v8.uniform1f(depth.location, v605);
          }
          v607 = $19.call(this, v2, v480, v479);
          v608 = v607[0];
          v610 = v607[1];
          v612 = v607[2];
          v614 = v607[3];
          if (!v479 || v609 !== v608 || v611 !== v610 || v613 !== v612 || v615 !== v614) {
            v609 = v608;
            v611 = v610;
            v613 = v612;
            v615 = v614;
            v8.uniform4f(viewport.location, v608, v610, v612, v614);
          }
          v616 = v480['dashLength'];
          if (!v479 || v617 !== v616) {
            v617 = v616;
            v8.uniform1f(dashLength.location, v616);
          }
          v618 = v480['opacity'];
          if (!v479 || v619 !== v618) {
            v619 = v618;
            v8.uniform1f(opacity.location, v618);
          }
          v620 = v480['dashTexture'];
          if (v620 && v620._reglType === 'framebuffer') {
            v620 = v620.color[0];
          }
          v621 = v620._texture;
          v8.uniform1i(dashTexture.location, v621.bind());
          v623 = v480['count'];
          if (v623 > 0) {
            if (v622) {
              v478.drawElementsInstancedANGLE(5, 4, v622.type, 0 << (v622.type - 5121 >> 1), v623);
            } else {
              v478.drawArraysInstancedANGLE(5, 0, 4, v623);
            }
          } else if (v623 < 0) {
            if (v622) {
              v8.drawElements(5, 4, v622.type, 0 << (v622.type - 5121 >> 1));
            } else {
              v8.drawArrays(5, 0, 4);
            }
          }
          v2.viewportWidth = v486;
          v2.viewportHeight = v487;
          if (v499) {
            v1.destroyStream(v500);
          }
          if (v516) {
            v1.destroyStream(v517);
          }
          if (v533) {
            v1.destroyStream(v534);
          }
          if (v550) {
            v1.destroyStream(v551);
          }
          if (v567) {
            v1.destroyStream(v568);
          }
          v621.unbind();
        }
        v3.dirty = true;
        v15.setVAO(null);
        if (v476) {
          $1.cpuTime += performance.now() - v477;
        }
      },
      'draw': function (a0) {
        var v52, v53, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215;
        v52 = v6.angle_instanced_arrays;
        v53 = v7.next;
        if (v53 !== v7.cur) {
          if (v53) {
            v8.bindFramebuffer(36160, v53.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v53;
        }
        if (v3.dirty) {
          var v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85;
          v54 = v10.dither;
          if (v54 !== v3.dither) {
            if (v54) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v54;
          }
          v55 = v10.depth_func;
          if (v55 !== v3.depth_func) {
            v8.depthFunc(v55);
            v3.depth_func = v55;
          }
          v56 = v24[0];
          v57 = v24[1];
          if (v56 !== v25[0] || v57 !== v25[1]) {
            v8.depthRange(v56, v57);
            v25[0] = v56;
            v25[1] = v57;
          }
          v58 = v10.depth_mask;
          if (v58 !== v3.depth_mask) {
            v8.depthMask(v58);
            v3.depth_mask = v58;
          }
          v59 = v22[0];
          v60 = v22[1];
          v61 = v22[2];
          v62 = v22[3];
          if (v59 !== v23[0] || v60 !== v23[1] || v61 !== v23[2] || v62 !== v23[3]) {
            v8.colorMask(v59, v60, v61, v62);
            v23[0] = v59;
            v23[1] = v60;
            v23[2] = v61;
            v23[3] = v62;
          }
          v63 = v10.cull_enable;
          if (v63 !== v3.cull_enable) {
            if (v63) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v63;
          }
          v64 = v10.cull_face;
          if (v64 !== v3.cull_face) {
            v8.cullFace(v64);
            v3.cull_face = v64;
          }
          v65 = v10.frontFace;
          if (v65 !== v3.frontFace) {
            v8.frontFace(v65);
            v3.frontFace = v65;
          }
          v66 = v10.lineWidth;
          if (v66 !== v3.lineWidth) {
            v8.lineWidth(v66);
            v3.lineWidth = v66;
          }
          v67 = v10.polygonOffset_enable;
          if (v67 !== v3.polygonOffset_enable) {
            if (v67) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v67;
          }
          v68 = v26[0];
          v69 = v26[1];
          if (v68 !== v27[0] || v69 !== v27[1]) {
            v8.polygonOffset(v68, v69);
            v27[0] = v68;
            v27[1] = v69;
          }
          v70 = v10.sample_alpha;
          if (v70 !== v3.sample_alpha) {
            if (v70) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v70;
          }
          v71 = v10.sample_enable;
          if (v71 !== v3.sample_enable) {
            if (v71) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v71;
          }
          v72 = v28[0];
          v73 = v28[1];
          if (v72 !== v29[0] || v73 !== v29[1]) {
            v8.sampleCoverage(v72, v73);
            v29[0] = v72;
            v29[1] = v73;
          }
          v74 = v10.stencil_mask;
          if (v74 !== v3.stencil_mask) {
            v8.stencilMask(v74);
            v3.stencil_mask = v74;
          }
          v75 = v32[0];
          v76 = v32[1];
          v77 = v32[2];
          if (v75 !== v33[0] || v76 !== v33[1] || v77 !== v33[2]) {
            v8.stencilFunc(v75, v76, v77);
            v33[0] = v75;
            v33[1] = v76;
            v33[2] = v77;
          }
          v78 = v36[0];
          v79 = v36[1];
          v80 = v36[2];
          v81 = v36[3];
          if (v78 !== v37[0] || v79 !== v37[1] || v80 !== v37[2] || v81 !== v37[3]) {
            v8.stencilOpSeparate(v78, v79, v80, v81);
            v37[0] = v78;
            v37[1] = v79;
            v37[2] = v80;
            v37[3] = v81;
          }
          v82 = v34[0];
          v83 = v34[1];
          v84 = v34[2];
          v85 = v34[3];
          if (v82 !== v35[0] || v83 !== v35[1] || v84 !== v35[2] || v85 !== v35[3]) {
            v8.stencilOpSeparate(v82, v83, v84, v85);
            v35[0] = v82;
            v35[1] = v83;
            v35[2] = v84;
            v35[3] = v85;
          }
        }
        v86 = a0['viewport'];
        v87 = v86.x | 0;
        v88 = v86.y | 0;
        v89 = 'width' in v86 ? v86.width | 0 : v2.framebufferWidth - v87;
        v90 = 'height' in v86 ? v86.height | 0 : v2.framebufferHeight - v88;
        v91 = v2.viewportWidth;
        v2.viewportWidth = v89;
        v92 = v2.viewportHeight;
        v2.viewportHeight = v90;
        v8.viewport(v87, v88, v89, v90);
        v39[0] = v87;
        v39[1] = v88;
        v39[2] = v89;
        v39[3] = v90;
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v93 = $2.call(this, v2, a0, 0);
        if (v93) {
          v8.enable(2929);
        } else {
          v8.disable(2929);
        }
        v3.depth_enable = v93;
        v94 = a0['viewport'];
        v95 = v94.x | 0;
        v96 = v94.y | 0;
        v97 = 'width' in v94 ? v94.width | 0 : v2.framebufferWidth - v95;
        v98 = 'height' in v94 ? v94.height | 0 : v2.framebufferHeight - v96;
        v8.scissor(v95, v96, v97, v98);
        v31[0] = v95;
        v31[1] = v96;
        v31[2] = v97;
        v31[3] = v98;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v99 = v3.profile;
        if (v99) {
          v100 = performance.now();
          $1.count++;
        }
        v8.useProgram($3.program);
        v101 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v102 = a0['positionBuffer'];
        v47.buffer = v102;
        v103 = false;
        v104 = null;
        v105 = 0;
        v106 = false;
        v107 = 0;
        v108 = 0;
        v109 = 1;
        v110 = 0;
        v111 = 5126;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        v115 = 0;
        if (v9(v47)) {
          v103 = true;
          v104 = v1.createStream(34962, v47);
          v111 = v104.dtype;
        } else {
          v104 = v1.getBuffer(v47);
          if (v104) {
            v111 = v104.dtype;
          } else if ('constant' in v47) {
            v109 = 2;
            if (typeof v47.constant === 'number') {
              v113 = v47.constant;
              v114 = v115 = v112 = 0;
            } else {
              v113 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v114 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v115 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v112 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v104 = v1.createStream(34962, v47.buffer);
            } else {
              v104 = v1.getBuffer(v47.buffer);
            }
            v111 = 'type' in v47 ? v43[v47.type] : v104.dtype;
            v106 = !!v47.normalized;
            v108 = v47.size | 0;
            v107 = v47.offset | 0;
            v110 = v47.stride | 0;
            v105 = v47.divisor | 0;
          }
        }
        v116 = aCoord.location;
        v117 = v0[v116];
        if (v109 === 1) {
          if (!v117.buffer) {
            v8.enableVertexAttribArray(v116);
          }
          v118 = v108 || 2;
          if (v117.type !== v111 || v117.size !== v118 || v117.buffer !== v104 || v117.normalized !== v106 || v117.offset !== v107 || v117.stride !== v110) {
            v8.bindBuffer(34962, v104.buffer);
            v8.vertexAttribPointer(v116, v118, v111, v106, v110, v107);
            v117.type = v111;
            v117.size = v118;
            v117.buffer = v104;
            v117.normalized = v106;
            v117.offset = v107;
            v117.stride = v110;
          }
          if (v117.divisor !== v105) {
            v101.vertexAttribDivisorANGLE(v116, v105);
            v117.divisor = v105;
          }
        } else {
          if (v117.buffer) {
            v8.disableVertexAttribArray(v116);
            v117.buffer = null;
          }
          if (v117.x !== v113 || v117.y !== v114 || v117.z !== v115 || v117.w !== v112) {
            v8.vertexAttrib4f(v116, v113, v114, v115, v112);
            v117.x = v113;
            v117.y = v114;
            v117.z = v115;
            v117.w = v112;
          }
        }
        v119 = a0['positionBuffer'];
        v49.buffer = v119;
        v120 = false;
        v121 = null;
        v122 = 0;
        v123 = false;
        v124 = 0;
        v125 = 0;
        v126 = 1;
        v127 = 0;
        v128 = 5126;
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v132 = 0;
        if (v9(v49)) {
          v120 = true;
          v121 = v1.createStream(34962, v49);
          v128 = v121.dtype;
        } else {
          v121 = v1.getBuffer(v49);
          if (v121) {
            v128 = v121.dtype;
          } else if ('constant' in v49) {
            v126 = 2;
            if (typeof v49.constant === 'number') {
              v130 = v49.constant;
              v131 = v132 = v129 = 0;
            } else {
              v130 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v131 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v132 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v129 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v121 = v1.createStream(34962, v49.buffer);
            } else {
              v121 = v1.getBuffer(v49.buffer);
            }
            v128 = 'type' in v49 ? v43[v49.type] : v121.dtype;
            v123 = !!v49.normalized;
            v125 = v49.size | 0;
            v124 = v49.offset | 0;
            v127 = v49.stride | 0;
            v122 = v49.divisor | 0;
          }
        }
        v133 = bCoord.location;
        v134 = v0[v133];
        if (v126 === 1) {
          if (!v134.buffer) {
            v8.enableVertexAttribArray(v133);
          }
          v135 = v125 || 2;
          if (v134.type !== v128 || v134.size !== v135 || v134.buffer !== v121 || v134.normalized !== v123 || v134.offset !== v124 || v134.stride !== v127) {
            v8.bindBuffer(34962, v121.buffer);
            v8.vertexAttribPointer(v133, v135, v128, v123, v127, v124);
            v134.type = v128;
            v134.size = v135;
            v134.buffer = v121;
            v134.normalized = v123;
            v134.offset = v124;
            v134.stride = v127;
          }
          if (v134.divisor !== v122) {
            v101.vertexAttribDivisorANGLE(v133, v122);
            v134.divisor = v122;
          }
        } else {
          if (v134.buffer) {
            v8.disableVertexAttribArray(v133);
            v134.buffer = null;
          }
          if (v134.x !== v130 || v134.y !== v131 || v134.z !== v132 || v134.w !== v129) {
            v8.vertexAttrib4f(v133, v130, v131, v132, v129);
            v134.x = v130;
            v134.y = v131;
            v134.z = v132;
            v134.w = v129;
          }
        }
        v136 = a0['positionFractBuffer'];
        v48.buffer = v136;
        v137 = false;
        v138 = null;
        v139 = 0;
        v140 = false;
        v141 = 0;
        v142 = 0;
        v143 = 1;
        v144 = 0;
        v145 = 5126;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v149 = 0;
        if (v9(v48)) {
          v137 = true;
          v138 = v1.createStream(34962, v48);
          v145 = v138.dtype;
        } else {
          v138 = v1.getBuffer(v48);
          if (v138) {
            v145 = v138.dtype;
          } else if ('constant' in v48) {
            v143 = 2;
            if (typeof v48.constant === 'number') {
              v147 = v48.constant;
              v148 = v149 = v146 = 0;
            } else {
              v147 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v148 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v149 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v146 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v138 = v1.createStream(34962, v48.buffer);
            } else {
              v138 = v1.getBuffer(v48.buffer);
            }
            v145 = 'type' in v48 ? v43[v48.type] : v138.dtype;
            v140 = !!v48.normalized;
            v142 = v48.size | 0;
            v141 = v48.offset | 0;
            v144 = v48.stride | 0;
            v139 = v48.divisor | 0;
          }
        }
        v150 = aCoordFract.location;
        v151 = v0[v150];
        if (v143 === 1) {
          if (!v151.buffer) {
            v8.enableVertexAttribArray(v150);
          }
          v152 = v142 || 2;
          if (v151.type !== v145 || v151.size !== v152 || v151.buffer !== v138 || v151.normalized !== v140 || v151.offset !== v141 || v151.stride !== v144) {
            v8.bindBuffer(34962, v138.buffer);
            v8.vertexAttribPointer(v150, v152, v145, v140, v144, v141);
            v151.type = v145;
            v151.size = v152;
            v151.buffer = v138;
            v151.normalized = v140;
            v151.offset = v141;
            v151.stride = v144;
          }
          if (v151.divisor !== v139) {
            v101.vertexAttribDivisorANGLE(v150, v139);
            v151.divisor = v139;
          }
        } else {
          if (v151.buffer) {
            v8.disableVertexAttribArray(v150);
            v151.buffer = null;
          }
          if (v151.x !== v147 || v151.y !== v148 || v151.z !== v149 || v151.w !== v146) {
            v8.vertexAttrib4f(v150, v147, v148, v149, v146);
            v151.x = v147;
            v151.y = v148;
            v151.z = v149;
            v151.w = v146;
          }
        }
        v153 = a0['positionFractBuffer'];
        v50.buffer = v153;
        v154 = false;
        v155 = null;
        v156 = 0;
        v157 = false;
        v158 = 0;
        v159 = 0;
        v160 = 1;
        v161 = 0;
        v162 = 5126;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v166 = 0;
        if (v9(v50)) {
          v154 = true;
          v155 = v1.createStream(34962, v50);
          v162 = v155.dtype;
        } else {
          v155 = v1.getBuffer(v50);
          if (v155) {
            v162 = v155.dtype;
          } else if ('constant' in v50) {
            v160 = 2;
            if (typeof v50.constant === 'number') {
              v164 = v50.constant;
              v165 = v166 = v163 = 0;
            } else {
              v164 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v165 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v166 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v163 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v155 = v1.createStream(34962, v50.buffer);
            } else {
              v155 = v1.getBuffer(v50.buffer);
            }
            v162 = 'type' in v50 ? v43[v50.type] : v155.dtype;
            v157 = !!v50.normalized;
            v159 = v50.size | 0;
            v158 = v50.offset | 0;
            v161 = v50.stride | 0;
            v156 = v50.divisor | 0;
          }
        }
        v167 = bCoordFract.location;
        v168 = v0[v167];
        if (v160 === 1) {
          if (!v168.buffer) {
            v8.enableVertexAttribArray(v167);
          }
          v169 = v159 || 2;
          if (v168.type !== v162 || v168.size !== v169 || v168.buffer !== v155 || v168.normalized !== v157 || v168.offset !== v158 || v168.stride !== v161) {
            v8.bindBuffer(34962, v155.buffer);
            v8.vertexAttribPointer(v167, v169, v162, v157, v161, v158);
            v168.type = v162;
            v168.size = v169;
            v168.buffer = v155;
            v168.normalized = v157;
            v168.offset = v158;
            v168.stride = v161;
          }
          if (v168.divisor !== v156) {
            v101.vertexAttribDivisorANGLE(v167, v156);
            v168.divisor = v156;
          }
        } else {
          if (v168.buffer) {
            v8.disableVertexAttribArray(v167);
            v168.buffer = null;
          }
          if (v168.x !== v164 || v168.y !== v165 || v168.z !== v166 || v168.w !== v163) {
            v8.vertexAttrib4f(v167, v164, v165, v166, v163);
            v168.x = v164;
            v168.y = v165;
            v168.z = v166;
            v168.w = v163;
          }
        }
        v170 = a0['colorBuffer'];
        v51.buffer = v170;
        v171 = false;
        v172 = null;
        v173 = 0;
        v174 = false;
        v175 = 0;
        v176 = 0;
        v177 = 1;
        v178 = 0;
        v179 = 5126;
        v180 = 0;
        v181 = 0;
        v182 = 0;
        v183 = 0;
        if (v9(v51)) {
          v171 = true;
          v172 = v1.createStream(34962, v51);
          v179 = v172.dtype;
        } else {
          v172 = v1.getBuffer(v51);
          if (v172) {
            v179 = v172.dtype;
          } else if ('constant' in v51) {
            v177 = 2;
            if (typeof v51.constant === 'number') {
              v181 = v51.constant;
              v182 = v183 = v180 = 0;
            } else {
              v181 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v182 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v183 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v180 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v9(v51.buffer)) {
              v172 = v1.createStream(34962, v51.buffer);
            } else {
              v172 = v1.getBuffer(v51.buffer);
            }
            v179 = 'type' in v51 ? v43[v51.type] : v172.dtype;
            v174 = !!v51.normalized;
            v176 = v51.size | 0;
            v175 = v51.offset | 0;
            v178 = v51.stride | 0;
            v173 = v51.divisor | 0;
          }
        }
        v184 = color.location;
        v185 = v0[v184];
        if (v177 === 1) {
          if (!v185.buffer) {
            v8.enableVertexAttribArray(v184);
          }
          v186 = v176 || 4;
          if (v185.type !== v179 || v185.size !== v186 || v185.buffer !== v172 || v185.normalized !== v174 || v185.offset !== v175 || v185.stride !== v178) {
            v8.bindBuffer(34962, v172.buffer);
            v8.vertexAttribPointer(v184, v186, v179, v174, v178, v175);
            v185.type = v179;
            v185.size = v186;
            v185.buffer = v172;
            v185.normalized = v174;
            v185.offset = v175;
            v185.stride = v178;
          }
          if (v185.divisor !== v173) {
            v101.vertexAttribDivisorANGLE(v184, v173);
            v185.divisor = v173;
          }
        } else {
          if (v185.buffer) {
            v8.disableVertexAttribArray(v184);
            v185.buffer = null;
          }
          if (v185.x !== v181 || v185.y !== v182 || v185.z !== v183 || v185.w !== v180) {
            v8.vertexAttrib4f(v184, v181, v182, v183, v180);
            v185.x = v181;
            v185.y = v182;
            v185.z = v183;
            v185.w = v180;
          }
        }
        v187 = lineEnd.location;
        v188 = v0[v187];
        if (!v188.buffer) {
          v8.enableVertexAttribArray(v187);
        }
        if (v188.type !== 5126 || v188.size !== 1 || v188.buffer !== $4 || v188.normalized !== false || v188.offset !== 0 || v188.stride !== 8) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v187, 1, 5126, false, 8, 0);
          v188.type = 5126;
          v188.size = 1;
          v188.buffer = $4;
          v188.normalized = false;
          v188.offset = 0;
          v188.stride = 8;
        }
        if (v188.divisor !== 0) {
          v101.vertexAttribDivisorANGLE(v187, 0);
          v188.divisor = 0;
        }
        v189 = lineTop.location;
        v190 = v0[v189];
        if (!v190.buffer) {
          v8.enableVertexAttribArray(v189);
        }
        if (v190.type !== 5126 || v190.size !== 1 || v190.buffer !== $5 || v190.normalized !== false || v190.offset !== 4 || v190.stride !== 8) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v189, 1, 5126, false, 8, 4);
          v190.type = 5126;
          v190.size = 1;
          v190.buffer = $5;
          v190.normalized = false;
          v190.offset = 4;
          v190.stride = 8;
        }
        if (v190.divisor !== 0) {
          v101.vertexAttribDivisorANGLE(v189, 0);
          v190.divisor = 0;
        }
        v191 = a0['scale'];
        v192 = v191[0];
        v193 = v191[1];
        v8.uniform2f(scale.location, v192, v193);
        v194 = a0['scaleFract'];
        v195 = v194[0];
        v196 = v194[1];
        v8.uniform2f(scaleFract.location, v195, v196);
        v197 = a0['translate'];
        v198 = v197[0];
        v199 = v197[1];
        v8.uniform2f(translate.location, v198, v199);
        v200 = a0['translateFract'];
        v201 = v200[0];
        v202 = v200[1];
        v8.uniform2f(translateFract.location, v201, v202);
        v203 = a0['thickness'];
        v8.uniform1f(thickness.location, v203);
        v204 = a0['depth'];
        v8.uniform1f(depth.location, v204);
        v205 = $6.call(this, v2, a0, 0);
        v206 = v205[0];
        v207 = v205[1];
        v208 = v205[2];
        v209 = v205[3];
        v8.uniform4f(viewport.location, v206, v207, v208, v209);
        v210 = a0['dashLength'];
        v8.uniform1f(dashLength.location, v210);
        v211 = a0['opacity'];
        v8.uniform1f(opacity.location, v211);
        v212 = a0['dashTexture'];
        if (v212 && v212._reglType === 'framebuffer') {
          v212 = v212.color[0];
        }
        v213 = v212._texture;
        v8.uniform1i(dashTexture.location, v213.bind());
        v214 = v4.elements;
        if (v214) {
          v8.bindBuffer(34963, v214.buffer.buffer);
        } else if (v15.currentVAO) {
          v214 = v5.getElements(v15.currentVAO.elements);
          if (v214) v8.bindBuffer(34963, v214.buffer.buffer);
        }
        v215 = a0['count'];
        if (v215 > 0) {
          if (v214) {
            v101.drawElementsInstancedANGLE(5, 4, v214.type, 0 << (v214.type - 5121 >> 1), v215);
          } else {
            v101.drawArraysInstancedANGLE(5, 0, 4, v215);
          }
        } else if (v215 < 0) {
          if (v214) {
            v8.drawElements(5, 4, v214.type, 0 << (v214.type - 5121 >> 1));
          } else {
            v8.drawArrays(5, 0, 4);
          }
        }
        v3.dirty = true;
        v15.setVAO(null);
        v2.viewportWidth = v91;
        v2.viewportHeight = v92;
        if (v99) {
          $1.cpuTime += performance.now() - v100;
        }
        if (v103) {
          v1.destroyStream(v104);
        }
        if (v120) {
          v1.destroyStream(v121);
        }
        if (v137) {
          v1.destroyStream(v138);
        }
        if (v154) {
          v1.destroyStream(v155);
        }
        if (v171) {
          v1.destroyStream(v172);
        }
        v213.unbind();
      },
      'scope': function (a0, a1, a2) {
        var v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441;
        v216 = a0['viewport'];
        v217 = v216.x | 0;
        v218 = v216.y | 0;
        v219 = 'width' in v216 ? v216.width | 0 : v2.framebufferWidth - v217;
        v220 = 'height' in v216 ? v216.height | 0 : v2.framebufferHeight - v218;
        v221 = v2.viewportWidth;
        v2.viewportWidth = v219;
        v222 = v2.viewportHeight;
        v2.viewportHeight = v220;
        v223 = v38[0];
        v38[0] = v217;
        v224 = v38[1];
        v38[1] = v218;
        v225 = v38[2];
        v38[2] = v219;
        v226 = v38[3];
        v38[3] = v220;
        v227 = v16[0];
        v16[0] = 0;
        v228 = v16[1];
        v16[1] = 0;
        v229 = v16[2];
        v16[2] = 0;
        v230 = v16[3];
        v16[3] = 0;
        v231 = v10.blend_enable;
        v10.blend_enable = true;
        v232 = v18[0];
        v18[0] = 32774;
        v233 = v18[1];
        v18[1] = 32774;
        v234 = v20[0];
        v20[0] = 770;
        v235 = v20[1];
        v20[1] = 771;
        v236 = v20[2];
        v20[2] = 773;
        v237 = v20[3];
        v20[3] = 1;
        v238 = $7.call(this, v2, a0, a2);
        v239 = v10.depth_enable;
        v10.depth_enable = v238;
        v240 = a0['viewport'];
        v241 = v240.x | 0;
        v242 = v240.y | 0;
        v243 = 'width' in v240 ? v240.width | 0 : v2.framebufferWidth - v241;
        v244 = 'height' in v240 ? v240.height | 0 : v2.framebufferHeight - v242;
        v245 = v30[0];
        v30[0] = v241;
        v246 = v30[1];
        v30[1] = v242;
        v247 = v30[2];
        v30[2] = v243;
        v248 = v30[3];
        v30[3] = v244;
        v249 = v10.scissor_enable;
        v10.scissor_enable = true;
        v250 = v10.stencil_enable;
        v10.stencil_enable = false;
        v251 = v3.profile;
        if (v251) {
          v252 = performance.now();
          $1.count++;
        }
        v253 = v4.offset;
        v4.offset = 0;
        v254 = v4.count;
        v4.count = 4;
        v255 = a0['count'];
        v256 = v4.instances;
        v4.instances = v255;
        v257 = v4.primitive;
        v4.primitive = 5;
        v258 = a0['dashLength'];
        v259 = v14[23];
        v14[23] = v258;
        v260 = a0['dashTexture'];
        v261 = v14[24];
        v14[24] = v260;
        v262 = a0['depth'];
        v263 = v14[22];
        v14[22] = v262;
        v264 = a0['id'];
        v265 = v14[31];
        v14[31] = v264;
        v266 = a0['miterLimit'];
        v267 = v14[32];
        v14[32] = v266;
        v268 = $8.call(this, v2, a0, a2);
        v269 = v14[33];
        v14[33] = v268;
        v270 = a0['opacity'];
        v271 = v14[10];
        v14[10] = v270;
        v272 = v2['pixelRatio'];
        v273 = v14[34];
        v14[34] = v272;
        v274 = a0['scale'];
        v275 = v14[6];
        v14[6] = v274;
        v276 = a0['scaleFract'];
        v277 = v14[7];
        v14[7] = v276;
        v278 = a0['thickness'];
        v279 = v14[21];
        v14[21] = v278;
        v280 = a0['translate'];
        v281 = v14[8];
        v14[8] = v280;
        v282 = a0['translateFract'];
        v283 = v14[9];
        v14[9] = v282;
        v284 = $9.call(this, v2, a0, a2);
        v285 = v14[3];
        v14[3] = v284;
        v286 = a0['positionBuffer'];
        v47.buffer = v286;
        v287 = false;
        v288 = null;
        v289 = 0;
        v290 = false;
        v291 = 0;
        v292 = 0;
        v293 = 1;
        v294 = 0;
        v295 = 5126;
        v296 = 0;
        v297 = 0;
        v298 = 0;
        v299 = 0;
        if (v9(v47)) {
          v287 = true;
          v288 = v1.createStream(34962, v47);
          v295 = v288.dtype;
        } else {
          v288 = v1.getBuffer(v47);
          if (v288) {
            v295 = v288.dtype;
          } else if ('constant' in v47) {
            v293 = 2;
            if (typeof v47.constant === 'number') {
              v297 = v47.constant;
              v298 = v299 = v296 = 0;
            } else {
              v297 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v298 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v299 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v296 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v288 = v1.createStream(34962, v47.buffer);
            } else {
              v288 = v1.getBuffer(v47.buffer);
            }
            v295 = 'type' in v47 ? v43[v47.type] : v288.dtype;
            v290 = !!v47.normalized;
            v292 = v47.size | 0;
            v291 = v47.offset | 0;
            v294 = v47.stride | 0;
            v289 = v47.divisor | 0;
          }
        }
        v300 = $10.buffer;
        $10.buffer = v288;
        v301 = $10.divisor;
        $10.divisor = v289;
        v302 = $10.normalized;
        $10.normalized = v290;
        v303 = $10.offset;
        $10.offset = v291;
        v304 = $10.size;
        $10.size = v292;
        v305 = $10.state;
        $10.state = v293;
        v306 = $10.stride;
        $10.stride = v294;
        v307 = $10.type;
        $10.type = v295;
        v308 = $10.w;
        $10.w = v296;
        v309 = $10.x;
        $10.x = v297;
        v310 = $10.y;
        $10.y = v298;
        v311 = $10.z;
        $10.z = v299;
        v312 = a0['positionFractBuffer'];
        v48.buffer = v312;
        v313 = false;
        v314 = null;
        v315 = 0;
        v316 = false;
        v317 = 0;
        v318 = 0;
        v319 = 1;
        v320 = 0;
        v321 = 5126;
        v322 = 0;
        v323 = 0;
        v324 = 0;
        v325 = 0;
        if (v9(v48)) {
          v313 = true;
          v314 = v1.createStream(34962, v48);
          v321 = v314.dtype;
        } else {
          v314 = v1.getBuffer(v48);
          if (v314) {
            v321 = v314.dtype;
          } else if ('constant' in v48) {
            v319 = 2;
            if (typeof v48.constant === 'number') {
              v323 = v48.constant;
              v324 = v325 = v322 = 0;
            } else {
              v323 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v324 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v325 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v322 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v314 = v1.createStream(34962, v48.buffer);
            } else {
              v314 = v1.getBuffer(v48.buffer);
            }
            v321 = 'type' in v48 ? v43[v48.type] : v314.dtype;
            v316 = !!v48.normalized;
            v318 = v48.size | 0;
            v317 = v48.offset | 0;
            v320 = v48.stride | 0;
            v315 = v48.divisor | 0;
          }
        }
        v326 = $11.buffer;
        $11.buffer = v314;
        v327 = $11.divisor;
        $11.divisor = v315;
        v328 = $11.normalized;
        $11.normalized = v316;
        v329 = $11.offset;
        $11.offset = v317;
        v330 = $11.size;
        $11.size = v318;
        v331 = $11.state;
        $11.state = v319;
        v332 = $11.stride;
        $11.stride = v320;
        v333 = $11.type;
        $11.type = v321;
        v334 = $11.w;
        $11.w = v322;
        v335 = $11.x;
        $11.x = v323;
        v336 = $11.y;
        $11.y = v324;
        v337 = $11.z;
        $11.z = v325;
        v338 = a0['positionBuffer'];
        v49.buffer = v338;
        v339 = false;
        v340 = null;
        v341 = 0;
        v342 = false;
        v343 = 0;
        v344 = 0;
        v345 = 1;
        v346 = 0;
        v347 = 5126;
        v348 = 0;
        v349 = 0;
        v350 = 0;
        v351 = 0;
        if (v9(v49)) {
          v339 = true;
          v340 = v1.createStream(34962, v49);
          v347 = v340.dtype;
        } else {
          v340 = v1.getBuffer(v49);
          if (v340) {
            v347 = v340.dtype;
          } else if ('constant' in v49) {
            v345 = 2;
            if (typeof v49.constant === 'number') {
              v349 = v49.constant;
              v350 = v351 = v348 = 0;
            } else {
              v349 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v350 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v351 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v348 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v340 = v1.createStream(34962, v49.buffer);
            } else {
              v340 = v1.getBuffer(v49.buffer);
            }
            v347 = 'type' in v49 ? v43[v49.type] : v340.dtype;
            v342 = !!v49.normalized;
            v344 = v49.size | 0;
            v343 = v49.offset | 0;
            v346 = v49.stride | 0;
            v341 = v49.divisor | 0;
          }
        }
        v352 = $12.buffer;
        $12.buffer = v340;
        v353 = $12.divisor;
        $12.divisor = v341;
        v354 = $12.normalized;
        $12.normalized = v342;
        v355 = $12.offset;
        $12.offset = v343;
        v356 = $12.size;
        $12.size = v344;
        v357 = $12.state;
        $12.state = v345;
        v358 = $12.stride;
        $12.stride = v346;
        v359 = $12.type;
        $12.type = v347;
        v360 = $12.w;
        $12.w = v348;
        v361 = $12.x;
        $12.x = v349;
        v362 = $12.y;
        $12.y = v350;
        v363 = $12.z;
        $12.z = v351;
        v364 = a0['positionFractBuffer'];
        v50.buffer = v364;
        v365 = false;
        v366 = null;
        v367 = 0;
        v368 = false;
        v369 = 0;
        v370 = 0;
        v371 = 1;
        v372 = 0;
        v373 = 5126;
        v374 = 0;
        v375 = 0;
        v376 = 0;
        v377 = 0;
        if (v9(v50)) {
          v365 = true;
          v366 = v1.createStream(34962, v50);
          v373 = v366.dtype;
        } else {
          v366 = v1.getBuffer(v50);
          if (v366) {
            v373 = v366.dtype;
          } else if ('constant' in v50) {
            v371 = 2;
            if (typeof v50.constant === 'number') {
              v375 = v50.constant;
              v376 = v377 = v374 = 0;
            } else {
              v375 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v376 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v377 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v374 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v366 = v1.createStream(34962, v50.buffer);
            } else {
              v366 = v1.getBuffer(v50.buffer);
            }
            v373 = 'type' in v50 ? v43[v50.type] : v366.dtype;
            v368 = !!v50.normalized;
            v370 = v50.size | 0;
            v369 = v50.offset | 0;
            v372 = v50.stride | 0;
            v367 = v50.divisor | 0;
          }
        }
        v378 = $13.buffer;
        $13.buffer = v366;
        v379 = $13.divisor;
        $13.divisor = v367;
        v380 = $13.normalized;
        $13.normalized = v368;
        v381 = $13.offset;
        $13.offset = v369;
        v382 = $13.size;
        $13.size = v370;
        v383 = $13.state;
        $13.state = v371;
        v384 = $13.stride;
        $13.stride = v372;
        v385 = $13.type;
        $13.type = v373;
        v386 = $13.w;
        $13.w = v374;
        v387 = $13.x;
        $13.x = v375;
        v388 = $13.y;
        $13.y = v376;
        v389 = $13.z;
        $13.z = v377;
        v390 = a0['colorBuffer'];
        v51.buffer = v390;
        v391 = false;
        v392 = null;
        v393 = 0;
        v394 = false;
        v395 = 0;
        v396 = 0;
        v397 = 1;
        v398 = 0;
        v399 = 5126;
        v400 = 0;
        v401 = 0;
        v402 = 0;
        v403 = 0;
        if (v9(v51)) {
          v391 = true;
          v392 = v1.createStream(34962, v51);
          v399 = v392.dtype;
        } else {
          v392 = v1.getBuffer(v51);
          if (v392) {
            v399 = v392.dtype;
          } else if ('constant' in v51) {
            v397 = 2;
            if (typeof v51.constant === 'number') {
              v401 = v51.constant;
              v402 = v403 = v400 = 0;
            } else {
              v401 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v402 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v403 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v400 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v9(v51.buffer)) {
              v392 = v1.createStream(34962, v51.buffer);
            } else {
              v392 = v1.getBuffer(v51.buffer);
            }
            v399 = 'type' in v51 ? v43[v51.type] : v392.dtype;
            v394 = !!v51.normalized;
            v396 = v51.size | 0;
            v395 = v51.offset | 0;
            v398 = v51.stride | 0;
            v393 = v51.divisor | 0;
          }
        }
        v404 = $14.buffer;
        $14.buffer = v392;
        v405 = $14.divisor;
        $14.divisor = v393;
        v406 = $14.normalized;
        $14.normalized = v394;
        v407 = $14.offset;
        $14.offset = v395;
        v408 = $14.size;
        $14.size = v396;
        v409 = $14.state;
        $14.state = v397;
        v410 = $14.stride;
        $14.stride = v398;
        v411 = $14.type;
        $14.type = v399;
        v412 = $14.w;
        $14.w = v400;
        v413 = $14.x;
        $14.x = v401;
        v414 = $14.y;
        $14.y = v402;
        v415 = $14.z;
        $14.z = v403;
        v416 = $15.buffer;
        $15.buffer = $4;
        v417 = $15.divisor;
        $15.divisor = 0;
        v418 = $15.normalized;
        $15.normalized = false;
        v419 = $15.offset;
        $15.offset = 0;
        v420 = $15.size;
        $15.size = 0;
        v421 = $15.state;
        $15.state = 1;
        v422 = $15.stride;
        $15.stride = 8;
        v423 = $15.type;
        $15.type = 5126;
        v424 = $15.w;
        $15.w = 0;
        v425 = $15.x;
        $15.x = 0;
        v426 = $15.y;
        $15.y = 0;
        v427 = $15.z;
        $15.z = 0;
        v428 = $16.buffer;
        $16.buffer = $5;
        v429 = $16.divisor;
        $16.divisor = 0;
        v430 = $16.normalized;
        $16.normalized = false;
        v431 = $16.offset;
        $16.offset = 4;
        v432 = $16.size;
        $16.size = 0;
        v433 = $16.state;
        $16.state = 1;
        v434 = $16.stride;
        $16.stride = 8;
        v435 = $16.type;
        $16.type = 5126;
        v436 = $16.w;
        $16.w = 0;
        v437 = $16.x;
        $16.x = 0;
        v438 = $16.y;
        $16.y = 0;
        v439 = $16.z;
        $16.z = 0;
        v440 = v11.vert;
        v11.vert = 20;
        v441 = v11.frag;
        v11.frag = 19;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v221;
        v2.viewportHeight = v222;
        v38[0] = v223;
        v38[1] = v224;
        v38[2] = v225;
        v38[3] = v226;
        v16[0] = v227;
        v16[1] = v228;
        v16[2] = v229;
        v16[3] = v230;
        v10.blend_enable = v231;
        v18[0] = v232;
        v18[1] = v233;
        v20[0] = v234;
        v20[1] = v235;
        v20[2] = v236;
        v20[3] = v237;
        v10.depth_enable = v239;
        v30[0] = v245;
        v30[1] = v246;
        v30[2] = v247;
        v30[3] = v248;
        v10.scissor_enable = v249;
        v10.stencil_enable = v250;
        if (v251) {
          $1.cpuTime += performance.now() - v252;
        }
        v4.offset = v253;
        v4.count = v254;
        v4.instances = v256;
        v4.primitive = v257;
        v14[23] = v259;
        v14[24] = v261;
        v14[22] = v263;
        v14[31] = v265;
        v14[32] = v267;
        v14[33] = v269;
        v14[10] = v271;
        v14[34] = v273;
        v14[6] = v275;
        v14[7] = v277;
        v14[21] = v279;
        v14[8] = v281;
        v14[9] = v283;
        v14[3] = v285;
        if (v287) {
          v1.destroyStream(v288);
        }
        $10.buffer = v300;
        $10.divisor = v301;
        $10.normalized = v302;
        $10.offset = v303;
        $10.size = v304;
        $10.state = v305;
        $10.stride = v306;
        $10.type = v307;
        $10.w = v308;
        $10.x = v309;
        $10.y = v310;
        $10.z = v311;
        if (v313) {
          v1.destroyStream(v314);
        }
        $11.buffer = v326;
        $11.divisor = v327;
        $11.normalized = v328;
        $11.offset = v329;
        $11.size = v330;
        $11.state = v331;
        $11.stride = v332;
        $11.type = v333;
        $11.w = v334;
        $11.x = v335;
        $11.y = v336;
        $11.z = v337;
        if (v339) {
          v1.destroyStream(v340);
        }
        $12.buffer = v352;
        $12.divisor = v353;
        $12.normalized = v354;
        $12.offset = v355;
        $12.size = v356;
        $12.state = v357;
        $12.stride = v358;
        $12.type = v359;
        $12.w = v360;
        $12.x = v361;
        $12.y = v362;
        $12.z = v363;
        if (v365) {
          v1.destroyStream(v366);
        }
        $13.buffer = v378;
        $13.divisor = v379;
        $13.normalized = v380;
        $13.offset = v381;
        $13.size = v382;
        $13.state = v383;
        $13.stride = v384;
        $13.type = v385;
        $13.w = v386;
        $13.x = v387;
        $13.y = v388;
        $13.z = v389;
        if (v391) {
          v1.destroyStream(v392);
        }
        $14.buffer = v404;
        $14.divisor = v405;
        $14.normalized = v406;
        $14.offset = v407;
        $14.size = v408;
        $14.state = v409;
        $14.stride = v410;
        $14.type = v411;
        $14.w = v412;
        $14.x = v413;
        $14.y = v414;
        $14.z = v415;
        $15.buffer = v416;
        $15.divisor = v417;
        $15.normalized = v418;
        $15.offset = v419;
        $15.size = v420;
        $15.state = v421;
        $15.stride = v422;
        $15.type = v423;
        $15.w = v424;
        $15.x = v425;
        $15.y = v426;
        $15.z = v427;
        $16.buffer = v428;
        $16.divisor = v429;
        $16.normalized = v430;
        $16.offset = v431;
        $16.size = v432;
        $16.state = v433;
        $16.stride = v434;
        $16.type = v435;
        $16.w = v436;
        $16.x = v437;
        $16.y = v438;
        $16.z = v439;
        v11.vert = v440;
        v11.frag = v441;
        v3.dirty = true;
      }

    };
  },
  '$22,aColor,aCoord,bColor,bCoord,dashLength,dashTexture,depth,lineEnd,lineTop,miterLimit,miterMode,nextCoord,opacity,prevCoord,scale,thickness,translate,viewport': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, aColor, aCoord, bColor, bCoord, dashLength, dashTexture, depth, lineEnd, lineTop, miterLimit, miterMode, nextCoord, opacity, prevCoord, scale, thickness, translate, viewport) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v47.divisor = 1;
    v47.offset = 0;
    v47.stride = 4;
    v48 = {};
    v48.divisor = 1;
    v48.offset = 8;
    v48.stride = 8;
    v49 = {};
    v49.divisor = 1;
    v49.offset = 4;
    v49.stride = 4;
    v50 = {};
    v50.divisor = 1;
    v50.offset = 16;
    v50.stride = 8;
    v51 = {};
    v51.divisor = 1;
    v51.offset = 24;
    v51.stride = 8;
    v52 = {};
    v52.divisor = 1;
    v52.offset = 0;
    v52.stride = 8;
    return {
      'batch': function (a0, a1) {
        var v482, v483, v514, v515, v516, v517, v518;
        v482 = v6.angle_instanced_arrays;
        v483 = v7.next;
        if (v483 !== v7.cur) {
          if (v483) {
            v8.bindFramebuffer(36160, v483.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v483;
        }
        if (v3.dirty) {
          var v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513;
          v484 = v10.dither;
          if (v484 !== v3.dither) {
            if (v484) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v484;
          }
          v485 = v10.depth_func;
          if (v485 !== v3.depth_func) {
            v8.depthFunc(v485);
            v3.depth_func = v485;
          }
          v486 = v24[0];
          v487 = v24[1];
          if (v486 !== v25[0] || v487 !== v25[1]) {
            v8.depthRange(v486, v487);
            v25[0] = v486;
            v25[1] = v487;
          }
          v488 = v10.depth_mask;
          if (v488 !== v3.depth_mask) {
            v8.depthMask(v488);
            v3.depth_mask = v488;
          }
          v489 = v22[0];
          v490 = v22[1];
          v491 = v22[2];
          v492 = v22[3];
          if (v489 !== v23[0] || v490 !== v23[1] || v491 !== v23[2] || v492 !== v23[3]) {
            v8.colorMask(v489, v490, v491, v492);
            v23[0] = v489;
            v23[1] = v490;
            v23[2] = v491;
            v23[3] = v492;
          }
          v493 = v10.frontFace;
          if (v493 !== v3.frontFace) {
            v8.frontFace(v493);
            v3.frontFace = v493;
          }
          v494 = v10.lineWidth;
          if (v494 !== v3.lineWidth) {
            v8.lineWidth(v494);
            v3.lineWidth = v494;
          }
          v495 = v10.polygonOffset_enable;
          if (v495 !== v3.polygonOffset_enable) {
            if (v495) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v495;
          }
          v496 = v26[0];
          v497 = v26[1];
          if (v496 !== v27[0] || v497 !== v27[1]) {
            v8.polygonOffset(v496, v497);
            v27[0] = v496;
            v27[1] = v497;
          }
          v498 = v10.sample_alpha;
          if (v498 !== v3.sample_alpha) {
            if (v498) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v498;
          }
          v499 = v10.sample_enable;
          if (v499 !== v3.sample_enable) {
            if (v499) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v499;
          }
          v500 = v28[0];
          v501 = v28[1];
          if (v500 !== v29[0] || v501 !== v29[1]) {
            v8.sampleCoverage(v500, v501);
            v29[0] = v500;
            v29[1] = v501;
          }
          v502 = v10.stencil_mask;
          if (v502 !== v3.stencil_mask) {
            v8.stencilMask(v502);
            v3.stencil_mask = v502;
          }
          v503 = v32[0];
          v504 = v32[1];
          v505 = v32[2];
          if (v503 !== v33[0] || v504 !== v33[1] || v505 !== v33[2]) {
            v8.stencilFunc(v503, v504, v505);
            v33[0] = v503;
            v33[1] = v504;
            v33[2] = v505;
          }
          v506 = v36[0];
          v507 = v36[1];
          v508 = v36[2];
          v509 = v36[3];
          if (v506 !== v37[0] || v507 !== v37[1] || v508 !== v37[2] || v509 !== v37[3]) {
            v8.stencilOpSeparate(v506, v507, v508, v509);
            v37[0] = v506;
            v37[1] = v507;
            v37[2] = v508;
            v37[3] = v509;
          }
          v510 = v34[0];
          v511 = v34[1];
          v512 = v34[2];
          v513 = v34[3];
          if (v510 !== v35[0] || v511 !== v35[1] || v512 !== v35[2] || v513 !== v35[3]) {
            v8.stencilOpSeparate(v510, v511, v512, v513);
            v35[0] = v510;
            v35[1] = v511;
            v35[2] = v512;
            v35[3] = v513;
          }
        }
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.enable(2884);
        v3.cull_enable = true;
        v8.cullFace(1029);
        v3.cull_face = 1029;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v514 = v3.profile;
        if (v514) {
          v515 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($19.program);
        v516 = v6.angle_instanced_arrays;
        var v532, v533, v534, v535, v671;
        v15.setVAO(null);
        v532 = lineEnd.location;
        v533 = v0[v532];
        if (!v533.buffer) {
          v8.enableVertexAttribArray(v532);
        }
        if (v533.type !== 5126 || v533.size !== 1 || v533.buffer !== $4 || v533.normalized !== false || v533.offset !== 0 || v533.stride !== 8) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v532, 1, 5126, false, 8, 0);
          v533.type = 5126;
          v533.size = 1;
          v533.buffer = $4;
          v533.normalized = false;
          v533.offset = 0;
          v533.stride = 8;
        }
        if (v533.divisor !== 0) {
          v516.vertexAttribDivisorANGLE(v532, 0);
          v533.divisor = 0;
        }
        v534 = lineTop.location;
        v535 = v0[v534];
        if (!v535.buffer) {
          v8.enableVertexAttribArray(v534);
        }
        if (v535.type !== 5126 || v535.size !== 1 || v535.buffer !== $5 || v535.normalized !== false || v535.offset !== 4 || v535.stride !== 8) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v534, 1, 5126, false, 8, 4);
          v535.type = 5126;
          v535.size = 1;
          v535.buffer = $5;
          v535.normalized = false;
          v535.offset = 4;
          v535.stride = 8;
        }
        if (v535.divisor !== 0) {
          v516.vertexAttribDivisorANGLE(v534, 0);
          v535.divisor = 0;
        }
        v671 = v4.elements;
        if (v671) {
          v8.bindBuffer(34963, v671.buffer.buffer);
        } else if (v15.currentVAO) {
          v671 = v5.getElements(v15.currentVAO.elements);
          if (v671) v8.bindBuffer(34963, v671.buffer.buffer);
        }
        for (v517 = 0; v517 < a1; ++v517) {
          v518 = a0[v517];
          var v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572, v573, v574, v575, v576, v577, v578, v579, v580, v581, v582, v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608, v609, v610, v611, v612, v613, v614, v615, v616, v617, v618, v619, v620, v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v668, v669, v670, v672;
          v519 = v518['viewport'];
          v520 = v519.x | 0;
          v521 = v519.y | 0;
          v522 = 'width' in v519 ? v519.width | 0 : v2.framebufferWidth - v520;
          v523 = 'height' in v519 ? v519.height | 0 : v2.framebufferHeight - v521;
          v524 = v2.viewportWidth;
          v2.viewportWidth = v522;
          v525 = v2.viewportHeight;
          v2.viewportHeight = v523;
          v8.viewport(v520, v521, v522, v523);
          v39[0] = v520;
          v39[1] = v521;
          v39[2] = v522;
          v39[3] = v523;
          v526 = $20.call(this, v2, v518, v517);
          if (v526) {
            v8.enable(2929);
          } else {
            v8.disable(2929);
          }
          v3.depth_enable = v526;
          v527 = v518['viewport'];
          v528 = v527.x | 0;
          v529 = v527.y | 0;
          v530 = 'width' in v527 ? v527.width | 0 : v2.framebufferWidth - v528;
          v531 = 'height' in v527 ? v527.height | 0 : v2.framebufferHeight - v529;
          v8.scissor(v528, v529, v530, v531);
          v31[0] = v528;
          v31[1] = v529;
          v31[2] = v530;
          v31[3] = v531;
          v536 = v518['positionBuffer'];
          v48.buffer = v536;
          v537 = false;
          v538 = null;
          v539 = 0;
          v540 = false;
          v541 = 0;
          v542 = 0;
          v543 = 1;
          v544 = 0;
          v545 = 5126;
          v546 = 0;
          v547 = 0;
          v548 = 0;
          v549 = 0;
          if (v9(v48)) {
            v537 = true;
            v538 = v1.createStream(34962, v48);
            v545 = v538.dtype;
          } else {
            v538 = v1.getBuffer(v48);
            if (v538) {
              v545 = v538.dtype;
            } else if ('constant' in v48) {
              v543 = 2;
              if (typeof v48.constant === 'number') {
                v547 = v48.constant;
                v548 = v549 = v546 = 0;
              } else {
                v547 = v48.constant.length > 0 ? v48.constant[0] : 0;
                v548 = v48.constant.length > 1 ? v48.constant[1] : 0;
                v549 = v48.constant.length > 2 ? v48.constant[2] : 0;
                v546 = v48.constant.length > 3 ? v48.constant[3] : 0;
              }
            } else {
              if (v9(v48.buffer)) {
                v538 = v1.createStream(34962, v48.buffer);
              } else {
                v538 = v1.getBuffer(v48.buffer);
              }
              v545 = 'type' in v48 ? v43[v48.type] : v538.dtype;
              v540 = !!v48.normalized;
              v542 = v48.size | 0;
              v541 = v48.offset | 0;
              v544 = v48.stride | 0;
              v539 = v48.divisor | 0;
            }
          }
          v550 = aCoord.location;
          v551 = v0[v550];
          if (v543 === 1) {
            if (!v551.buffer) {
              v8.enableVertexAttribArray(v550);
            }
            v552 = v542 || 2;
            if (v551.type !== v545 || v551.size !== v552 || v551.buffer !== v538 || v551.normalized !== v540 || v551.offset !== v541 || v551.stride !== v544) {
              v8.bindBuffer(34962, v538.buffer);
              v8.vertexAttribPointer(v550, v552, v545, v540, v544, v541);
              v551.type = v545;
              v551.size = v552;
              v551.buffer = v538;
              v551.normalized = v540;
              v551.offset = v541;
              v551.stride = v544;
            }
            if (v551.divisor !== v539) {
              v516.vertexAttribDivisorANGLE(v550, v539);
              v551.divisor = v539;
            }
          } else {
            if (v551.buffer) {
              v8.disableVertexAttribArray(v550);
              v551.buffer = null;
            }
            if (v551.x !== v547 || v551.y !== v548 || v551.z !== v549 || v551.w !== v546) {
              v8.vertexAttrib4f(v550, v547, v548, v549, v546);
              v551.x = v547;
              v551.y = v548;
              v551.z = v549;
              v551.w = v546;
            }
          }
          v553 = v518['positionBuffer'];
          v50.buffer = v553;
          v554 = false;
          v555 = null;
          v556 = 0;
          v557 = false;
          v558 = 0;
          v559 = 0;
          v560 = 1;
          v561 = 0;
          v562 = 5126;
          v563 = 0;
          v564 = 0;
          v565 = 0;
          v566 = 0;
          if (v9(v50)) {
            v554 = true;
            v555 = v1.createStream(34962, v50);
            v562 = v555.dtype;
          } else {
            v555 = v1.getBuffer(v50);
            if (v555) {
              v562 = v555.dtype;
            } else if ('constant' in v50) {
              v560 = 2;
              if (typeof v50.constant === 'number') {
                v564 = v50.constant;
                v565 = v566 = v563 = 0;
              } else {
                v564 = v50.constant.length > 0 ? v50.constant[0] : 0;
                v565 = v50.constant.length > 1 ? v50.constant[1] : 0;
                v566 = v50.constant.length > 2 ? v50.constant[2] : 0;
                v563 = v50.constant.length > 3 ? v50.constant[3] : 0;
              }
            } else {
              if (v9(v50.buffer)) {
                v555 = v1.createStream(34962, v50.buffer);
              } else {
                v555 = v1.getBuffer(v50.buffer);
              }
              v562 = 'type' in v50 ? v43[v50.type] : v555.dtype;
              v557 = !!v50.normalized;
              v559 = v50.size | 0;
              v558 = v50.offset | 0;
              v561 = v50.stride | 0;
              v556 = v50.divisor | 0;
            }
          }
          v567 = bCoord.location;
          v568 = v0[v567];
          if (v560 === 1) {
            if (!v568.buffer) {
              v8.enableVertexAttribArray(v567);
            }
            v569 = v559 || 2;
            if (v568.type !== v562 || v568.size !== v569 || v568.buffer !== v555 || v568.normalized !== v557 || v568.offset !== v558 || v568.stride !== v561) {
              v8.bindBuffer(34962, v555.buffer);
              v8.vertexAttribPointer(v567, v569, v562, v557, v561, v558);
              v568.type = v562;
              v568.size = v569;
              v568.buffer = v555;
              v568.normalized = v557;
              v568.offset = v558;
              v568.stride = v561;
            }
            if (v568.divisor !== v556) {
              v516.vertexAttribDivisorANGLE(v567, v556);
              v568.divisor = v556;
            }
          } else {
            if (v568.buffer) {
              v8.disableVertexAttribArray(v567);
              v568.buffer = null;
            }
            if (v568.x !== v564 || v568.y !== v565 || v568.z !== v566 || v568.w !== v563) {
              v8.vertexAttrib4f(v567, v564, v565, v566, v563);
              v568.x = v564;
              v568.y = v565;
              v568.z = v566;
              v568.w = v563;
            }
          }
          v570 = v518['positionBuffer'];
          v51.buffer = v570;
          v571 = false;
          v572 = null;
          v573 = 0;
          v574 = false;
          v575 = 0;
          v576 = 0;
          v577 = 1;
          v578 = 0;
          v579 = 5126;
          v580 = 0;
          v581 = 0;
          v582 = 0;
          v583 = 0;
          if (v9(v51)) {
            v571 = true;
            v572 = v1.createStream(34962, v51);
            v579 = v572.dtype;
          } else {
            v572 = v1.getBuffer(v51);
            if (v572) {
              v579 = v572.dtype;
            } else if ('constant' in v51) {
              v577 = 2;
              if (typeof v51.constant === 'number') {
                v581 = v51.constant;
                v582 = v583 = v580 = 0;
              } else {
                v581 = v51.constant.length > 0 ? v51.constant[0] : 0;
                v582 = v51.constant.length > 1 ? v51.constant[1] : 0;
                v583 = v51.constant.length > 2 ? v51.constant[2] : 0;
                v580 = v51.constant.length > 3 ? v51.constant[3] : 0;
              }
            } else {
              if (v9(v51.buffer)) {
                v572 = v1.createStream(34962, v51.buffer);
              } else {
                v572 = v1.getBuffer(v51.buffer);
              }
              v579 = 'type' in v51 ? v43[v51.type] : v572.dtype;
              v574 = !!v51.normalized;
              v576 = v51.size | 0;
              v575 = v51.offset | 0;
              v578 = v51.stride | 0;
              v573 = v51.divisor | 0;
            }
          }
          v584 = nextCoord.location;
          v585 = v0[v584];
          if (v577 === 1) {
            if (!v585.buffer) {
              v8.enableVertexAttribArray(v584);
            }
            v586 = v576 || 2;
            if (v585.type !== v579 || v585.size !== v586 || v585.buffer !== v572 || v585.normalized !== v574 || v585.offset !== v575 || v585.stride !== v578) {
              v8.bindBuffer(34962, v572.buffer);
              v8.vertexAttribPointer(v584, v586, v579, v574, v578, v575);
              v585.type = v579;
              v585.size = v586;
              v585.buffer = v572;
              v585.normalized = v574;
              v585.offset = v575;
              v585.stride = v578;
            }
            if (v585.divisor !== v573) {
              v516.vertexAttribDivisorANGLE(v584, v573);
              v585.divisor = v573;
            }
          } else {
            if (v585.buffer) {
              v8.disableVertexAttribArray(v584);
              v585.buffer = null;
            }
            if (v585.x !== v581 || v585.y !== v582 || v585.z !== v583 || v585.w !== v580) {
              v8.vertexAttrib4f(v584, v581, v582, v583, v580);
              v585.x = v581;
              v585.y = v582;
              v585.z = v583;
              v585.w = v580;
            }
          }
          v587 = v518['positionBuffer'];
          v52.buffer = v587;
          v588 = false;
          v589 = null;
          v590 = 0;
          v591 = false;
          v592 = 0;
          v593 = 0;
          v594 = 1;
          v595 = 0;
          v596 = 5126;
          v597 = 0;
          v598 = 0;
          v599 = 0;
          v600 = 0;
          if (v9(v52)) {
            v588 = true;
            v589 = v1.createStream(34962, v52);
            v596 = v589.dtype;
          } else {
            v589 = v1.getBuffer(v52);
            if (v589) {
              v596 = v589.dtype;
            } else if ('constant' in v52) {
              v594 = 2;
              if (typeof v52.constant === 'number') {
                v598 = v52.constant;
                v599 = v600 = v597 = 0;
              } else {
                v598 = v52.constant.length > 0 ? v52.constant[0] : 0;
                v599 = v52.constant.length > 1 ? v52.constant[1] : 0;
                v600 = v52.constant.length > 2 ? v52.constant[2] : 0;
                v597 = v52.constant.length > 3 ? v52.constant[3] : 0;
              }
            } else {
              if (v9(v52.buffer)) {
                v589 = v1.createStream(34962, v52.buffer);
              } else {
                v589 = v1.getBuffer(v52.buffer);
              }
              v596 = 'type' in v52 ? v43[v52.type] : v589.dtype;
              v591 = !!v52.normalized;
              v593 = v52.size | 0;
              v592 = v52.offset | 0;
              v595 = v52.stride | 0;
              v590 = v52.divisor | 0;
            }
          }
          v601 = prevCoord.location;
          v602 = v0[v601];
          if (v594 === 1) {
            if (!v602.buffer) {
              v8.enableVertexAttribArray(v601);
            }
            v603 = v593 || 2;
            if (v602.type !== v596 || v602.size !== v603 || v602.buffer !== v589 || v602.normalized !== v591 || v602.offset !== v592 || v602.stride !== v595) {
              v8.bindBuffer(34962, v589.buffer);
              v8.vertexAttribPointer(v601, v603, v596, v591, v595, v592);
              v602.type = v596;
              v602.size = v603;
              v602.buffer = v589;
              v602.normalized = v591;
              v602.offset = v592;
              v602.stride = v595;
            }
            if (v602.divisor !== v590) {
              v516.vertexAttribDivisorANGLE(v601, v590);
              v602.divisor = v590;
            }
          } else {
            if (v602.buffer) {
              v8.disableVertexAttribArray(v601);
              v602.buffer = null;
            }
            if (v602.x !== v598 || v602.y !== v599 || v602.z !== v600 || v602.w !== v597) {
              v8.vertexAttrib4f(v601, v598, v599, v600, v597);
              v602.x = v598;
              v602.y = v599;
              v602.z = v600;
              v602.w = v597;
            }
          }
          v604 = v518['colorBuffer'];
          v47.buffer = v604;
          v605 = false;
          v606 = null;
          v607 = 0;
          v608 = false;
          v609 = 0;
          v610 = 0;
          v611 = 1;
          v612 = 0;
          v613 = 5126;
          v614 = 0;
          v615 = 0;
          v616 = 0;
          v617 = 0;
          if (v9(v47)) {
            v605 = true;
            v606 = v1.createStream(34962, v47);
            v613 = v606.dtype;
          } else {
            v606 = v1.getBuffer(v47);
            if (v606) {
              v613 = v606.dtype;
            } else if ('constant' in v47) {
              v611 = 2;
              if (typeof v47.constant === 'number') {
                v615 = v47.constant;
                v616 = v617 = v614 = 0;
              } else {
                v615 = v47.constant.length > 0 ? v47.constant[0] : 0;
                v616 = v47.constant.length > 1 ? v47.constant[1] : 0;
                v617 = v47.constant.length > 2 ? v47.constant[2] : 0;
                v614 = v47.constant.length > 3 ? v47.constant[3] : 0;
              }
            } else {
              if (v9(v47.buffer)) {
                v606 = v1.createStream(34962, v47.buffer);
              } else {
                v606 = v1.getBuffer(v47.buffer);
              }
              v613 = 'type' in v47 ? v43[v47.type] : v606.dtype;
              v608 = !!v47.normalized;
              v610 = v47.size | 0;
              v609 = v47.offset | 0;
              v612 = v47.stride | 0;
              v607 = v47.divisor | 0;
            }
          }
          v618 = aColor.location;
          v619 = v0[v618];
          if (v611 === 1) {
            if (!v619.buffer) {
              v8.enableVertexAttribArray(v618);
            }
            v620 = v610 || 4;
            if (v619.type !== v613 || v619.size !== v620 || v619.buffer !== v606 || v619.normalized !== v608 || v619.offset !== v609 || v619.stride !== v612) {
              v8.bindBuffer(34962, v606.buffer);
              v8.vertexAttribPointer(v618, v620, v613, v608, v612, v609);
              v619.type = v613;
              v619.size = v620;
              v619.buffer = v606;
              v619.normalized = v608;
              v619.offset = v609;
              v619.stride = v612;
            }
            if (v619.divisor !== v607) {
              v516.vertexAttribDivisorANGLE(v618, v607);
              v619.divisor = v607;
            }
          } else {
            if (v619.buffer) {
              v8.disableVertexAttribArray(v618);
              v619.buffer = null;
            }
            if (v619.x !== v615 || v619.y !== v616 || v619.z !== v617 || v619.w !== v614) {
              v8.vertexAttrib4f(v618, v615, v616, v617, v614);
              v619.x = v615;
              v619.y = v616;
              v619.z = v617;
              v619.w = v614;
            }
          }
          v621 = v518['colorBuffer'];
          v49.buffer = v621;
          v622 = false;
          v623 = null;
          v624 = 0;
          v625 = false;
          v626 = 0;
          v627 = 0;
          v628 = 1;
          v629 = 0;
          v630 = 5126;
          v631 = 0;
          v632 = 0;
          v633 = 0;
          v634 = 0;
          if (v9(v49)) {
            v622 = true;
            v623 = v1.createStream(34962, v49);
            v630 = v623.dtype;
          } else {
            v623 = v1.getBuffer(v49);
            if (v623) {
              v630 = v623.dtype;
            } else if ('constant' in v49) {
              v628 = 2;
              if (typeof v49.constant === 'number') {
                v632 = v49.constant;
                v633 = v634 = v631 = 0;
              } else {
                v632 = v49.constant.length > 0 ? v49.constant[0] : 0;
                v633 = v49.constant.length > 1 ? v49.constant[1] : 0;
                v634 = v49.constant.length > 2 ? v49.constant[2] : 0;
                v631 = v49.constant.length > 3 ? v49.constant[3] : 0;
              }
            } else {
              if (v9(v49.buffer)) {
                v623 = v1.createStream(34962, v49.buffer);
              } else {
                v623 = v1.getBuffer(v49.buffer);
              }
              v630 = 'type' in v49 ? v43[v49.type] : v623.dtype;
              v625 = !!v49.normalized;
              v627 = v49.size | 0;
              v626 = v49.offset | 0;
              v629 = v49.stride | 0;
              v624 = v49.divisor | 0;
            }
          }
          v635 = bColor.location;
          v636 = v0[v635];
          if (v628 === 1) {
            if (!v636.buffer) {
              v8.enableVertexAttribArray(v635);
            }
            v637 = v627 || 4;
            if (v636.type !== v630 || v636.size !== v637 || v636.buffer !== v623 || v636.normalized !== v625 || v636.offset !== v626 || v636.stride !== v629) {
              v8.bindBuffer(34962, v623.buffer);
              v8.vertexAttribPointer(v635, v637, v630, v625, v629, v626);
              v636.type = v630;
              v636.size = v637;
              v636.buffer = v623;
              v636.normalized = v625;
              v636.offset = v626;
              v636.stride = v629;
            }
            if (v636.divisor !== v624) {
              v516.vertexAttribDivisorANGLE(v635, v624);
              v636.divisor = v624;
            }
          } else {
            if (v636.buffer) {
              v8.disableVertexAttribArray(v635);
              v636.buffer = null;
            }
            if (v636.x !== v632 || v636.y !== v633 || v636.z !== v634 || v636.w !== v631) {
              v8.vertexAttrib4f(v635, v632, v633, v634, v631);
              v636.x = v632;
              v636.y = v633;
              v636.z = v634;
              v636.w = v631;
            }
          }
          v638 = v518['scale'];
          v639 = v638[0];
          v641 = v638[1];
          if (!v517 || v640 !== v639 || v642 !== v641) {
            v640 = v639;
            v642 = v641;
            v8.uniform2f(scale.location, v639, v641);
          }
          v643 = v518['translate'];
          v644 = v643[0];
          v646 = v643[1];
          if (!v517 || v645 !== v644 || v647 !== v646) {
            v645 = v644;
            v647 = v646;
            v8.uniform2f(translate.location, v644, v646);
          }
          v648 = v518['thickness'];
          if (!v517 || v649 !== v648) {
            v649 = v648;
            v8.uniform1f(thickness.location, v648);
          }
          v650 = v518['depth'];
          if (!v517 || v651 !== v650) {
            v651 = v650;
            v8.uniform1f(depth.location, v650);
          }
          v652 = $21.call(this, v2, v518, v517);
          v653 = v652[0];
          v655 = v652[1];
          v657 = v652[2];
          v659 = v652[3];
          if (!v517 || v654 !== v653 || v656 !== v655 || v658 !== v657 || v660 !== v659) {
            v654 = v653;
            v656 = v655;
            v658 = v657;
            v660 = v659;
            v8.uniform4f(viewport.location, v653, v655, v657, v659);
          }
          v661 = v518['miterLimit'];
          if (!v517 || v662 !== v661) {
            v662 = v661;
            v8.uniform1f(miterLimit.location, v661);
          }
          v663 = $22.call(this, v2, v518, v517);
          if (!v517 || v664 !== v663) {
            v664 = v663;
            v8.uniform1f(miterMode.location, v663);
          }
          v665 = v518['dashLength'];
          if (!v517 || v666 !== v665) {
            v666 = v665;
            v8.uniform1f(dashLength.location, v665);
          }
          v667 = v518['opacity'];
          if (!v517 || v668 !== v667) {
            v668 = v667;
            v8.uniform1f(opacity.location, v667);
          }
          v669 = v518['dashTexture'];
          if (v669 && v669._reglType === 'framebuffer') {
            v669 = v669.color[0];
          }
          v670 = v669._texture;
          v8.uniform1i(dashTexture.location, v670.bind());
          v672 = v518['count'];
          if (v672 > 0) {
            if (v671) {
              v516.drawElementsInstancedANGLE(5, 4, v671.type, 0 << (v671.type - 5121 >> 1), v672);
            } else {
              v516.drawArraysInstancedANGLE(5, 0, 4, v672);
            }
          } else if (v672 < 0) {
            if (v671) {
              v8.drawElements(5, 4, v671.type, 0 << (v671.type - 5121 >> 1));
            } else {
              v8.drawArrays(5, 0, 4);
            }
          }
          v2.viewportWidth = v524;
          v2.viewportHeight = v525;
          if (v537) {
            v1.destroyStream(v538);
          }
          if (v554) {
            v1.destroyStream(v555);
          }
          if (v571) {
            v1.destroyStream(v572);
          }
          if (v588) {
            v1.destroyStream(v589);
          }
          if (v605) {
            v1.destroyStream(v606);
          }
          if (v622) {
            v1.destroyStream(v623);
          }
          v670.unbind();
        }
        v3.dirty = true;
        v15.setVAO(null);
        if (v514) {
          $1.cpuTime += performance.now() - v515;
        }
      },
      'draw': function (a0) {
        var v53, v54, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227;
        v53 = v6.angle_instanced_arrays;
        v54 = v7.next;
        if (v54 !== v7.cur) {
          if (v54) {
            v8.bindFramebuffer(36160, v54.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v54;
        }
        if (v3.dirty) {
          var v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84;
          v55 = v10.dither;
          if (v55 !== v3.dither) {
            if (v55) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v55;
          }
          v56 = v10.depth_func;
          if (v56 !== v3.depth_func) {
            v8.depthFunc(v56);
            v3.depth_func = v56;
          }
          v57 = v24[0];
          v58 = v24[1];
          if (v57 !== v25[0] || v58 !== v25[1]) {
            v8.depthRange(v57, v58);
            v25[0] = v57;
            v25[1] = v58;
          }
          v59 = v10.depth_mask;
          if (v59 !== v3.depth_mask) {
            v8.depthMask(v59);
            v3.depth_mask = v59;
          }
          v60 = v22[0];
          v61 = v22[1];
          v62 = v22[2];
          v63 = v22[3];
          if (v60 !== v23[0] || v61 !== v23[1] || v62 !== v23[2] || v63 !== v23[3]) {
            v8.colorMask(v60, v61, v62, v63);
            v23[0] = v60;
            v23[1] = v61;
            v23[2] = v62;
            v23[3] = v63;
          }
          v64 = v10.frontFace;
          if (v64 !== v3.frontFace) {
            v8.frontFace(v64);
            v3.frontFace = v64;
          }
          v65 = v10.lineWidth;
          if (v65 !== v3.lineWidth) {
            v8.lineWidth(v65);
            v3.lineWidth = v65;
          }
          v66 = v10.polygonOffset_enable;
          if (v66 !== v3.polygonOffset_enable) {
            if (v66) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v66;
          }
          v67 = v26[0];
          v68 = v26[1];
          if (v67 !== v27[0] || v68 !== v27[1]) {
            v8.polygonOffset(v67, v68);
            v27[0] = v67;
            v27[1] = v68;
          }
          v69 = v10.sample_alpha;
          if (v69 !== v3.sample_alpha) {
            if (v69) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v69;
          }
          v70 = v10.sample_enable;
          if (v70 !== v3.sample_enable) {
            if (v70) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v70;
          }
          v71 = v28[0];
          v72 = v28[1];
          if (v71 !== v29[0] || v72 !== v29[1]) {
            v8.sampleCoverage(v71, v72);
            v29[0] = v71;
            v29[1] = v72;
          }
          v73 = v10.stencil_mask;
          if (v73 !== v3.stencil_mask) {
            v8.stencilMask(v73);
            v3.stencil_mask = v73;
          }
          v74 = v32[0];
          v75 = v32[1];
          v76 = v32[2];
          if (v74 !== v33[0] || v75 !== v33[1] || v76 !== v33[2]) {
            v8.stencilFunc(v74, v75, v76);
            v33[0] = v74;
            v33[1] = v75;
            v33[2] = v76;
          }
          v77 = v36[0];
          v78 = v36[1];
          v79 = v36[2];
          v80 = v36[3];
          if (v77 !== v37[0] || v78 !== v37[1] || v79 !== v37[2] || v80 !== v37[3]) {
            v8.stencilOpSeparate(v77, v78, v79, v80);
            v37[0] = v77;
            v37[1] = v78;
            v37[2] = v79;
            v37[3] = v80;
          }
          v81 = v34[0];
          v82 = v34[1];
          v83 = v34[2];
          v84 = v34[3];
          if (v81 !== v35[0] || v82 !== v35[1] || v83 !== v35[2] || v84 !== v35[3]) {
            v8.stencilOpSeparate(v81, v82, v83, v84);
            v35[0] = v81;
            v35[1] = v82;
            v35[2] = v83;
            v35[3] = v84;
          }
        }
        v85 = a0['viewport'];
        v86 = v85.x | 0;
        v87 = v85.y | 0;
        v88 = 'width' in v85 ? v85.width | 0 : v2.framebufferWidth - v86;
        v89 = 'height' in v85 ? v85.height | 0 : v2.framebufferHeight - v87;
        v90 = v2.viewportWidth;
        v2.viewportWidth = v88;
        v91 = v2.viewportHeight;
        v2.viewportHeight = v89;
        v8.viewport(v86, v87, v88, v89);
        v39[0] = v86;
        v39[1] = v87;
        v39[2] = v88;
        v39[3] = v89;
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.enable(2884);
        v3.cull_enable = true;
        v8.cullFace(1029);
        v3.cull_face = 1029;
        v92 = $2.call(this, v2, a0, 0);
        if (v92) {
          v8.enable(2929);
        } else {
          v8.disable(2929);
        }
        v3.depth_enable = v92;
        v93 = a0['viewport'];
        v94 = v93.x | 0;
        v95 = v93.y | 0;
        v96 = 'width' in v93 ? v93.width | 0 : v2.framebufferWidth - v94;
        v97 = 'height' in v93 ? v93.height | 0 : v2.framebufferHeight - v95;
        v8.scissor(v94, v95, v96, v97);
        v31[0] = v94;
        v31[1] = v95;
        v31[2] = v96;
        v31[3] = v97;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v98 = v3.profile;
        if (v98) {
          v99 = performance.now();
          $1.count++;
        }
        v8.useProgram($3.program);
        v100 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v101 = a0['positionBuffer'];
        v48.buffer = v101;
        v102 = false;
        v103 = null;
        v104 = 0;
        v105 = false;
        v106 = 0;
        v107 = 0;
        v108 = 1;
        v109 = 0;
        v110 = 5126;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        if (v9(v48)) {
          v102 = true;
          v103 = v1.createStream(34962, v48);
          v110 = v103.dtype;
        } else {
          v103 = v1.getBuffer(v48);
          if (v103) {
            v110 = v103.dtype;
          } else if ('constant' in v48) {
            v108 = 2;
            if (typeof v48.constant === 'number') {
              v112 = v48.constant;
              v113 = v114 = v111 = 0;
            } else {
              v112 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v113 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v114 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v111 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v103 = v1.createStream(34962, v48.buffer);
            } else {
              v103 = v1.getBuffer(v48.buffer);
            }
            v110 = 'type' in v48 ? v43[v48.type] : v103.dtype;
            v105 = !!v48.normalized;
            v107 = v48.size | 0;
            v106 = v48.offset | 0;
            v109 = v48.stride | 0;
            v104 = v48.divisor | 0;
          }
        }
        v115 = aCoord.location;
        v116 = v0[v115];
        if (v108 === 1) {
          if (!v116.buffer) {
            v8.enableVertexAttribArray(v115);
          }
          v117 = v107 || 2;
          if (v116.type !== v110 || v116.size !== v117 || v116.buffer !== v103 || v116.normalized !== v105 || v116.offset !== v106 || v116.stride !== v109) {
            v8.bindBuffer(34962, v103.buffer);
            v8.vertexAttribPointer(v115, v117, v110, v105, v109, v106);
            v116.type = v110;
            v116.size = v117;
            v116.buffer = v103;
            v116.normalized = v105;
            v116.offset = v106;
            v116.stride = v109;
          }
          if (v116.divisor !== v104) {
            v100.vertexAttribDivisorANGLE(v115, v104);
            v116.divisor = v104;
          }
        } else {
          if (v116.buffer) {
            v8.disableVertexAttribArray(v115);
            v116.buffer = null;
          }
          if (v116.x !== v112 || v116.y !== v113 || v116.z !== v114 || v116.w !== v111) {
            v8.vertexAttrib4f(v115, v112, v113, v114, v111);
            v116.x = v112;
            v116.y = v113;
            v116.z = v114;
            v116.w = v111;
          }
        }
        v118 = a0['positionBuffer'];
        v50.buffer = v118;
        v119 = false;
        v120 = null;
        v121 = 0;
        v122 = false;
        v123 = 0;
        v124 = 0;
        v125 = 1;
        v126 = 0;
        v127 = 5126;
        v128 = 0;
        v129 = 0;
        v130 = 0;
        v131 = 0;
        if (v9(v50)) {
          v119 = true;
          v120 = v1.createStream(34962, v50);
          v127 = v120.dtype;
        } else {
          v120 = v1.getBuffer(v50);
          if (v120) {
            v127 = v120.dtype;
          } else if ('constant' in v50) {
            v125 = 2;
            if (typeof v50.constant === 'number') {
              v129 = v50.constant;
              v130 = v131 = v128 = 0;
            } else {
              v129 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v130 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v131 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v128 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v120 = v1.createStream(34962, v50.buffer);
            } else {
              v120 = v1.getBuffer(v50.buffer);
            }
            v127 = 'type' in v50 ? v43[v50.type] : v120.dtype;
            v122 = !!v50.normalized;
            v124 = v50.size | 0;
            v123 = v50.offset | 0;
            v126 = v50.stride | 0;
            v121 = v50.divisor | 0;
          }
        }
        v132 = bCoord.location;
        v133 = v0[v132];
        if (v125 === 1) {
          if (!v133.buffer) {
            v8.enableVertexAttribArray(v132);
          }
          v134 = v124 || 2;
          if (v133.type !== v127 || v133.size !== v134 || v133.buffer !== v120 || v133.normalized !== v122 || v133.offset !== v123 || v133.stride !== v126) {
            v8.bindBuffer(34962, v120.buffer);
            v8.vertexAttribPointer(v132, v134, v127, v122, v126, v123);
            v133.type = v127;
            v133.size = v134;
            v133.buffer = v120;
            v133.normalized = v122;
            v133.offset = v123;
            v133.stride = v126;
          }
          if (v133.divisor !== v121) {
            v100.vertexAttribDivisorANGLE(v132, v121);
            v133.divisor = v121;
          }
        } else {
          if (v133.buffer) {
            v8.disableVertexAttribArray(v132);
            v133.buffer = null;
          }
          if (v133.x !== v129 || v133.y !== v130 || v133.z !== v131 || v133.w !== v128) {
            v8.vertexAttrib4f(v132, v129, v130, v131, v128);
            v133.x = v129;
            v133.y = v130;
            v133.z = v131;
            v133.w = v128;
          }
        }
        v135 = a0['positionBuffer'];
        v51.buffer = v135;
        v136 = false;
        v137 = null;
        v138 = 0;
        v139 = false;
        v140 = 0;
        v141 = 0;
        v142 = 1;
        v143 = 0;
        v144 = 5126;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v148 = 0;
        if (v9(v51)) {
          v136 = true;
          v137 = v1.createStream(34962, v51);
          v144 = v137.dtype;
        } else {
          v137 = v1.getBuffer(v51);
          if (v137) {
            v144 = v137.dtype;
          } else if ('constant' in v51) {
            v142 = 2;
            if (typeof v51.constant === 'number') {
              v146 = v51.constant;
              v147 = v148 = v145 = 0;
            } else {
              v146 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v147 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v148 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v145 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v9(v51.buffer)) {
              v137 = v1.createStream(34962, v51.buffer);
            } else {
              v137 = v1.getBuffer(v51.buffer);
            }
            v144 = 'type' in v51 ? v43[v51.type] : v137.dtype;
            v139 = !!v51.normalized;
            v141 = v51.size | 0;
            v140 = v51.offset | 0;
            v143 = v51.stride | 0;
            v138 = v51.divisor | 0;
          }
        }
        v149 = nextCoord.location;
        v150 = v0[v149];
        if (v142 === 1) {
          if (!v150.buffer) {
            v8.enableVertexAttribArray(v149);
          }
          v151 = v141 || 2;
          if (v150.type !== v144 || v150.size !== v151 || v150.buffer !== v137 || v150.normalized !== v139 || v150.offset !== v140 || v150.stride !== v143) {
            v8.bindBuffer(34962, v137.buffer);
            v8.vertexAttribPointer(v149, v151, v144, v139, v143, v140);
            v150.type = v144;
            v150.size = v151;
            v150.buffer = v137;
            v150.normalized = v139;
            v150.offset = v140;
            v150.stride = v143;
          }
          if (v150.divisor !== v138) {
            v100.vertexAttribDivisorANGLE(v149, v138);
            v150.divisor = v138;
          }
        } else {
          if (v150.buffer) {
            v8.disableVertexAttribArray(v149);
            v150.buffer = null;
          }
          if (v150.x !== v146 || v150.y !== v147 || v150.z !== v148 || v150.w !== v145) {
            v8.vertexAttrib4f(v149, v146, v147, v148, v145);
            v150.x = v146;
            v150.y = v147;
            v150.z = v148;
            v150.w = v145;
          }
        }
        v152 = a0['positionBuffer'];
        v52.buffer = v152;
        v153 = false;
        v154 = null;
        v155 = 0;
        v156 = false;
        v157 = 0;
        v158 = 0;
        v159 = 1;
        v160 = 0;
        v161 = 5126;
        v162 = 0;
        v163 = 0;
        v164 = 0;
        v165 = 0;
        if (v9(v52)) {
          v153 = true;
          v154 = v1.createStream(34962, v52);
          v161 = v154.dtype;
        } else {
          v154 = v1.getBuffer(v52);
          if (v154) {
            v161 = v154.dtype;
          } else if ('constant' in v52) {
            v159 = 2;
            if (typeof v52.constant === 'number') {
              v163 = v52.constant;
              v164 = v165 = v162 = 0;
            } else {
              v163 = v52.constant.length > 0 ? v52.constant[0] : 0;
              v164 = v52.constant.length > 1 ? v52.constant[1] : 0;
              v165 = v52.constant.length > 2 ? v52.constant[2] : 0;
              v162 = v52.constant.length > 3 ? v52.constant[3] : 0;
            }
          } else {
            if (v9(v52.buffer)) {
              v154 = v1.createStream(34962, v52.buffer);
            } else {
              v154 = v1.getBuffer(v52.buffer);
            }
            v161 = 'type' in v52 ? v43[v52.type] : v154.dtype;
            v156 = !!v52.normalized;
            v158 = v52.size | 0;
            v157 = v52.offset | 0;
            v160 = v52.stride | 0;
            v155 = v52.divisor | 0;
          }
        }
        v166 = prevCoord.location;
        v167 = v0[v166];
        if (v159 === 1) {
          if (!v167.buffer) {
            v8.enableVertexAttribArray(v166);
          }
          v168 = v158 || 2;
          if (v167.type !== v161 || v167.size !== v168 || v167.buffer !== v154 || v167.normalized !== v156 || v167.offset !== v157 || v167.stride !== v160) {
            v8.bindBuffer(34962, v154.buffer);
            v8.vertexAttribPointer(v166, v168, v161, v156, v160, v157);
            v167.type = v161;
            v167.size = v168;
            v167.buffer = v154;
            v167.normalized = v156;
            v167.offset = v157;
            v167.stride = v160;
          }
          if (v167.divisor !== v155) {
            v100.vertexAttribDivisorANGLE(v166, v155);
            v167.divisor = v155;
          }
        } else {
          if (v167.buffer) {
            v8.disableVertexAttribArray(v166);
            v167.buffer = null;
          }
          if (v167.x !== v163 || v167.y !== v164 || v167.z !== v165 || v167.w !== v162) {
            v8.vertexAttrib4f(v166, v163, v164, v165, v162);
            v167.x = v163;
            v167.y = v164;
            v167.z = v165;
            v167.w = v162;
          }
        }
        v169 = a0['colorBuffer'];
        v47.buffer = v169;
        v170 = false;
        v171 = null;
        v172 = 0;
        v173 = false;
        v174 = 0;
        v175 = 0;
        v176 = 1;
        v177 = 0;
        v178 = 5126;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        v182 = 0;
        if (v9(v47)) {
          v170 = true;
          v171 = v1.createStream(34962, v47);
          v178 = v171.dtype;
        } else {
          v171 = v1.getBuffer(v47);
          if (v171) {
            v178 = v171.dtype;
          } else if ('constant' in v47) {
            v176 = 2;
            if (typeof v47.constant === 'number') {
              v180 = v47.constant;
              v181 = v182 = v179 = 0;
            } else {
              v180 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v181 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v182 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v179 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v171 = v1.createStream(34962, v47.buffer);
            } else {
              v171 = v1.getBuffer(v47.buffer);
            }
            v178 = 'type' in v47 ? v43[v47.type] : v171.dtype;
            v173 = !!v47.normalized;
            v175 = v47.size | 0;
            v174 = v47.offset | 0;
            v177 = v47.stride | 0;
            v172 = v47.divisor | 0;
          }
        }
        v183 = aColor.location;
        v184 = v0[v183];
        if (v176 === 1) {
          if (!v184.buffer) {
            v8.enableVertexAttribArray(v183);
          }
          v185 = v175 || 4;
          if (v184.type !== v178 || v184.size !== v185 || v184.buffer !== v171 || v184.normalized !== v173 || v184.offset !== v174 || v184.stride !== v177) {
            v8.bindBuffer(34962, v171.buffer);
            v8.vertexAttribPointer(v183, v185, v178, v173, v177, v174);
            v184.type = v178;
            v184.size = v185;
            v184.buffer = v171;
            v184.normalized = v173;
            v184.offset = v174;
            v184.stride = v177;
          }
          if (v184.divisor !== v172) {
            v100.vertexAttribDivisorANGLE(v183, v172);
            v184.divisor = v172;
          }
        } else {
          if (v184.buffer) {
            v8.disableVertexAttribArray(v183);
            v184.buffer = null;
          }
          if (v184.x !== v180 || v184.y !== v181 || v184.z !== v182 || v184.w !== v179) {
            v8.vertexAttrib4f(v183, v180, v181, v182, v179);
            v184.x = v180;
            v184.y = v181;
            v184.z = v182;
            v184.w = v179;
          }
        }
        v186 = a0['colorBuffer'];
        v49.buffer = v186;
        v187 = false;
        v188 = null;
        v189 = 0;
        v190 = false;
        v191 = 0;
        v192 = 0;
        v193 = 1;
        v194 = 0;
        v195 = 5126;
        v196 = 0;
        v197 = 0;
        v198 = 0;
        v199 = 0;
        if (v9(v49)) {
          v187 = true;
          v188 = v1.createStream(34962, v49);
          v195 = v188.dtype;
        } else {
          v188 = v1.getBuffer(v49);
          if (v188) {
            v195 = v188.dtype;
          } else if ('constant' in v49) {
            v193 = 2;
            if (typeof v49.constant === 'number') {
              v197 = v49.constant;
              v198 = v199 = v196 = 0;
            } else {
              v197 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v198 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v199 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v196 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v188 = v1.createStream(34962, v49.buffer);
            } else {
              v188 = v1.getBuffer(v49.buffer);
            }
            v195 = 'type' in v49 ? v43[v49.type] : v188.dtype;
            v190 = !!v49.normalized;
            v192 = v49.size | 0;
            v191 = v49.offset | 0;
            v194 = v49.stride | 0;
            v189 = v49.divisor | 0;
          }
        }
        v200 = bColor.location;
        v201 = v0[v200];
        if (v193 === 1) {
          if (!v201.buffer) {
            v8.enableVertexAttribArray(v200);
          }
          v202 = v192 || 4;
          if (v201.type !== v195 || v201.size !== v202 || v201.buffer !== v188 || v201.normalized !== v190 || v201.offset !== v191 || v201.stride !== v194) {
            v8.bindBuffer(34962, v188.buffer);
            v8.vertexAttribPointer(v200, v202, v195, v190, v194, v191);
            v201.type = v195;
            v201.size = v202;
            v201.buffer = v188;
            v201.normalized = v190;
            v201.offset = v191;
            v201.stride = v194;
          }
          if (v201.divisor !== v189) {
            v100.vertexAttribDivisorANGLE(v200, v189);
            v201.divisor = v189;
          }
        } else {
          if (v201.buffer) {
            v8.disableVertexAttribArray(v200);
            v201.buffer = null;
          }
          if (v201.x !== v197 || v201.y !== v198 || v201.z !== v199 || v201.w !== v196) {
            v8.vertexAttrib4f(v200, v197, v198, v199, v196);
            v201.x = v197;
            v201.y = v198;
            v201.z = v199;
            v201.w = v196;
          }
        }
        v203 = lineEnd.location;
        v204 = v0[v203];
        if (!v204.buffer) {
          v8.enableVertexAttribArray(v203);
        }
        if (v204.type !== 5126 || v204.size !== 1 || v204.buffer !== $4 || v204.normalized !== false || v204.offset !== 0 || v204.stride !== 8) {
          v8.bindBuffer(34962, $4.buffer);
          v8.vertexAttribPointer(v203, 1, 5126, false, 8, 0);
          v204.type = 5126;
          v204.size = 1;
          v204.buffer = $4;
          v204.normalized = false;
          v204.offset = 0;
          v204.stride = 8;
        }
        if (v204.divisor !== 0) {
          v100.vertexAttribDivisorANGLE(v203, 0);
          v204.divisor = 0;
        }
        v205 = lineTop.location;
        v206 = v0[v205];
        if (!v206.buffer) {
          v8.enableVertexAttribArray(v205);
        }
        if (v206.type !== 5126 || v206.size !== 1 || v206.buffer !== $5 || v206.normalized !== false || v206.offset !== 4 || v206.stride !== 8) {
          v8.bindBuffer(34962, $5.buffer);
          v8.vertexAttribPointer(v205, 1, 5126, false, 8, 4);
          v206.type = 5126;
          v206.size = 1;
          v206.buffer = $5;
          v206.normalized = false;
          v206.offset = 4;
          v206.stride = 8;
        }
        if (v206.divisor !== 0) {
          v100.vertexAttribDivisorANGLE(v205, 0);
          v206.divisor = 0;
        }
        v207 = a0['scale'];
        v208 = v207[0];
        v209 = v207[1];
        v8.uniform2f(scale.location, v208, v209);
        v210 = a0['translate'];
        v211 = v210[0];
        v212 = v210[1];
        v8.uniform2f(translate.location, v211, v212);
        v213 = a0['thickness'];
        v8.uniform1f(thickness.location, v213);
        v214 = a0['depth'];
        v8.uniform1f(depth.location, v214);
        v215 = $6.call(this, v2, a0, 0);
        v216 = v215[0];
        v217 = v215[1];
        v218 = v215[2];
        v219 = v215[3];
        v8.uniform4f(viewport.location, v216, v217, v218, v219);
        v220 = a0['miterLimit'];
        v8.uniform1f(miterLimit.location, v220);
        v221 = $7.call(this, v2, a0, 0);
        v8.uniform1f(miterMode.location, v221);
        v222 = a0['dashLength'];
        v8.uniform1f(dashLength.location, v222);
        v223 = a0['opacity'];
        v8.uniform1f(opacity.location, v223);
        v224 = a0['dashTexture'];
        if (v224 && v224._reglType === 'framebuffer') {
          v224 = v224.color[0];
        }
        v225 = v224._texture;
        v8.uniform1i(dashTexture.location, v225.bind());
        v226 = v4.elements;
        if (v226) {
          v8.bindBuffer(34963, v226.buffer.buffer);
        } else if (v15.currentVAO) {
          v226 = v5.getElements(v15.currentVAO.elements);
          if (v226) v8.bindBuffer(34963, v226.buffer.buffer);
        }
        v227 = a0['count'];
        if (v227 > 0) {
          if (v226) {
            v100.drawElementsInstancedANGLE(5, 4, v226.type, 0 << (v226.type - 5121 >> 1), v227);
          } else {
            v100.drawArraysInstancedANGLE(5, 0, 4, v227);
          }
        } else if (v227 < 0) {
          if (v226) {
            v8.drawElements(5, 4, v226.type, 0 << (v226.type - 5121 >> 1));
          } else {
            v8.drawArrays(5, 0, 4);
          }
        }
        v3.dirty = true;
        v15.setVAO(null);
        v2.viewportWidth = v90;
        v2.viewportHeight = v91;
        if (v98) {
          $1.cpuTime += performance.now() - v99;
        }
        if (v102) {
          v1.destroyStream(v103);
        }
        if (v119) {
          v1.destroyStream(v120);
        }
        if (v136) {
          v1.destroyStream(v137);
        }
        if (v153) {
          v1.destroyStream(v154);
        }
        if (v170) {
          v1.destroyStream(v171);
        }
        if (v187) {
          v1.destroyStream(v188);
        }
        v225.unbind();
      },
      'scope': function (a0, a1, a2) {
        var v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481;
        v228 = a0['viewport'];
        v229 = v228.x | 0;
        v230 = v228.y | 0;
        v231 = 'width' in v228 ? v228.width | 0 : v2.framebufferWidth - v229;
        v232 = 'height' in v228 ? v228.height | 0 : v2.framebufferHeight - v230;
        v233 = v2.viewportWidth;
        v2.viewportWidth = v231;
        v234 = v2.viewportHeight;
        v2.viewportHeight = v232;
        v235 = v38[0];
        v38[0] = v229;
        v236 = v38[1];
        v38[1] = v230;
        v237 = v38[2];
        v38[2] = v231;
        v238 = v38[3];
        v38[3] = v232;
        v239 = v16[0];
        v16[0] = 0;
        v240 = v16[1];
        v16[1] = 0;
        v241 = v16[2];
        v16[2] = 0;
        v242 = v16[3];
        v16[3] = 0;
        v243 = v10.blend_enable;
        v10.blend_enable = true;
        v244 = v18[0];
        v18[0] = 32774;
        v245 = v18[1];
        v18[1] = 32774;
        v246 = v20[0];
        v20[0] = 770;
        v247 = v20[1];
        v20[1] = 771;
        v248 = v20[2];
        v20[2] = 773;
        v249 = v20[3];
        v20[3] = 1;
        v250 = v10.cull_enable;
        v10.cull_enable = true;
        v251 = v10.cull_face;
        v10.cull_face = 1029;
        v252 = $8.call(this, v2, a0, a2);
        v253 = v10.depth_enable;
        v10.depth_enable = v252;
        v254 = a0['viewport'];
        v255 = v254.x | 0;
        v256 = v254.y | 0;
        v257 = 'width' in v254 ? v254.width | 0 : v2.framebufferWidth - v255;
        v258 = 'height' in v254 ? v254.height | 0 : v2.framebufferHeight - v256;
        v259 = v30[0];
        v30[0] = v255;
        v260 = v30[1];
        v30[1] = v256;
        v261 = v30[2];
        v30[2] = v257;
        v262 = v30[3];
        v30[3] = v258;
        v263 = v10.scissor_enable;
        v10.scissor_enable = true;
        v264 = v10.stencil_enable;
        v10.stencil_enable = false;
        v265 = v3.profile;
        if (v265) {
          v266 = performance.now();
          $1.count++;
        }
        v267 = v4.offset;
        v4.offset = 0;
        v268 = v4.count;
        v4.count = 4;
        v269 = a0['count'];
        v270 = v4.instances;
        v4.instances = v269;
        v271 = v4.primitive;
        v4.primitive = 5;
        v272 = a0['dashLength'];
        v273 = v14[23];
        v14[23] = v272;
        v274 = a0['dashTexture'];
        v275 = v14[24];
        v14[24] = v274;
        v276 = a0['depth'];
        v277 = v14[22];
        v14[22] = v276;
        v278 = a0['id'];
        v279 = v14[31];
        v14[31] = v278;
        v280 = a0['miterLimit'];
        v281 = v14[32];
        v14[32] = v280;
        v282 = $9.call(this, v2, a0, a2);
        v283 = v14[33];
        v14[33] = v282;
        v284 = a0['opacity'];
        v285 = v14[10];
        v14[10] = v284;
        v286 = v2['pixelRatio'];
        v287 = v14[34];
        v14[34] = v286;
        v288 = a0['scale'];
        v289 = v14[6];
        v14[6] = v288;
        v290 = a0['scaleFract'];
        v291 = v14[7];
        v14[7] = v290;
        v292 = a0['thickness'];
        v293 = v14[21];
        v14[21] = v292;
        v294 = a0['translate'];
        v295 = v14[8];
        v14[8] = v294;
        v296 = a0['translateFract'];
        v297 = v14[9];
        v14[9] = v296;
        v298 = $10.call(this, v2, a0, a2);
        v299 = v14[3];
        v14[3] = v298;
        v300 = a0['colorBuffer'];
        v47.buffer = v300;
        v301 = false;
        v302 = null;
        v303 = 0;
        v304 = false;
        v305 = 0;
        v306 = 0;
        v307 = 1;
        v308 = 0;
        v309 = 5126;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        v313 = 0;
        if (v9(v47)) {
          v301 = true;
          v302 = v1.createStream(34962, v47);
          v309 = v302.dtype;
        } else {
          v302 = v1.getBuffer(v47);
          if (v302) {
            v309 = v302.dtype;
          } else if ('constant' in v47) {
            v307 = 2;
            if (typeof v47.constant === 'number') {
              v311 = v47.constant;
              v312 = v313 = v310 = 0;
            } else {
              v311 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v312 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v313 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v310 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v302 = v1.createStream(34962, v47.buffer);
            } else {
              v302 = v1.getBuffer(v47.buffer);
            }
            v309 = 'type' in v47 ? v43[v47.type] : v302.dtype;
            v304 = !!v47.normalized;
            v306 = v47.size | 0;
            v305 = v47.offset | 0;
            v308 = v47.stride | 0;
            v303 = v47.divisor | 0;
          }
        }
        v314 = $11.buffer;
        $11.buffer = v302;
        v315 = $11.divisor;
        $11.divisor = v303;
        v316 = $11.normalized;
        $11.normalized = v304;
        v317 = $11.offset;
        $11.offset = v305;
        v318 = $11.size;
        $11.size = v306;
        v319 = $11.state;
        $11.state = v307;
        v320 = $11.stride;
        $11.stride = v308;
        v321 = $11.type;
        $11.type = v309;
        v322 = $11.w;
        $11.w = v310;
        v323 = $11.x;
        $11.x = v311;
        v324 = $11.y;
        $11.y = v312;
        v325 = $11.z;
        $11.z = v313;
        v326 = a0['positionBuffer'];
        v48.buffer = v326;
        v327 = false;
        v328 = null;
        v329 = 0;
        v330 = false;
        v331 = 0;
        v332 = 0;
        v333 = 1;
        v334 = 0;
        v335 = 5126;
        v336 = 0;
        v337 = 0;
        v338 = 0;
        v339 = 0;
        if (v9(v48)) {
          v327 = true;
          v328 = v1.createStream(34962, v48);
          v335 = v328.dtype;
        } else {
          v328 = v1.getBuffer(v48);
          if (v328) {
            v335 = v328.dtype;
          } else if ('constant' in v48) {
            v333 = 2;
            if (typeof v48.constant === 'number') {
              v337 = v48.constant;
              v338 = v339 = v336 = 0;
            } else {
              v337 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v338 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v339 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v336 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v328 = v1.createStream(34962, v48.buffer);
            } else {
              v328 = v1.getBuffer(v48.buffer);
            }
            v335 = 'type' in v48 ? v43[v48.type] : v328.dtype;
            v330 = !!v48.normalized;
            v332 = v48.size | 0;
            v331 = v48.offset | 0;
            v334 = v48.stride | 0;
            v329 = v48.divisor | 0;
          }
        }
        v340 = $12.buffer;
        $12.buffer = v328;
        v341 = $12.divisor;
        $12.divisor = v329;
        v342 = $12.normalized;
        $12.normalized = v330;
        v343 = $12.offset;
        $12.offset = v331;
        v344 = $12.size;
        $12.size = v332;
        v345 = $12.state;
        $12.state = v333;
        v346 = $12.stride;
        $12.stride = v334;
        v347 = $12.type;
        $12.type = v335;
        v348 = $12.w;
        $12.w = v336;
        v349 = $12.x;
        $12.x = v337;
        v350 = $12.y;
        $12.y = v338;
        v351 = $12.z;
        $12.z = v339;
        v352 = a0['colorBuffer'];
        v49.buffer = v352;
        v353 = false;
        v354 = null;
        v355 = 0;
        v356 = false;
        v357 = 0;
        v358 = 0;
        v359 = 1;
        v360 = 0;
        v361 = 5126;
        v362 = 0;
        v363 = 0;
        v364 = 0;
        v365 = 0;
        if (v9(v49)) {
          v353 = true;
          v354 = v1.createStream(34962, v49);
          v361 = v354.dtype;
        } else {
          v354 = v1.getBuffer(v49);
          if (v354) {
            v361 = v354.dtype;
          } else if ('constant' in v49) {
            v359 = 2;
            if (typeof v49.constant === 'number') {
              v363 = v49.constant;
              v364 = v365 = v362 = 0;
            } else {
              v363 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v364 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v365 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v362 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v9(v49.buffer)) {
              v354 = v1.createStream(34962, v49.buffer);
            } else {
              v354 = v1.getBuffer(v49.buffer);
            }
            v361 = 'type' in v49 ? v43[v49.type] : v354.dtype;
            v356 = !!v49.normalized;
            v358 = v49.size | 0;
            v357 = v49.offset | 0;
            v360 = v49.stride | 0;
            v355 = v49.divisor | 0;
          }
        }
        v366 = $13.buffer;
        $13.buffer = v354;
        v367 = $13.divisor;
        $13.divisor = v355;
        v368 = $13.normalized;
        $13.normalized = v356;
        v369 = $13.offset;
        $13.offset = v357;
        v370 = $13.size;
        $13.size = v358;
        v371 = $13.state;
        $13.state = v359;
        v372 = $13.stride;
        $13.stride = v360;
        v373 = $13.type;
        $13.type = v361;
        v374 = $13.w;
        $13.w = v362;
        v375 = $13.x;
        $13.x = v363;
        v376 = $13.y;
        $13.y = v364;
        v377 = $13.z;
        $13.z = v365;
        v378 = a0['positionBuffer'];
        v50.buffer = v378;
        v379 = false;
        v380 = null;
        v381 = 0;
        v382 = false;
        v383 = 0;
        v384 = 0;
        v385 = 1;
        v386 = 0;
        v387 = 5126;
        v388 = 0;
        v389 = 0;
        v390 = 0;
        v391 = 0;
        if (v9(v50)) {
          v379 = true;
          v380 = v1.createStream(34962, v50);
          v387 = v380.dtype;
        } else {
          v380 = v1.getBuffer(v50);
          if (v380) {
            v387 = v380.dtype;
          } else if ('constant' in v50) {
            v385 = 2;
            if (typeof v50.constant === 'number') {
              v389 = v50.constant;
              v390 = v391 = v388 = 0;
            } else {
              v389 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v390 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v391 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v388 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v9(v50.buffer)) {
              v380 = v1.createStream(34962, v50.buffer);
            } else {
              v380 = v1.getBuffer(v50.buffer);
            }
            v387 = 'type' in v50 ? v43[v50.type] : v380.dtype;
            v382 = !!v50.normalized;
            v384 = v50.size | 0;
            v383 = v50.offset | 0;
            v386 = v50.stride | 0;
            v381 = v50.divisor | 0;
          }
        }
        v392 = $14.buffer;
        $14.buffer = v380;
        v393 = $14.divisor;
        $14.divisor = v381;
        v394 = $14.normalized;
        $14.normalized = v382;
        v395 = $14.offset;
        $14.offset = v383;
        v396 = $14.size;
        $14.size = v384;
        v397 = $14.state;
        $14.state = v385;
        v398 = $14.stride;
        $14.stride = v386;
        v399 = $14.type;
        $14.type = v387;
        v400 = $14.w;
        $14.w = v388;
        v401 = $14.x;
        $14.x = v389;
        v402 = $14.y;
        $14.y = v390;
        v403 = $14.z;
        $14.z = v391;
        v404 = $15.buffer;
        $15.buffer = $4;
        v405 = $15.divisor;
        $15.divisor = 0;
        v406 = $15.normalized;
        $15.normalized = false;
        v407 = $15.offset;
        $15.offset = 0;
        v408 = $15.size;
        $15.size = 0;
        v409 = $15.state;
        $15.state = 1;
        v410 = $15.stride;
        $15.stride = 8;
        v411 = $15.type;
        $15.type = 5126;
        v412 = $15.w;
        $15.w = 0;
        v413 = $15.x;
        $15.x = 0;
        v414 = $15.y;
        $15.y = 0;
        v415 = $15.z;
        $15.z = 0;
        v416 = $16.buffer;
        $16.buffer = $5;
        v417 = $16.divisor;
        $16.divisor = 0;
        v418 = $16.normalized;
        $16.normalized = false;
        v419 = $16.offset;
        $16.offset = 4;
        v420 = $16.size;
        $16.size = 0;
        v421 = $16.state;
        $16.state = 1;
        v422 = $16.stride;
        $16.stride = 8;
        v423 = $16.type;
        $16.type = 5126;
        v424 = $16.w;
        $16.w = 0;
        v425 = $16.x;
        $16.x = 0;
        v426 = $16.y;
        $16.y = 0;
        v427 = $16.z;
        $16.z = 0;
        v428 = a0['positionBuffer'];
        v51.buffer = v428;
        v429 = false;
        v430 = null;
        v431 = 0;
        v432 = false;
        v433 = 0;
        v434 = 0;
        v435 = 1;
        v436 = 0;
        v437 = 5126;
        v438 = 0;
        v439 = 0;
        v440 = 0;
        v441 = 0;
        if (v9(v51)) {
          v429 = true;
          v430 = v1.createStream(34962, v51);
          v437 = v430.dtype;
        } else {
          v430 = v1.getBuffer(v51);
          if (v430) {
            v437 = v430.dtype;
          } else if ('constant' in v51) {
            v435 = 2;
            if (typeof v51.constant === 'number') {
              v439 = v51.constant;
              v440 = v441 = v438 = 0;
            } else {
              v439 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v440 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v441 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v438 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v9(v51.buffer)) {
              v430 = v1.createStream(34962, v51.buffer);
            } else {
              v430 = v1.getBuffer(v51.buffer);
            }
            v437 = 'type' in v51 ? v43[v51.type] : v430.dtype;
            v432 = !!v51.normalized;
            v434 = v51.size | 0;
            v433 = v51.offset | 0;
            v436 = v51.stride | 0;
            v431 = v51.divisor | 0;
          }
        }
        v442 = $17.buffer;
        $17.buffer = v430;
        v443 = $17.divisor;
        $17.divisor = v431;
        v444 = $17.normalized;
        $17.normalized = v432;
        v445 = $17.offset;
        $17.offset = v433;
        v446 = $17.size;
        $17.size = v434;
        v447 = $17.state;
        $17.state = v435;
        v448 = $17.stride;
        $17.stride = v436;
        v449 = $17.type;
        $17.type = v437;
        v450 = $17.w;
        $17.w = v438;
        v451 = $17.x;
        $17.x = v439;
        v452 = $17.y;
        $17.y = v440;
        v453 = $17.z;
        $17.z = v441;
        v454 = a0['positionBuffer'];
        v52.buffer = v454;
        v455 = false;
        v456 = null;
        v457 = 0;
        v458 = false;
        v459 = 0;
        v460 = 0;
        v461 = 1;
        v462 = 0;
        v463 = 5126;
        v464 = 0;
        v465 = 0;
        v466 = 0;
        v467 = 0;
        if (v9(v52)) {
          v455 = true;
          v456 = v1.createStream(34962, v52);
          v463 = v456.dtype;
        } else {
          v456 = v1.getBuffer(v52);
          if (v456) {
            v463 = v456.dtype;
          } else if ('constant' in v52) {
            v461 = 2;
            if (typeof v52.constant === 'number') {
              v465 = v52.constant;
              v466 = v467 = v464 = 0;
            } else {
              v465 = v52.constant.length > 0 ? v52.constant[0] : 0;
              v466 = v52.constant.length > 1 ? v52.constant[1] : 0;
              v467 = v52.constant.length > 2 ? v52.constant[2] : 0;
              v464 = v52.constant.length > 3 ? v52.constant[3] : 0;
            }
          } else {
            if (v9(v52.buffer)) {
              v456 = v1.createStream(34962, v52.buffer);
            } else {
              v456 = v1.getBuffer(v52.buffer);
            }
            v463 = 'type' in v52 ? v43[v52.type] : v456.dtype;
            v458 = !!v52.normalized;
            v460 = v52.size | 0;
            v459 = v52.offset | 0;
            v462 = v52.stride | 0;
            v457 = v52.divisor | 0;
          }
        }
        v468 = $18.buffer;
        $18.buffer = v456;
        v469 = $18.divisor;
        $18.divisor = v457;
        v470 = $18.normalized;
        $18.normalized = v458;
        v471 = $18.offset;
        $18.offset = v459;
        v472 = $18.size;
        $18.size = v460;
        v473 = $18.state;
        $18.state = v461;
        v474 = $18.stride;
        $18.stride = v462;
        v475 = $18.type;
        $18.type = v463;
        v476 = $18.w;
        $18.w = v464;
        v477 = $18.x;
        $18.x = v465;
        v478 = $18.y;
        $18.y = v466;
        v479 = $18.z;
        $18.z = v467;
        v480 = v11.vert;
        v11.vert = 36;
        v481 = v11.frag;
        v11.frag = 35;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v233;
        v2.viewportHeight = v234;
        v38[0] = v235;
        v38[1] = v236;
        v38[2] = v237;
        v38[3] = v238;
        v16[0] = v239;
        v16[1] = v240;
        v16[2] = v241;
        v16[3] = v242;
        v10.blend_enable = v243;
        v18[0] = v244;
        v18[1] = v245;
        v20[0] = v246;
        v20[1] = v247;
        v20[2] = v248;
        v20[3] = v249;
        v10.cull_enable = v250;
        v10.cull_face = v251;
        v10.depth_enable = v253;
        v30[0] = v259;
        v30[1] = v260;
        v30[2] = v261;
        v30[3] = v262;
        v10.scissor_enable = v263;
        v10.stencil_enable = v264;
        if (v265) {
          $1.cpuTime += performance.now() - v266;
        }
        v4.offset = v267;
        v4.count = v268;
        v4.instances = v270;
        v4.primitive = v271;
        v14[23] = v273;
        v14[24] = v275;
        v14[22] = v277;
        v14[31] = v279;
        v14[32] = v281;
        v14[33] = v283;
        v14[10] = v285;
        v14[34] = v287;
        v14[6] = v289;
        v14[7] = v291;
        v14[21] = v293;
        v14[8] = v295;
        v14[9] = v297;
        v14[3] = v299;
        if (v301) {
          v1.destroyStream(v302);
        }
        $11.buffer = v314;
        $11.divisor = v315;
        $11.normalized = v316;
        $11.offset = v317;
        $11.size = v318;
        $11.state = v319;
        $11.stride = v320;
        $11.type = v321;
        $11.w = v322;
        $11.x = v323;
        $11.y = v324;
        $11.z = v325;
        if (v327) {
          v1.destroyStream(v328);
        }
        $12.buffer = v340;
        $12.divisor = v341;
        $12.normalized = v342;
        $12.offset = v343;
        $12.size = v344;
        $12.state = v345;
        $12.stride = v346;
        $12.type = v347;
        $12.w = v348;
        $12.x = v349;
        $12.y = v350;
        $12.z = v351;
        if (v353) {
          v1.destroyStream(v354);
        }
        $13.buffer = v366;
        $13.divisor = v367;
        $13.normalized = v368;
        $13.offset = v369;
        $13.size = v370;
        $13.state = v371;
        $13.stride = v372;
        $13.type = v373;
        $13.w = v374;
        $13.x = v375;
        $13.y = v376;
        $13.z = v377;
        if (v379) {
          v1.destroyStream(v380);
        }
        $14.buffer = v392;
        $14.divisor = v393;
        $14.normalized = v394;
        $14.offset = v395;
        $14.size = v396;
        $14.state = v397;
        $14.stride = v398;
        $14.type = v399;
        $14.w = v400;
        $14.x = v401;
        $14.y = v402;
        $14.z = v403;
        $15.buffer = v404;
        $15.divisor = v405;
        $15.normalized = v406;
        $15.offset = v407;
        $15.size = v408;
        $15.state = v409;
        $15.stride = v410;
        $15.type = v411;
        $15.w = v412;
        $15.x = v413;
        $15.y = v414;
        $15.z = v415;
        $16.buffer = v416;
        $16.divisor = v417;
        $16.normalized = v418;
        $16.offset = v419;
        $16.size = v420;
        $16.state = v421;
        $16.stride = v422;
        $16.type = v423;
        $16.w = v424;
        $16.x = v425;
        $16.y = v426;
        $16.z = v427;
        if (v429) {
          v1.destroyStream(v430);
        }
        $17.buffer = v442;
        $17.divisor = v443;
        $17.normalized = v444;
        $17.offset = v445;
        $17.size = v446;
        $17.state = v447;
        $17.stride = v448;
        $17.type = v449;
        $17.w = v450;
        $17.x = v451;
        $17.y = v452;
        $17.z = v453;
        if (v455) {
          v1.destroyStream(v456);
        }
        $18.buffer = v468;
        $18.divisor = v469;
        $18.normalized = v470;
        $18.offset = v471;
        $18.size = v472;
        $18.state = v473;
        $18.stride = v474;
        $18.type = v475;
        $18.w = v476;
        $18.x = v477;
        $18.y = v478;
        $18.z = v479;
        v11.vert = v480;
        v11.frag = v481;
        v3.dirty = true;
      }

    };
  },
  '$9,color,id,opacity,position,positionFract,scale,scaleFract,translate,translateFract': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, color, id, opacity, position, positionFract, scale, scaleFract, translate, translateFract) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v47.offset = 8;
    v47.stride = 8;
    v48 = {};
    v48.offset = 8;
    v48.stride = 8;
    return {
      'batch': function (a0, a1) {
        var v272, v273, v306, v307, v308, v309, v310;
        v272 = v6.angle_instanced_arrays;
        v273 = v7.next;
        if (v273 !== v7.cur) {
          if (v273) {
            v8.bindFramebuffer(36160, v273.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v273;
        }
        if (v3.dirty) {
          var v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305;
          v274 = v10.dither;
          if (v274 !== v3.dither) {
            if (v274) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v274;
          }
          v275 = v10.depth_func;
          if (v275 !== v3.depth_func) {
            v8.depthFunc(v275);
            v3.depth_func = v275;
          }
          v276 = v24[0];
          v277 = v24[1];
          if (v276 !== v25[0] || v277 !== v25[1]) {
            v8.depthRange(v276, v277);
            v25[0] = v276;
            v25[1] = v277;
          }
          v278 = v10.depth_mask;
          if (v278 !== v3.depth_mask) {
            v8.depthMask(v278);
            v3.depth_mask = v278;
          }
          v279 = v22[0];
          v280 = v22[1];
          v281 = v22[2];
          v282 = v22[3];
          if (v279 !== v23[0] || v280 !== v23[1] || v281 !== v23[2] || v282 !== v23[3]) {
            v8.colorMask(v279, v280, v281, v282);
            v23[0] = v279;
            v23[1] = v280;
            v23[2] = v281;
            v23[3] = v282;
          }
          v283 = v10.cull_enable;
          if (v283 !== v3.cull_enable) {
            if (v283) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v283;
          }
          v284 = v10.cull_face;
          if (v284 !== v3.cull_face) {
            v8.cullFace(v284);
            v3.cull_face = v284;
          }
          v285 = v10.frontFace;
          if (v285 !== v3.frontFace) {
            v8.frontFace(v285);
            v3.frontFace = v285;
          }
          v286 = v10.lineWidth;
          if (v286 !== v3.lineWidth) {
            v8.lineWidth(v286);
            v3.lineWidth = v286;
          }
          v287 = v10.polygonOffset_enable;
          if (v287 !== v3.polygonOffset_enable) {
            if (v287) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v287;
          }
          v288 = v26[0];
          v289 = v26[1];
          if (v288 !== v27[0] || v289 !== v27[1]) {
            v8.polygonOffset(v288, v289);
            v27[0] = v288;
            v27[1] = v289;
          }
          v290 = v10.sample_alpha;
          if (v290 !== v3.sample_alpha) {
            if (v290) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v290;
          }
          v291 = v10.sample_enable;
          if (v291 !== v3.sample_enable) {
            if (v291) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v291;
          }
          v292 = v28[0];
          v293 = v28[1];
          if (v292 !== v29[0] || v293 !== v29[1]) {
            v8.sampleCoverage(v292, v293);
            v29[0] = v292;
            v29[1] = v293;
          }
          v294 = v10.stencil_mask;
          if (v294 !== v3.stencil_mask) {
            v8.stencilMask(v294);
            v3.stencil_mask = v294;
          }
          v295 = v32[0];
          v296 = v32[1];
          v297 = v32[2];
          if (v295 !== v33[0] || v296 !== v33[1] || v297 !== v33[2]) {
            v8.stencilFunc(v295, v296, v297);
            v33[0] = v295;
            v33[1] = v296;
            v33[2] = v297;
          }
          v298 = v36[0];
          v299 = v36[1];
          v300 = v36[2];
          v301 = v36[3];
          if (v298 !== v37[0] || v299 !== v37[1] || v300 !== v37[2] || v301 !== v37[3]) {
            v8.stencilOpSeparate(v298, v299, v300, v301);
            v37[0] = v298;
            v37[1] = v299;
            v37[2] = v300;
            v37[3] = v301;
          }
          v302 = v34[0];
          v303 = v34[1];
          v304 = v34[2];
          v305 = v34[3];
          if (v302 !== v35[0] || v303 !== v35[1] || v304 !== v35[2] || v305 !== v35[3]) {
            v8.stencilOpSeparate(v302, v303, v304, v305);
            v35[0] = v302;
            v35[1] = v303;
            v35[2] = v304;
            v35[3] = v305;
          }
        }
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v306 = v3.profile;
        if (v306) {
          v307 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($8.program);
        v308 = v6.angle_instanced_arrays;
        var v394;
        v15.setVAO(null);
        v394 = v4.instances;
        for (v309 = 0; v309 < a1; ++v309) {
          v310 = a0[v309];
          var v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393;
          v311 = v310['viewport'];
          v312 = v311.x | 0;
          v313 = v311.y | 0;
          v314 = 'width' in v311 ? v311.width | 0 : v2.framebufferWidth - v312;
          v315 = 'height' in v311 ? v311.height | 0 : v2.framebufferHeight - v313;
          v316 = v2.viewportWidth;
          v2.viewportWidth = v314;
          v317 = v2.viewportHeight;
          v2.viewportHeight = v315;
          v8.viewport(v312, v313, v314, v315);
          v39[0] = v312;
          v39[1] = v313;
          v39[2] = v314;
          v39[3] = v315;
          v318 = v310['viewport'];
          v319 = v318.x | 0;
          v320 = v318.y | 0;
          v321 = 'width' in v318 ? v318.width | 0 : v2.framebufferWidth - v319;
          v322 = 'height' in v318 ? v318.height | 0 : v2.framebufferHeight - v320;
          v8.scissor(v319, v320, v321, v322);
          v31[0] = v319;
          v31[1] = v320;
          v31[2] = v321;
          v31[3] = v322;
          v323 = v310['positionBuffer'];
          v47.buffer = v323;
          v324 = false;
          v325 = null;
          v326 = 0;
          v327 = false;
          v328 = 0;
          v329 = 0;
          v330 = 1;
          v331 = 0;
          v332 = 5126;
          v333 = 0;
          v334 = 0;
          v335 = 0;
          v336 = 0;
          if (v9(v47)) {
            v324 = true;
            v325 = v1.createStream(34962, v47);
            v332 = v325.dtype;
          } else {
            v325 = v1.getBuffer(v47);
            if (v325) {
              v332 = v325.dtype;
            } else if ('constant' in v47) {
              v330 = 2;
              if (typeof v47.constant === 'number') {
                v334 = v47.constant;
                v335 = v336 = v333 = 0;
              } else {
                v334 = v47.constant.length > 0 ? v47.constant[0] : 0;
                v335 = v47.constant.length > 1 ? v47.constant[1] : 0;
                v336 = v47.constant.length > 2 ? v47.constant[2] : 0;
                v333 = v47.constant.length > 3 ? v47.constant[3] : 0;
              }
            } else {
              if (v9(v47.buffer)) {
                v325 = v1.createStream(34962, v47.buffer);
              } else {
                v325 = v1.getBuffer(v47.buffer);
              }
              v332 = 'type' in v47 ? v43[v47.type] : v325.dtype;
              v327 = !!v47.normalized;
              v329 = v47.size | 0;
              v328 = v47.offset | 0;
              v331 = v47.stride | 0;
              v326 = v47.divisor | 0;
            }
          }
          v337 = position.location;
          v338 = v0[v337];
          if (v330 === 1) {
            if (!v338.buffer) {
              v8.enableVertexAttribArray(v337);
            }
            v339 = v329 || 2;
            if (v338.type !== v332 || v338.size !== v339 || v338.buffer !== v325 || v338.normalized !== v327 || v338.offset !== v328 || v338.stride !== v331) {
              v8.bindBuffer(34962, v325.buffer);
              v8.vertexAttribPointer(v337, v339, v332, v327, v331, v328);
              v338.type = v332;
              v338.size = v339;
              v338.buffer = v325;
              v338.normalized = v327;
              v338.offset = v328;
              v338.stride = v331;
            }
            if (v338.divisor !== v326) {
              v308.vertexAttribDivisorANGLE(v337, v326);
              v338.divisor = v326;
            }
          } else {
            if (v338.buffer) {
              v8.disableVertexAttribArray(v337);
              v338.buffer = null;
            }
            if (v338.x !== v334 || v338.y !== v335 || v338.z !== v336 || v338.w !== v333) {
              v8.vertexAttrib4f(v337, v334, v335, v336, v333);
              v338.x = v334;
              v338.y = v335;
              v338.z = v336;
              v338.w = v333;
            }
          }
          v340 = v310['positionFractBuffer'];
          v48.buffer = v340;
          v341 = false;
          v342 = null;
          v343 = 0;
          v344 = false;
          v345 = 0;
          v346 = 0;
          v347 = 1;
          v348 = 0;
          v349 = 5126;
          v350 = 0;
          v351 = 0;
          v352 = 0;
          v353 = 0;
          if (v9(v48)) {
            v341 = true;
            v342 = v1.createStream(34962, v48);
            v349 = v342.dtype;
          } else {
            v342 = v1.getBuffer(v48);
            if (v342) {
              v349 = v342.dtype;
            } else if ('constant' in v48) {
              v347 = 2;
              if (typeof v48.constant === 'number') {
                v351 = v48.constant;
                v352 = v353 = v350 = 0;
              } else {
                v351 = v48.constant.length > 0 ? v48.constant[0] : 0;
                v352 = v48.constant.length > 1 ? v48.constant[1] : 0;
                v353 = v48.constant.length > 2 ? v48.constant[2] : 0;
                v350 = v48.constant.length > 3 ? v48.constant[3] : 0;
              }
            } else {
              if (v9(v48.buffer)) {
                v342 = v1.createStream(34962, v48.buffer);
              } else {
                v342 = v1.getBuffer(v48.buffer);
              }
              v349 = 'type' in v48 ? v43[v48.type] : v342.dtype;
              v344 = !!v48.normalized;
              v346 = v48.size | 0;
              v345 = v48.offset | 0;
              v348 = v48.stride | 0;
              v343 = v48.divisor | 0;
            }
          }
          v354 = positionFract.location;
          v355 = v0[v354];
          if (v347 === 1) {
            if (!v355.buffer) {
              v8.enableVertexAttribArray(v354);
            }
            v356 = v346 || 2;
            if (v355.type !== v349 || v355.size !== v356 || v355.buffer !== v342 || v355.normalized !== v344 || v355.offset !== v345 || v355.stride !== v348) {
              v8.bindBuffer(34962, v342.buffer);
              v8.vertexAttribPointer(v354, v356, v349, v344, v348, v345);
              v355.type = v349;
              v355.size = v356;
              v355.buffer = v342;
              v355.normalized = v344;
              v355.offset = v345;
              v355.stride = v348;
            }
            if (v355.divisor !== v343) {
              v308.vertexAttribDivisorANGLE(v354, v343);
              v355.divisor = v343;
            }
          } else {
            if (v355.buffer) {
              v8.disableVertexAttribArray(v354);
              v355.buffer = null;
            }
            if (v355.x !== v351 || v355.y !== v352 || v355.z !== v353 || v355.w !== v350) {
              v8.vertexAttrib4f(v354, v351, v352, v353, v350);
              v355.x = v351;
              v355.y = v352;
              v355.z = v353;
              v355.w = v350;
            }
          }
          v357 = v310['fill'];
          v358 = v357[0];
          v360 = v357[1];
          v362 = v357[2];
          v364 = v357[3];
          if (!v309 || v359 !== v358 || v361 !== v360 || v363 !== v362 || v365 !== v364) {
            v359 = v358;
            v361 = v360;
            v363 = v362;
            v365 = v364;
            v8.uniform4f(color.location, v358, v360, v362, v364);
          }
          v366 = v310['scale'];
          v367 = v366[0];
          v369 = v366[1];
          if (!v309 || v368 !== v367 || v370 !== v369) {
            v368 = v367;
            v370 = v369;
            v8.uniform2f(scale.location, v367, v369);
          }
          v371 = v310['scaleFract'];
          v372 = v371[0];
          v374 = v371[1];
          if (!v309 || v373 !== v372 || v375 !== v374) {
            v373 = v372;
            v375 = v374;
            v8.uniform2f(scaleFract.location, v372, v374);
          }
          v376 = v310['translate'];
          v377 = v376[0];
          v379 = v376[1];
          if (!v309 || v378 !== v377 || v380 !== v379) {
            v378 = v377;
            v380 = v379;
            v8.uniform2f(translate.location, v377, v379);
          }
          v381 = v310['translateFract'];
          v382 = v381[0];
          v384 = v381[1];
          if (!v309 || v383 !== v382 || v385 !== v384) {
            v383 = v382;
            v385 = v384;
            v8.uniform2f(translateFract.location, v382, v384);
          }
          v386 = v310['id'];
          if (!v309 || v387 !== v386) {
            v387 = v386;
            v8.uniform1f(id.location, v386);
          }
          v388 = v310['opacity'];
          if (!v309 || v389 !== v388) {
            v389 = v388;
            v8.uniform1f(opacity.location, v388);
          }
          v390 = $9.call(this, v2, v310, v309);
          v391 = null;
          v392 = v9(v390);
          if (v392) {
            v391 = v5.createStream(v390);
          } else {
            v391 = v5.getElements(v390);
          }
          if (v391) v8.bindBuffer(34963, v391.buffer.buffer);
          v393 = v391 ? v391.vertCount : -1;
          if (v393) {
            if (v394 > 0) {
              if (v391) {
                v308.drawElementsInstancedANGLE(4, v393, v391.type, 0 << (v391.type - 5121 >> 1), v394);
              } else {
                v308.drawArraysInstancedANGLE(4, 0, v393, v394);
              }
            } else if (v394 < 0) {
              if (v391) {
                v8.drawElements(4, v393, v391.type, 0 << (v391.type - 5121 >> 1));
              } else {
                v8.drawArrays(4, 0, v393);
              }
            }
            v2.viewportWidth = v316;
            v2.viewportHeight = v317;
            if (v324) {
              v1.destroyStream(v325);
            }
            if (v341) {
              v1.destroyStream(v342);
            }
            if (v392) {
              v5.destroyStream(v391);
            }
          }
        }
        v3.dirty = true;
        v15.setVAO(null);
        if (v306) {
          $1.cpuTime += performance.now() - v307;
        }
      },
      'draw': function (a0) {
        var v49, v50, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155;
        v49 = v6.angle_instanced_arrays;
        v50 = v7.next;
        if (v50 !== v7.cur) {
          if (v50) {
            v8.bindFramebuffer(36160, v50.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v50;
        }
        if (v3.dirty) {
          var v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82;
          v51 = v10.dither;
          if (v51 !== v3.dither) {
            if (v51) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v51;
          }
          v52 = v10.depth_func;
          if (v52 !== v3.depth_func) {
            v8.depthFunc(v52);
            v3.depth_func = v52;
          }
          v53 = v24[0];
          v54 = v24[1];
          if (v53 !== v25[0] || v54 !== v25[1]) {
            v8.depthRange(v53, v54);
            v25[0] = v53;
            v25[1] = v54;
          }
          v55 = v10.depth_mask;
          if (v55 !== v3.depth_mask) {
            v8.depthMask(v55);
            v3.depth_mask = v55;
          }
          v56 = v22[0];
          v57 = v22[1];
          v58 = v22[2];
          v59 = v22[3];
          if (v56 !== v23[0] || v57 !== v23[1] || v58 !== v23[2] || v59 !== v23[3]) {
            v8.colorMask(v56, v57, v58, v59);
            v23[0] = v56;
            v23[1] = v57;
            v23[2] = v58;
            v23[3] = v59;
          }
          v60 = v10.cull_enable;
          if (v60 !== v3.cull_enable) {
            if (v60) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v60;
          }
          v61 = v10.cull_face;
          if (v61 !== v3.cull_face) {
            v8.cullFace(v61);
            v3.cull_face = v61;
          }
          v62 = v10.frontFace;
          if (v62 !== v3.frontFace) {
            v8.frontFace(v62);
            v3.frontFace = v62;
          }
          v63 = v10.lineWidth;
          if (v63 !== v3.lineWidth) {
            v8.lineWidth(v63);
            v3.lineWidth = v63;
          }
          v64 = v10.polygonOffset_enable;
          if (v64 !== v3.polygonOffset_enable) {
            if (v64) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v64;
          }
          v65 = v26[0];
          v66 = v26[1];
          if (v65 !== v27[0] || v66 !== v27[1]) {
            v8.polygonOffset(v65, v66);
            v27[0] = v65;
            v27[1] = v66;
          }
          v67 = v10.sample_alpha;
          if (v67 !== v3.sample_alpha) {
            if (v67) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v67;
          }
          v68 = v10.sample_enable;
          if (v68 !== v3.sample_enable) {
            if (v68) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v68;
          }
          v69 = v28[0];
          v70 = v28[1];
          if (v69 !== v29[0] || v70 !== v29[1]) {
            v8.sampleCoverage(v69, v70);
            v29[0] = v69;
            v29[1] = v70;
          }
          v71 = v10.stencil_mask;
          if (v71 !== v3.stencil_mask) {
            v8.stencilMask(v71);
            v3.stencil_mask = v71;
          }
          v72 = v32[0];
          v73 = v32[1];
          v74 = v32[2];
          if (v72 !== v33[0] || v73 !== v33[1] || v74 !== v33[2]) {
            v8.stencilFunc(v72, v73, v74);
            v33[0] = v72;
            v33[1] = v73;
            v33[2] = v74;
          }
          v75 = v36[0];
          v76 = v36[1];
          v77 = v36[2];
          v78 = v36[3];
          if (v75 !== v37[0] || v76 !== v37[1] || v77 !== v37[2] || v78 !== v37[3]) {
            v8.stencilOpSeparate(v75, v76, v77, v78);
            v37[0] = v75;
            v37[1] = v76;
            v37[2] = v77;
            v37[3] = v78;
          }
          v79 = v34[0];
          v80 = v34[1];
          v81 = v34[2];
          v82 = v34[3];
          if (v79 !== v35[0] || v80 !== v35[1] || v81 !== v35[2] || v82 !== v35[3]) {
            v8.stencilOpSeparate(v79, v80, v81, v82);
            v35[0] = v79;
            v35[1] = v80;
            v35[2] = v81;
            v35[3] = v82;
          }
        }
        v83 = a0['viewport'];
        v84 = v83.x | 0;
        v85 = v83.y | 0;
        v86 = 'width' in v83 ? v83.width | 0 : v2.framebufferWidth - v84;
        v87 = 'height' in v83 ? v83.height | 0 : v2.framebufferHeight - v85;
        v88 = v2.viewportWidth;
        v2.viewportWidth = v86;
        v89 = v2.viewportHeight;
        v2.viewportHeight = v87;
        v8.viewport(v84, v85, v86, v87);
        v39[0] = v84;
        v39[1] = v85;
        v39[2] = v86;
        v39[3] = v87;
        v8.blendColor(0, 0, 0, 0);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendEquationSeparate(32774, 32774);
        v19[0] = 32774;
        v19[1] = 32774;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v90 = a0['viewport'];
        v91 = v90.x | 0;
        v92 = v90.y | 0;
        v93 = 'width' in v90 ? v90.width | 0 : v2.framebufferWidth - v91;
        v94 = 'height' in v90 ? v90.height | 0 : v2.framebufferHeight - v92;
        v8.scissor(v91, v92, v93, v94);
        v31[0] = v91;
        v31[1] = v92;
        v31[2] = v93;
        v31[3] = v94;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v95 = v3.profile;
        if (v95) {
          v96 = performance.now();
          $1.count++;
        }
        v8.useProgram($2.program);
        v97 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v98 = a0['positionBuffer'];
        v47.buffer = v98;
        v99 = false;
        v100 = null;
        v101 = 0;
        v102 = false;
        v103 = 0;
        v104 = 0;
        v105 = 1;
        v106 = 0;
        v107 = 5126;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        if (v9(v47)) {
          v99 = true;
          v100 = v1.createStream(34962, v47);
          v107 = v100.dtype;
        } else {
          v100 = v1.getBuffer(v47);
          if (v100) {
            v107 = v100.dtype;
          } else if ('constant' in v47) {
            v105 = 2;
            if (typeof v47.constant === 'number') {
              v109 = v47.constant;
              v110 = v111 = v108 = 0;
            } else {
              v109 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v110 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v111 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v108 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v100 = v1.createStream(34962, v47.buffer);
            } else {
              v100 = v1.getBuffer(v47.buffer);
            }
            v107 = 'type' in v47 ? v43[v47.type] : v100.dtype;
            v102 = !!v47.normalized;
            v104 = v47.size | 0;
            v103 = v47.offset | 0;
            v106 = v47.stride | 0;
            v101 = v47.divisor | 0;
          }
        }
        v112 = position.location;
        v113 = v0[v112];
        if (v105 === 1) {
          if (!v113.buffer) {
            v8.enableVertexAttribArray(v112);
          }
          v114 = v104 || 2;
          if (v113.type !== v107 || v113.size !== v114 || v113.buffer !== v100 || v113.normalized !== v102 || v113.offset !== v103 || v113.stride !== v106) {
            v8.bindBuffer(34962, v100.buffer);
            v8.vertexAttribPointer(v112, v114, v107, v102, v106, v103);
            v113.type = v107;
            v113.size = v114;
            v113.buffer = v100;
            v113.normalized = v102;
            v113.offset = v103;
            v113.stride = v106;
          }
          if (v113.divisor !== v101) {
            v97.vertexAttribDivisorANGLE(v112, v101);
            v113.divisor = v101;
          }
        } else {
          if (v113.buffer) {
            v8.disableVertexAttribArray(v112);
            v113.buffer = null;
          }
          if (v113.x !== v109 || v113.y !== v110 || v113.z !== v111 || v113.w !== v108) {
            v8.vertexAttrib4f(v112, v109, v110, v111, v108);
            v113.x = v109;
            v113.y = v110;
            v113.z = v111;
            v113.w = v108;
          }
        }
        v115 = a0['positionFractBuffer'];
        v48.buffer = v115;
        v116 = false;
        v117 = null;
        v118 = 0;
        v119 = false;
        v120 = 0;
        v121 = 0;
        v122 = 1;
        v123 = 0;
        v124 = 5126;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        if (v9(v48)) {
          v116 = true;
          v117 = v1.createStream(34962, v48);
          v124 = v117.dtype;
        } else {
          v117 = v1.getBuffer(v48);
          if (v117) {
            v124 = v117.dtype;
          } else if ('constant' in v48) {
            v122 = 2;
            if (typeof v48.constant === 'number') {
              v126 = v48.constant;
              v127 = v128 = v125 = 0;
            } else {
              v126 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v127 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v128 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v125 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v117 = v1.createStream(34962, v48.buffer);
            } else {
              v117 = v1.getBuffer(v48.buffer);
            }
            v124 = 'type' in v48 ? v43[v48.type] : v117.dtype;
            v119 = !!v48.normalized;
            v121 = v48.size | 0;
            v120 = v48.offset | 0;
            v123 = v48.stride | 0;
            v118 = v48.divisor | 0;
          }
        }
        v129 = positionFract.location;
        v130 = v0[v129];
        if (v122 === 1) {
          if (!v130.buffer) {
            v8.enableVertexAttribArray(v129);
          }
          v131 = v121 || 2;
          if (v130.type !== v124 || v130.size !== v131 || v130.buffer !== v117 || v130.normalized !== v119 || v130.offset !== v120 || v130.stride !== v123) {
            v8.bindBuffer(34962, v117.buffer);
            v8.vertexAttribPointer(v129, v131, v124, v119, v123, v120);
            v130.type = v124;
            v130.size = v131;
            v130.buffer = v117;
            v130.normalized = v119;
            v130.offset = v120;
            v130.stride = v123;
          }
          if (v130.divisor !== v118) {
            v97.vertexAttribDivisorANGLE(v129, v118);
            v130.divisor = v118;
          }
        } else {
          if (v130.buffer) {
            v8.disableVertexAttribArray(v129);
            v130.buffer = null;
          }
          if (v130.x !== v126 || v130.y !== v127 || v130.z !== v128 || v130.w !== v125) {
            v8.vertexAttrib4f(v129, v126, v127, v128, v125);
            v130.x = v126;
            v130.y = v127;
            v130.z = v128;
            v130.w = v125;
          }
        }
        v132 = a0['fill'];
        v133 = v132[0];
        v134 = v132[1];
        v135 = v132[2];
        v136 = v132[3];
        v8.uniform4f(color.location, v133, v134, v135, v136);
        v137 = a0['scale'];
        v138 = v137[0];
        v139 = v137[1];
        v8.uniform2f(scale.location, v138, v139);
        v140 = a0['scaleFract'];
        v141 = v140[0];
        v142 = v140[1];
        v8.uniform2f(scaleFract.location, v141, v142);
        v143 = a0['translate'];
        v144 = v143[0];
        v145 = v143[1];
        v8.uniform2f(translate.location, v144, v145);
        v146 = a0['translateFract'];
        v147 = v146[0];
        v148 = v146[1];
        v8.uniform2f(translateFract.location, v147, v148);
        v149 = a0['id'];
        v8.uniform1f(id.location, v149);
        v150 = a0['opacity'];
        v8.uniform1f(opacity.location, v150);
        v151 = $3.call(this, v2, a0, 0);
        v152 = null;
        v153 = v9(v151);
        if (v153) {
          v152 = v5.createStream(v151);
        } else {
          v152 = v5.getElements(v151);
        }
        if (v152) v8.bindBuffer(34963, v152.buffer.buffer);
        v154 = v152 ? v152.vertCount : -1;
        if (v154) {
          v155 = v4.instances;
          if (v155 > 0) {
            if (v152) {
              v97.drawElementsInstancedANGLE(4, v154, v152.type, 0 << (v152.type - 5121 >> 1), v155);
            } else {
              v97.drawArraysInstancedANGLE(4, 0, v154, v155);
            }
          } else if (v155 < 0) {
            if (v152) {
              v8.drawElements(4, v154, v152.type, 0 << (v152.type - 5121 >> 1));
            } else {
              v8.drawArrays(4, 0, v154);
            }
          }
          v3.dirty = true;
          v15.setVAO(null);
          v2.viewportWidth = v88;
          v2.viewportHeight = v89;
          if (v95) {
            $1.cpuTime += performance.now() - v96;
          }
          if (v99) {
            v1.destroyStream(v100);
          }
          if (v116) {
            v1.destroyStream(v117);
          }
          if (v153) {
            v5.destroyStream(v152);
          }
        }
      },
      'scope': function (a0, a1, a2) {
        var v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271;
        v156 = a0['viewport'];
        v157 = v156.x | 0;
        v158 = v156.y | 0;
        v159 = 'width' in v156 ? v156.width | 0 : v2.framebufferWidth - v157;
        v160 = 'height' in v156 ? v156.height | 0 : v2.framebufferHeight - v158;
        v161 = v2.viewportWidth;
        v2.viewportWidth = v159;
        v162 = v2.viewportHeight;
        v2.viewportHeight = v160;
        v163 = v38[0];
        v38[0] = v157;
        v164 = v38[1];
        v38[1] = v158;
        v165 = v38[2];
        v38[2] = v159;
        v166 = v38[3];
        v38[3] = v160;
        v167 = v16[0];
        v16[0] = 0;
        v168 = v16[1];
        v16[1] = 0;
        v169 = v16[2];
        v16[2] = 0;
        v170 = v16[3];
        v16[3] = 0;
        v171 = v10.blend_enable;
        v10.blend_enable = true;
        v172 = v18[0];
        v18[0] = 32774;
        v173 = v18[1];
        v18[1] = 32774;
        v174 = v20[0];
        v20[0] = 770;
        v175 = v20[1];
        v20[1] = 771;
        v176 = v20[2];
        v20[2] = 773;
        v177 = v20[3];
        v20[3] = 1;
        v178 = v10.depth_enable;
        v10.depth_enable = false;
        v179 = a0['viewport'];
        v180 = v179.x | 0;
        v181 = v179.y | 0;
        v182 = 'width' in v179 ? v179.width | 0 : v2.framebufferWidth - v180;
        v183 = 'height' in v179 ? v179.height | 0 : v2.framebufferHeight - v181;
        v184 = v30[0];
        v30[0] = v180;
        v185 = v30[1];
        v30[1] = v181;
        v186 = v30[2];
        v30[2] = v182;
        v187 = v30[3];
        v30[3] = v183;
        v188 = v10.scissor_enable;
        v10.scissor_enable = true;
        v189 = v10.stencil_enable;
        v10.stencil_enable = false;
        v190 = v3.profile;
        if (v190) {
          v191 = performance.now();
          $1.count++;
        }
        v192 = $4.call(this, v2, a0, a2);
        v193 = null;
        v194 = v9(v192);
        if (v194) {
          v193 = v5.createStream(v192);
        } else {
          v193 = v5.getElements(v192);
        }
        v195 = v4.elements;
        v4.elements = v193;
        v196 = v4.offset;
        v4.offset = 0;
        v197 = v193 ? v193.vertCount : -1;
        v198 = v4.count;
        v4.count = v197;
        v199 = v4.primitive;
        v4.primitive = 4;
        v200 = a0['fill'];
        v201 = v14[14];
        v14[14] = v200;
        v202 = a0['id'];
        v203 = v14[31];
        v14[31] = v202;
        v204 = a0['opacity'];
        v205 = v14[10];
        v14[10] = v204;
        v206 = v2['pixelRatio'];
        v207 = v14[34];
        v14[34] = v206;
        v208 = a0['scale'];
        v209 = v14[6];
        v14[6] = v208;
        v210 = a0['scaleFract'];
        v211 = v14[7];
        v14[7] = v210;
        v212 = a0['translate'];
        v213 = v14[8];
        v14[8] = v212;
        v214 = a0['translateFract'];
        v215 = v14[9];
        v14[9] = v214;
        v216 = $5.call(this, v2, a0, a2);
        v217 = v14[3];
        v14[3] = v216;
        v218 = a0['positionBuffer'];
        v47.buffer = v218;
        v219 = false;
        v220 = null;
        v221 = 0;
        v222 = false;
        v223 = 0;
        v224 = 0;
        v225 = 1;
        v226 = 0;
        v227 = 5126;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        v231 = 0;
        if (v9(v47)) {
          v219 = true;
          v220 = v1.createStream(34962, v47);
          v227 = v220.dtype;
        } else {
          v220 = v1.getBuffer(v47);
          if (v220) {
            v227 = v220.dtype;
          } else if ('constant' in v47) {
            v225 = 2;
            if (typeof v47.constant === 'number') {
              v229 = v47.constant;
              v230 = v231 = v228 = 0;
            } else {
              v229 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v230 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v231 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v228 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v220 = v1.createStream(34962, v47.buffer);
            } else {
              v220 = v1.getBuffer(v47.buffer);
            }
            v227 = 'type' in v47 ? v43[v47.type] : v220.dtype;
            v222 = !!v47.normalized;
            v224 = v47.size | 0;
            v223 = v47.offset | 0;
            v226 = v47.stride | 0;
            v221 = v47.divisor | 0;
          }
        }
        v232 = $6.buffer;
        $6.buffer = v220;
        v233 = $6.divisor;
        $6.divisor = v221;
        v234 = $6.normalized;
        $6.normalized = v222;
        v235 = $6.offset;
        $6.offset = v223;
        v236 = $6.size;
        $6.size = v224;
        v237 = $6.state;
        $6.state = v225;
        v238 = $6.stride;
        $6.stride = v226;
        v239 = $6.type;
        $6.type = v227;
        v240 = $6.w;
        $6.w = v228;
        v241 = $6.x;
        $6.x = v229;
        v242 = $6.y;
        $6.y = v230;
        v243 = $6.z;
        $6.z = v231;
        v244 = a0['positionFractBuffer'];
        v48.buffer = v244;
        v245 = false;
        v246 = null;
        v247 = 0;
        v248 = false;
        v249 = 0;
        v250 = 0;
        v251 = 1;
        v252 = 0;
        v253 = 5126;
        v254 = 0;
        v255 = 0;
        v256 = 0;
        v257 = 0;
        if (v9(v48)) {
          v245 = true;
          v246 = v1.createStream(34962, v48);
          v253 = v246.dtype;
        } else {
          v246 = v1.getBuffer(v48);
          if (v246) {
            v253 = v246.dtype;
          } else if ('constant' in v48) {
            v251 = 2;
            if (typeof v48.constant === 'number') {
              v255 = v48.constant;
              v256 = v257 = v254 = 0;
            } else {
              v255 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v256 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v257 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v254 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v246 = v1.createStream(34962, v48.buffer);
            } else {
              v246 = v1.getBuffer(v48.buffer);
            }
            v253 = 'type' in v48 ? v43[v48.type] : v246.dtype;
            v248 = !!v48.normalized;
            v250 = v48.size | 0;
            v249 = v48.offset | 0;
            v252 = v48.stride | 0;
            v247 = v48.divisor | 0;
          }
        }
        v258 = $7.buffer;
        $7.buffer = v246;
        v259 = $7.divisor;
        $7.divisor = v247;
        v260 = $7.normalized;
        $7.normalized = v248;
        v261 = $7.offset;
        $7.offset = v249;
        v262 = $7.size;
        $7.size = v250;
        v263 = $7.state;
        $7.state = v251;
        v264 = $7.stride;
        $7.stride = v252;
        v265 = $7.type;
        $7.type = v253;
        v266 = $7.w;
        $7.w = v254;
        v267 = $7.x;
        $7.x = v255;
        v268 = $7.y;
        $7.y = v256;
        v269 = $7.z;
        $7.z = v257;
        v270 = v11.vert;
        v11.vert = 42;
        v271 = v11.frag;
        v11.frag = 41;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v161;
        v2.viewportHeight = v162;
        v38[0] = v163;
        v38[1] = v164;
        v38[2] = v165;
        v38[3] = v166;
        v16[0] = v167;
        v16[1] = v168;
        v16[2] = v169;
        v16[3] = v170;
        v10.blend_enable = v171;
        v18[0] = v172;
        v18[1] = v173;
        v20[0] = v174;
        v20[1] = v175;
        v20[2] = v176;
        v20[3] = v177;
        v10.depth_enable = v178;
        v30[0] = v184;
        v30[1] = v185;
        v30[2] = v186;
        v30[3] = v187;
        v10.scissor_enable = v188;
        v10.stencil_enable = v189;
        if (v190) {
          $1.cpuTime += performance.now() - v191;
        }
        if (v194) {
          v5.destroyStream(v193);
        }
        v4.elements = v195;
        v4.offset = v196;
        v4.count = v198;
        v4.primitive = v199;
        v14[14] = v201;
        v14[31] = v203;
        v14[10] = v205;
        v14[34] = v207;
        v14[6] = v209;
        v14[7] = v211;
        v14[8] = v213;
        v14[9] = v215;
        v14[3] = v217;
        if (v219) {
          v1.destroyStream(v220);
        }
        $6.buffer = v232;
        $6.divisor = v233;
        $6.normalized = v234;
        $6.offset = v235;
        $6.size = v236;
        $6.state = v237;
        $6.stride = v238;
        $6.type = v239;
        $6.w = v240;
        $6.x = v241;
        $6.y = v242;
        $6.z = v243;
        if (v245) {
          v1.destroyStream(v246);
        }
        $7.buffer = v258;
        $7.divisor = v259;
        $7.normalized = v260;
        $7.offset = v261;
        $7.size = v262;
        $7.state = v263;
        $7.stride = v264;
        $7.type = v265;
        $7.w = v266;
        $7.x = v267;
        $7.y = v268;
        $7.z = v269;
        v11.vert = v270;
        v11.frag = v271;
        v3.dirty = true;
      }

    };
  },
  '$45,borderColorId,borderSize,colorId,constPointSize,isActive,markerTexture,opacity,paletteSize,paletteTexture,pixelRatio,scale,scaleFract,size,translate,translateFract,x,xFract,y,yFract': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, borderColorId, borderSize, colorId, constPointSize, isActive, markerTexture, opacity, paletteSize, paletteTexture, pixelRatio, scale, scaleFract, size, translate, translateFract, x, xFract, y, yFract) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    return {
      'batch': function (a0, a1) {
        var v573, v574, v609, v610, v611, v612, v613;
        v573 = v6.angle_instanced_arrays;
        v574 = v7.next;
        if (v574 !== v7.cur) {
          if (v574) {
            v8.bindFramebuffer(36160, v574.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v574;
        }
        if (v3.dirty) {
          var v575, v576, v577, v578, v579, v580, v581, v582, v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608;
          v575 = v10.dither;
          if (v575 !== v3.dither) {
            if (v575) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v575;
          }
          v576 = v18[0];
          v577 = v18[1];
          if (v576 !== v19[0] || v577 !== v19[1]) {
            v8.blendEquationSeparate(v576, v577);
            v19[0] = v576;
            v19[1] = v577;
          }
          v578 = v10.depth_func;
          if (v578 !== v3.depth_func) {
            v8.depthFunc(v578);
            v3.depth_func = v578;
          }
          v579 = v24[0];
          v580 = v24[1];
          if (v579 !== v25[0] || v580 !== v25[1]) {
            v8.depthRange(v579, v580);
            v25[0] = v579;
            v25[1] = v580;
          }
          v581 = v10.depth_mask;
          if (v581 !== v3.depth_mask) {
            v8.depthMask(v581);
            v3.depth_mask = v581;
          }
          v582 = v22[0];
          v583 = v22[1];
          v584 = v22[2];
          v585 = v22[3];
          if (v582 !== v23[0] || v583 !== v23[1] || v584 !== v23[2] || v585 !== v23[3]) {
            v8.colorMask(v582, v583, v584, v585);
            v23[0] = v582;
            v23[1] = v583;
            v23[2] = v584;
            v23[3] = v585;
          }
          v586 = v10.cull_enable;
          if (v586 !== v3.cull_enable) {
            if (v586) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v586;
          }
          v587 = v10.cull_face;
          if (v587 !== v3.cull_face) {
            v8.cullFace(v587);
            v3.cull_face = v587;
          }
          v588 = v10.frontFace;
          if (v588 !== v3.frontFace) {
            v8.frontFace(v588);
            v3.frontFace = v588;
          }
          v589 = v10.lineWidth;
          if (v589 !== v3.lineWidth) {
            v8.lineWidth(v589);
            v3.lineWidth = v589;
          }
          v590 = v10.polygonOffset_enable;
          if (v590 !== v3.polygonOffset_enable) {
            if (v590) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v590;
          }
          v591 = v26[0];
          v592 = v26[1];
          if (v591 !== v27[0] || v592 !== v27[1]) {
            v8.polygonOffset(v591, v592);
            v27[0] = v591;
            v27[1] = v592;
          }
          v593 = v10.sample_alpha;
          if (v593 !== v3.sample_alpha) {
            if (v593) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v593;
          }
          v594 = v10.sample_enable;
          if (v594 !== v3.sample_enable) {
            if (v594) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v594;
          }
          v595 = v28[0];
          v596 = v28[1];
          if (v595 !== v29[0] || v596 !== v29[1]) {
            v8.sampleCoverage(v595, v596);
            v29[0] = v595;
            v29[1] = v596;
          }
          v597 = v10.stencil_mask;
          if (v597 !== v3.stencil_mask) {
            v8.stencilMask(v597);
            v3.stencil_mask = v597;
          }
          v598 = v32[0];
          v599 = v32[1];
          v600 = v32[2];
          if (v598 !== v33[0] || v599 !== v33[1] || v600 !== v33[2]) {
            v8.stencilFunc(v598, v599, v600);
            v33[0] = v598;
            v33[1] = v599;
            v33[2] = v600;
          }
          v601 = v36[0];
          v602 = v36[1];
          v603 = v36[2];
          v604 = v36[3];
          if (v601 !== v37[0] || v602 !== v37[1] || v603 !== v37[2] || v604 !== v37[3]) {
            v8.stencilOpSeparate(v601, v602, v603, v604);
            v37[0] = v601;
            v37[1] = v602;
            v37[2] = v603;
            v37[3] = v604;
          }
          v605 = v34[0];
          v606 = v34[1];
          v607 = v34[2];
          v608 = v34[3];
          if (v605 !== v35[0] || v606 !== v35[1] || v607 !== v35[2] || v608 !== v35[3]) {
            v8.stencilOpSeparate(v605, v606, v607, v608);
            v35[0] = v605;
            v35[1] = v606;
            v35[2] = v607;
            v35[3] = v608;
          }
        }
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v609 = v3.profile;
        if (v609) {
          v610 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($34.program);
        v611 = v6.angle_instanced_arrays;
        var v815;
        v15.setVAO(null);
        v8.uniform1i(constPointSize.location, false);
        v8.uniform1i(paletteTexture.location, $44.bind());
        v815 = v4.instances;
        for (v612 = 0; v612 < a1; ++v612) {
          v613 = a0[v612];
          var v614, v615, v616, v617, v618, v619, v620, v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, v674, v675, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, v706, v707, v708, v709, v710, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, v745, v746, v747, v748, v749, v750, v751, v752, v753, v754, v755, v756, v757, v758, v759, v760, v761, v762, v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, v776, v777, v778, v779, v780, v781, v782, v783, v784, v785, v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810, v811, v812, v813, v814;
          v614 = v613['viewport'];
          v615 = v614.x | 0;
          v616 = v614.y | 0;
          v617 = 'width' in v614 ? v614.width | 0 : v2.framebufferWidth - v615;
          v618 = 'height' in v614 ? v614.height | 0 : v2.framebufferHeight - v616;
          v619 = v2.viewportWidth;
          v2.viewportWidth = v617;
          v620 = v2.viewportHeight;
          v2.viewportHeight = v618;
          v8.viewport(v615, v616, v617, v618);
          v39[0] = v615;
          v39[1] = v616;
          v39[2] = v617;
          v39[3] = v618;
          v621 = v613['viewport'];
          v622 = v621.x | 0;
          v623 = v621.y | 0;
          v624 = 'width' in v621 ? v621.width | 0 : v2.framebufferWidth - v622;
          v625 = 'height' in v621 ? v621.height | 0 : v2.framebufferHeight - v623;
          v8.scissor(v622, v623, v624, v625);
          v31[0] = v622;
          v31[1] = v623;
          v31[2] = v624;
          v31[3] = v625;
          v626 = $35.call(this, v2, v613, v612);
          v627 = false;
          v628 = null;
          v629 = 0;
          v630 = false;
          v631 = 0;
          v632 = 0;
          v633 = 1;
          v634 = 0;
          v635 = 5126;
          v636 = 0;
          v637 = 0;
          v638 = 0;
          v639 = 0;
          if (v9(v626)) {
            v627 = true;
            v628 = v1.createStream(34962, v626);
            v635 = v628.dtype;
          } else {
            v628 = v1.getBuffer(v626);
            if (v628) {
              v635 = v628.dtype;
            } else if ('constant' in v626) {
              v633 = 2;
              if (typeof v626.constant === 'number') {
                v637 = v626.constant;
                v638 = v639 = v636 = 0;
              } else {
                v637 = v626.constant.length > 0 ? v626.constant[0] : 0;
                v638 = v626.constant.length > 1 ? v626.constant[1] : 0;
                v639 = v626.constant.length > 2 ? v626.constant[2] : 0;
                v636 = v626.constant.length > 3 ? v626.constant[3] : 0;
              }
            } else {
              if (v9(v626.buffer)) {
                v628 = v1.createStream(34962, v626.buffer);
              } else {
                v628 = v1.getBuffer(v626.buffer);
              }
              v635 = 'type' in v626 ? v43[v626.type] : v628.dtype;
              v630 = !!v626.normalized;
              v632 = v626.size | 0;
              v631 = v626.offset | 0;
              v634 = v626.stride | 0;
              v629 = v626.divisor | 0;
            }
          }
          v640 = x.location;
          v641 = v0[v640];
          if (v633 === 1) {
            if (!v641.buffer) {
              v8.enableVertexAttribArray(v640);
            }
            v642 = v632 || 1;
            if (v641.type !== v635 || v641.size !== v642 || v641.buffer !== v628 || v641.normalized !== v630 || v641.offset !== v631 || v641.stride !== v634) {
              v8.bindBuffer(34962, v628.buffer);
              v8.vertexAttribPointer(v640, v642, v635, v630, v634, v631);
              v641.type = v635;
              v641.size = v642;
              v641.buffer = v628;
              v641.normalized = v630;
              v641.offset = v631;
              v641.stride = v634;
            }
            if (v641.divisor !== v629) {
              v611.vertexAttribDivisorANGLE(v640, v629);
              v641.divisor = v629;
            }
          } else {
            if (v641.buffer) {
              v8.disableVertexAttribArray(v640);
              v641.buffer = null;
            }
            if (v641.x !== v637 || v641.y !== v638 || v641.z !== v639 || v641.w !== v636) {
              v8.vertexAttrib4f(v640, v637, v638, v639, v636);
              v641.x = v637;
              v641.y = v638;
              v641.z = v639;
              v641.w = v636;
            }
          }
          v643 = $36.call(this, v2, v613, v612);
          v644 = false;
          v645 = null;
          v646 = 0;
          v647 = false;
          v648 = 0;
          v649 = 0;
          v650 = 1;
          v651 = 0;
          v652 = 5126;
          v653 = 0;
          v654 = 0;
          v655 = 0;
          v656 = 0;
          if (v9(v643)) {
            v644 = true;
            v645 = v1.createStream(34962, v643);
            v652 = v645.dtype;
          } else {
            v645 = v1.getBuffer(v643);
            if (v645) {
              v652 = v645.dtype;
            } else if ('constant' in v643) {
              v650 = 2;
              if (typeof v643.constant === 'number') {
                v654 = v643.constant;
                v655 = v656 = v653 = 0;
              } else {
                v654 = v643.constant.length > 0 ? v643.constant[0] : 0;
                v655 = v643.constant.length > 1 ? v643.constant[1] : 0;
                v656 = v643.constant.length > 2 ? v643.constant[2] : 0;
                v653 = v643.constant.length > 3 ? v643.constant[3] : 0;
              }
            } else {
              if (v9(v643.buffer)) {
                v645 = v1.createStream(34962, v643.buffer);
              } else {
                v645 = v1.getBuffer(v643.buffer);
              }
              v652 = 'type' in v643 ? v43[v643.type] : v645.dtype;
              v647 = !!v643.normalized;
              v649 = v643.size | 0;
              v648 = v643.offset | 0;
              v651 = v643.stride | 0;
              v646 = v643.divisor | 0;
            }
          }
          v657 = y.location;
          v658 = v0[v657];
          if (v650 === 1) {
            if (!v658.buffer) {
              v8.enableVertexAttribArray(v657);
            }
            v659 = v649 || 1;
            if (v658.type !== v652 || v658.size !== v659 || v658.buffer !== v645 || v658.normalized !== v647 || v658.offset !== v648 || v658.stride !== v651) {
              v8.bindBuffer(34962, v645.buffer);
              v8.vertexAttribPointer(v657, v659, v652, v647, v651, v648);
              v658.type = v652;
              v658.size = v659;
              v658.buffer = v645;
              v658.normalized = v647;
              v658.offset = v648;
              v658.stride = v651;
            }
            if (v658.divisor !== v646) {
              v611.vertexAttribDivisorANGLE(v657, v646);
              v658.divisor = v646;
            }
          } else {
            if (v658.buffer) {
              v8.disableVertexAttribArray(v657);
              v658.buffer = null;
            }
            if (v658.x !== v654 || v658.y !== v655 || v658.z !== v656 || v658.w !== v653) {
              v8.vertexAttrib4f(v657, v654, v655, v656, v653);
              v658.x = v654;
              v658.y = v655;
              v658.z = v656;
              v658.w = v653;
            }
          }
          v660 = $37.call(this, v2, v613, v612);
          v661 = false;
          v662 = null;
          v663 = 0;
          v664 = false;
          v665 = 0;
          v666 = 0;
          v667 = 1;
          v668 = 0;
          v669 = 5126;
          v670 = 0;
          v671 = 0;
          v672 = 0;
          v673 = 0;
          if (v9(v660)) {
            v661 = true;
            v662 = v1.createStream(34962, v660);
            v669 = v662.dtype;
          } else {
            v662 = v1.getBuffer(v660);
            if (v662) {
              v669 = v662.dtype;
            } else if ('constant' in v660) {
              v667 = 2;
              if (typeof v660.constant === 'number') {
                v671 = v660.constant;
                v672 = v673 = v670 = 0;
              } else {
                v671 = v660.constant.length > 0 ? v660.constant[0] : 0;
                v672 = v660.constant.length > 1 ? v660.constant[1] : 0;
                v673 = v660.constant.length > 2 ? v660.constant[2] : 0;
                v670 = v660.constant.length > 3 ? v660.constant[3] : 0;
              }
            } else {
              if (v9(v660.buffer)) {
                v662 = v1.createStream(34962, v660.buffer);
              } else {
                v662 = v1.getBuffer(v660.buffer);
              }
              v669 = 'type' in v660 ? v43[v660.type] : v662.dtype;
              v664 = !!v660.normalized;
              v666 = v660.size | 0;
              v665 = v660.offset | 0;
              v668 = v660.stride | 0;
              v663 = v660.divisor | 0;
            }
          }
          v674 = xFract.location;
          v675 = v0[v674];
          if (v667 === 1) {
            if (!v675.buffer) {
              v8.enableVertexAttribArray(v674);
            }
            v676 = v666 || 1;
            if (v675.type !== v669 || v675.size !== v676 || v675.buffer !== v662 || v675.normalized !== v664 || v675.offset !== v665 || v675.stride !== v668) {
              v8.bindBuffer(34962, v662.buffer);
              v8.vertexAttribPointer(v674, v676, v669, v664, v668, v665);
              v675.type = v669;
              v675.size = v676;
              v675.buffer = v662;
              v675.normalized = v664;
              v675.offset = v665;
              v675.stride = v668;
            }
            if (v675.divisor !== v663) {
              v611.vertexAttribDivisorANGLE(v674, v663);
              v675.divisor = v663;
            }
          } else {
            if (v675.buffer) {
              v8.disableVertexAttribArray(v674);
              v675.buffer = null;
            }
            if (v675.x !== v671 || v675.y !== v672 || v675.z !== v673 || v675.w !== v670) {
              v8.vertexAttrib4f(v674, v671, v672, v673, v670);
              v675.x = v671;
              v675.y = v672;
              v675.z = v673;
              v675.w = v670;
            }
          }
          v677 = $38.call(this, v2, v613, v612);
          v678 = false;
          v679 = null;
          v680 = 0;
          v681 = false;
          v682 = 0;
          v683 = 0;
          v684 = 1;
          v685 = 0;
          v686 = 5126;
          v687 = 0;
          v688 = 0;
          v689 = 0;
          v690 = 0;
          if (v9(v677)) {
            v678 = true;
            v679 = v1.createStream(34962, v677);
            v686 = v679.dtype;
          } else {
            v679 = v1.getBuffer(v677);
            if (v679) {
              v686 = v679.dtype;
            } else if ('constant' in v677) {
              v684 = 2;
              if (typeof v677.constant === 'number') {
                v688 = v677.constant;
                v689 = v690 = v687 = 0;
              } else {
                v688 = v677.constant.length > 0 ? v677.constant[0] : 0;
                v689 = v677.constant.length > 1 ? v677.constant[1] : 0;
                v690 = v677.constant.length > 2 ? v677.constant[2] : 0;
                v687 = v677.constant.length > 3 ? v677.constant[3] : 0;
              }
            } else {
              if (v9(v677.buffer)) {
                v679 = v1.createStream(34962, v677.buffer);
              } else {
                v679 = v1.getBuffer(v677.buffer);
              }
              v686 = 'type' in v677 ? v43[v677.type] : v679.dtype;
              v681 = !!v677.normalized;
              v683 = v677.size | 0;
              v682 = v677.offset | 0;
              v685 = v677.stride | 0;
              v680 = v677.divisor | 0;
            }
          }
          v691 = yFract.location;
          v692 = v0[v691];
          if (v684 === 1) {
            if (!v692.buffer) {
              v8.enableVertexAttribArray(v691);
            }
            v693 = v683 || 1;
            if (v692.type !== v686 || v692.size !== v693 || v692.buffer !== v679 || v692.normalized !== v681 || v692.offset !== v682 || v692.stride !== v685) {
              v8.bindBuffer(34962, v679.buffer);
              v8.vertexAttribPointer(v691, v693, v686, v681, v685, v682);
              v692.type = v686;
              v692.size = v693;
              v692.buffer = v679;
              v692.normalized = v681;
              v692.offset = v682;
              v692.stride = v685;
            }
            if (v692.divisor !== v680) {
              v611.vertexAttribDivisorANGLE(v691, v680);
              v692.divisor = v680;
            }
          } else {
            if (v692.buffer) {
              v8.disableVertexAttribArray(v691);
              v692.buffer = null;
            }
            if (v692.x !== v688 || v692.y !== v689 || v692.z !== v690 || v692.w !== v687) {
              v8.vertexAttrib4f(v691, v688, v689, v690, v687);
              v692.x = v688;
              v692.y = v689;
              v692.z = v690;
              v692.w = v687;
            }
          }
          v694 = $39.call(this, v2, v613, v612);
          v695 = false;
          v696 = null;
          v697 = 0;
          v698 = false;
          v699 = 0;
          v700 = 0;
          v701 = 1;
          v702 = 0;
          v703 = 5126;
          v704 = 0;
          v705 = 0;
          v706 = 0;
          v707 = 0;
          if (v9(v694)) {
            v695 = true;
            v696 = v1.createStream(34962, v694);
            v703 = v696.dtype;
          } else {
            v696 = v1.getBuffer(v694);
            if (v696) {
              v703 = v696.dtype;
            } else if ('constant' in v694) {
              v701 = 2;
              if (typeof v694.constant === 'number') {
                v705 = v694.constant;
                v706 = v707 = v704 = 0;
              } else {
                v705 = v694.constant.length > 0 ? v694.constant[0] : 0;
                v706 = v694.constant.length > 1 ? v694.constant[1] : 0;
                v707 = v694.constant.length > 2 ? v694.constant[2] : 0;
                v704 = v694.constant.length > 3 ? v694.constant[3] : 0;
              }
            } else {
              if (v9(v694.buffer)) {
                v696 = v1.createStream(34962, v694.buffer);
              } else {
                v696 = v1.getBuffer(v694.buffer);
              }
              v703 = 'type' in v694 ? v43[v694.type] : v696.dtype;
              v698 = !!v694.normalized;
              v700 = v694.size | 0;
              v699 = v694.offset | 0;
              v702 = v694.stride | 0;
              v697 = v694.divisor | 0;
            }
          }
          v708 = size.location;
          v709 = v0[v708];
          if (v701 === 1) {
            if (!v709.buffer) {
              v8.enableVertexAttribArray(v708);
            }
            v710 = v700 || 1;
            if (v709.type !== v703 || v709.size !== v710 || v709.buffer !== v696 || v709.normalized !== v698 || v709.offset !== v699 || v709.stride !== v702) {
              v8.bindBuffer(34962, v696.buffer);
              v8.vertexAttribPointer(v708, v710, v703, v698, v702, v699);
              v709.type = v703;
              v709.size = v710;
              v709.buffer = v696;
              v709.normalized = v698;
              v709.offset = v699;
              v709.stride = v702;
            }
            if (v709.divisor !== v697) {
              v611.vertexAttribDivisorANGLE(v708, v697);
              v709.divisor = v697;
            }
          } else {
            if (v709.buffer) {
              v8.disableVertexAttribArray(v708);
              v709.buffer = null;
            }
            if (v709.x !== v705 || v709.y !== v706 || v709.z !== v707 || v709.w !== v704) {
              v8.vertexAttrib4f(v708, v705, v706, v707, v704);
              v709.x = v705;
              v709.y = v706;
              v709.z = v707;
              v709.w = v704;
            }
          }
          v711 = $40.call(this, v2, v613, v612);
          v712 = false;
          v713 = null;
          v714 = 0;
          v715 = false;
          v716 = 0;
          v717 = 0;
          v718 = 1;
          v719 = 0;
          v720 = 5126;
          v721 = 0;
          v722 = 0;
          v723 = 0;
          v724 = 0;
          if (v9(v711)) {
            v712 = true;
            v713 = v1.createStream(34962, v711);
            v720 = v713.dtype;
          } else {
            v713 = v1.getBuffer(v711);
            if (v713) {
              v720 = v713.dtype;
            } else if ('constant' in v711) {
              v718 = 2;
              if (typeof v711.constant === 'number') {
                v722 = v711.constant;
                v723 = v724 = v721 = 0;
              } else {
                v722 = v711.constant.length > 0 ? v711.constant[0] : 0;
                v723 = v711.constant.length > 1 ? v711.constant[1] : 0;
                v724 = v711.constant.length > 2 ? v711.constant[2] : 0;
                v721 = v711.constant.length > 3 ? v711.constant[3] : 0;
              }
            } else {
              if (v9(v711.buffer)) {
                v713 = v1.createStream(34962, v711.buffer);
              } else {
                v713 = v1.getBuffer(v711.buffer);
              }
              v720 = 'type' in v711 ? v43[v711.type] : v713.dtype;
              v715 = !!v711.normalized;
              v717 = v711.size | 0;
              v716 = v711.offset | 0;
              v719 = v711.stride | 0;
              v714 = v711.divisor | 0;
            }
          }
          v725 = borderSize.location;
          v726 = v0[v725];
          if (v718 === 1) {
            if (!v726.buffer) {
              v8.enableVertexAttribArray(v725);
            }
            v727 = v717 || 1;
            if (v726.type !== v720 || v726.size !== v727 || v726.buffer !== v713 || v726.normalized !== v715 || v726.offset !== v716 || v726.stride !== v719) {
              v8.bindBuffer(34962, v713.buffer);
              v8.vertexAttribPointer(v725, v727, v720, v715, v719, v716);
              v726.type = v720;
              v726.size = v727;
              v726.buffer = v713;
              v726.normalized = v715;
              v726.offset = v716;
              v726.stride = v719;
            }
            if (v726.divisor !== v714) {
              v611.vertexAttribDivisorANGLE(v725, v714);
              v726.divisor = v714;
            }
          } else {
            if (v726.buffer) {
              v8.disableVertexAttribArray(v725);
              v726.buffer = null;
            }
            if (v726.x !== v722 || v726.y !== v723 || v726.z !== v724 || v726.w !== v721) {
              v8.vertexAttrib4f(v725, v722, v723, v724, v721);
              v726.x = v722;
              v726.y = v723;
              v726.z = v724;
              v726.w = v721;
            }
          }
          v728 = $41.call(this, v2, v613, v612);
          v729 = false;
          v730 = null;
          v731 = 0;
          v732 = false;
          v733 = 0;
          v734 = 0;
          v735 = 1;
          v736 = 0;
          v737 = 5126;
          v738 = 0;
          v739 = 0;
          v740 = 0;
          v741 = 0;
          if (v9(v728)) {
            v729 = true;
            v730 = v1.createStream(34962, v728);
            v737 = v730.dtype;
          } else {
            v730 = v1.getBuffer(v728);
            if (v730) {
              v737 = v730.dtype;
            } else if ('constant' in v728) {
              v735 = 2;
              if (typeof v728.constant === 'number') {
                v739 = v728.constant;
                v740 = v741 = v738 = 0;
              } else {
                v739 = v728.constant.length > 0 ? v728.constant[0] : 0;
                v740 = v728.constant.length > 1 ? v728.constant[1] : 0;
                v741 = v728.constant.length > 2 ? v728.constant[2] : 0;
                v738 = v728.constant.length > 3 ? v728.constant[3] : 0;
              }
            } else {
              if (v9(v728.buffer)) {
                v730 = v1.createStream(34962, v728.buffer);
              } else {
                v730 = v1.getBuffer(v728.buffer);
              }
              v737 = 'type' in v728 ? v43[v728.type] : v730.dtype;
              v732 = !!v728.normalized;
              v734 = v728.size | 0;
              v733 = v728.offset | 0;
              v736 = v728.stride | 0;
              v731 = v728.divisor | 0;
            }
          }
          v742 = colorId.location;
          v743 = v0[v742];
          if (v735 === 1) {
            if (!v743.buffer) {
              v8.enableVertexAttribArray(v742);
            }
            v744 = v734 || 4;
            if (v743.type !== v737 || v743.size !== v744 || v743.buffer !== v730 || v743.normalized !== v732 || v743.offset !== v733 || v743.stride !== v736) {
              v8.bindBuffer(34962, v730.buffer);
              v8.vertexAttribPointer(v742, v744, v737, v732, v736, v733);
              v743.type = v737;
              v743.size = v744;
              v743.buffer = v730;
              v743.normalized = v732;
              v743.offset = v733;
              v743.stride = v736;
            }
            if (v743.divisor !== v731) {
              v611.vertexAttribDivisorANGLE(v742, v731);
              v743.divisor = v731;
            }
          } else {
            if (v743.buffer) {
              v8.disableVertexAttribArray(v742);
              v743.buffer = null;
            }
            if (v743.x !== v739 || v743.y !== v740 || v743.z !== v741 || v743.w !== v738) {
              v8.vertexAttrib4f(v742, v739, v740, v741, v738);
              v743.x = v739;
              v743.y = v740;
              v743.z = v741;
              v743.w = v738;
            }
          }
          v745 = $42.call(this, v2, v613, v612);
          v746 = false;
          v747 = null;
          v748 = 0;
          v749 = false;
          v750 = 0;
          v751 = 0;
          v752 = 1;
          v753 = 0;
          v754 = 5126;
          v755 = 0;
          v756 = 0;
          v757 = 0;
          v758 = 0;
          if (v9(v745)) {
            v746 = true;
            v747 = v1.createStream(34962, v745);
            v754 = v747.dtype;
          } else {
            v747 = v1.getBuffer(v745);
            if (v747) {
              v754 = v747.dtype;
            } else if ('constant' in v745) {
              v752 = 2;
              if (typeof v745.constant === 'number') {
                v756 = v745.constant;
                v757 = v758 = v755 = 0;
              } else {
                v756 = v745.constant.length > 0 ? v745.constant[0] : 0;
                v757 = v745.constant.length > 1 ? v745.constant[1] : 0;
                v758 = v745.constant.length > 2 ? v745.constant[2] : 0;
                v755 = v745.constant.length > 3 ? v745.constant[3] : 0;
              }
            } else {
              if (v9(v745.buffer)) {
                v747 = v1.createStream(34962, v745.buffer);
              } else {
                v747 = v1.getBuffer(v745.buffer);
              }
              v754 = 'type' in v745 ? v43[v745.type] : v747.dtype;
              v749 = !!v745.normalized;
              v751 = v745.size | 0;
              v750 = v745.offset | 0;
              v753 = v745.stride | 0;
              v748 = v745.divisor | 0;
            }
          }
          v759 = borderColorId.location;
          v760 = v0[v759];
          if (v752 === 1) {
            if (!v760.buffer) {
              v8.enableVertexAttribArray(v759);
            }
            v761 = v751 || 4;
            if (v760.type !== v754 || v760.size !== v761 || v760.buffer !== v747 || v760.normalized !== v749 || v760.offset !== v750 || v760.stride !== v753) {
              v8.bindBuffer(34962, v747.buffer);
              v8.vertexAttribPointer(v759, v761, v754, v749, v753, v750);
              v760.type = v754;
              v760.size = v761;
              v760.buffer = v747;
              v760.normalized = v749;
              v760.offset = v750;
              v760.stride = v753;
            }
            if (v760.divisor !== v748) {
              v611.vertexAttribDivisorANGLE(v759, v748);
              v760.divisor = v748;
            }
          } else {
            if (v760.buffer) {
              v8.disableVertexAttribArray(v759);
              v760.buffer = null;
            }
            if (v760.x !== v756 || v760.y !== v757 || v760.z !== v758 || v760.w !== v755) {
              v8.vertexAttrib4f(v759, v756, v757, v758, v755);
              v760.x = v756;
              v760.y = v757;
              v760.z = v758;
              v760.w = v755;
            }
          }
          v762 = $43.call(this, v2, v613, v612);
          v763 = false;
          v764 = null;
          v765 = 0;
          v766 = false;
          v767 = 0;
          v768 = 0;
          v769 = 1;
          v770 = 0;
          v771 = 5126;
          v772 = 0;
          v773 = 0;
          v774 = 0;
          v775 = 0;
          if (v9(v762)) {
            v763 = true;
            v764 = v1.createStream(34962, v762);
            v771 = v764.dtype;
          } else {
            v764 = v1.getBuffer(v762);
            if (v764) {
              v771 = v764.dtype;
            } else if ('constant' in v762) {
              v769 = 2;
              if (typeof v762.constant === 'number') {
                v773 = v762.constant;
                v774 = v775 = v772 = 0;
              } else {
                v773 = v762.constant.length > 0 ? v762.constant[0] : 0;
                v774 = v762.constant.length > 1 ? v762.constant[1] : 0;
                v775 = v762.constant.length > 2 ? v762.constant[2] : 0;
                v772 = v762.constant.length > 3 ? v762.constant[3] : 0;
              }
            } else {
              if (v9(v762.buffer)) {
                v764 = v1.createStream(34962, v762.buffer);
              } else {
                v764 = v1.getBuffer(v762.buffer);
              }
              v771 = 'type' in v762 ? v43[v762.type] : v764.dtype;
              v766 = !!v762.normalized;
              v768 = v762.size | 0;
              v767 = v762.offset | 0;
              v770 = v762.stride | 0;
              v765 = v762.divisor | 0;
            }
          }
          v776 = isActive.location;
          v777 = v0[v776];
          if (v769 === 1) {
            if (!v777.buffer) {
              v8.enableVertexAttribArray(v776);
            }
            v778 = v768 || 1;
            if (v777.type !== v771 || v777.size !== v778 || v777.buffer !== v764 || v777.normalized !== v766 || v777.offset !== v767 || v777.stride !== v770) {
              v8.bindBuffer(34962, v764.buffer);
              v8.vertexAttribPointer(v776, v778, v771, v766, v770, v767);
              v777.type = v771;
              v777.size = v778;
              v777.buffer = v764;
              v777.normalized = v766;
              v777.offset = v767;
              v777.stride = v770;
            }
            if (v777.divisor !== v765) {
              v611.vertexAttribDivisorANGLE(v776, v765);
              v777.divisor = v765;
            }
          } else {
            if (v777.buffer) {
              v8.disableVertexAttribArray(v776);
              v777.buffer = null;
            }
            if (v777.x !== v773 || v777.y !== v774 || v777.z !== v775 || v777.w !== v772) {
              v8.vertexAttrib4f(v776, v773, v774, v775, v772);
              v777.x = v773;
              v777.y = v774;
              v777.z = v775;
              v777.w = v772;
            }
          }
          v779 = v2['pixelRatio'];
          if (!v612 || v780 !== v779) {
            v780 = v779;
            v8.uniform1f(pixelRatio.location, v779);
          }
          v781 = v613['scale'];
          v782 = v781[0];
          v784 = v781[1];
          if (!v612 || v783 !== v782 || v785 !== v784) {
            v783 = v782;
            v785 = v784;
            v8.uniform2f(scale.location, v782, v784);
          }
          v786 = v613['scaleFract'];
          v787 = v786[0];
          v789 = v786[1];
          if (!v612 || v788 !== v787 || v790 !== v789) {
            v788 = v787;
            v790 = v789;
            v8.uniform2f(scaleFract.location, v787, v789);
          }
          v791 = v613['translate'];
          v792 = v791[0];
          v794 = v791[1];
          if (!v612 || v793 !== v792 || v795 !== v794) {
            v793 = v792;
            v795 = v794;
            v8.uniform2f(translate.location, v792, v794);
          }
          v796 = v613['translateFract'];
          v797 = v796[0];
          v799 = v796[1];
          if (!v612 || v798 !== v797 || v800 !== v799) {
            v798 = v797;
            v800 = v799;
            v8.uniform2f(translateFract.location, v797, v799);
          }
          v801 = $45.call(this, v2, v613, v612);
          v802 = v801[0];
          v804 = v801[1];
          if (!v612 || v803 !== v802 || v805 !== v804) {
            v803 = v802;
            v805 = v804;
            v8.uniform2f(paletteSize.location, v802, v804);
          }
          v806 = v613['opacity'];
          if (!v612 || v807 !== v806) {
            v807 = v806;
            v8.uniform1f(opacity.location, v806);
          }
          v808 = v613['markerTexture'];
          if (v808 && v808._reglType === 'framebuffer') {
            v808 = v808.color[0];
          }
          v809 = v808._texture;
          v8.uniform1i(markerTexture.location, v809.bind());
          v810 = v613['elements'];
          v811 = null;
          v812 = v9(v810);
          if (v812) {
            v811 = v5.createStream(v810);
          } else {
            v811 = v5.getElements(v810);
          }
          if (v811) v8.bindBuffer(34963, v811.buffer.buffer);
          v813 = v613['offset'];
          v814 = v613['count'];
          if (v814) {
            if (v815 > 0) {
              if (v811) {
                v611.drawElementsInstancedANGLE(0, v814, v811.type, v813 << (v811.type - 5121 >> 1), v815);
              } else {
                v611.drawArraysInstancedANGLE(0, v813, v814, v815);
              }
            } else if (v815 < 0) {
              if (v811) {
                v8.drawElements(0, v814, v811.type, v813 << (v811.type - 5121 >> 1));
              } else {
                v8.drawArrays(0, v813, v814);
              }
            }
            v2.viewportWidth = v619;
            v2.viewportHeight = v620;
            if (v627) {
              v1.destroyStream(v628);
            }
            if (v644) {
              v1.destroyStream(v645);
            }
            if (v661) {
              v1.destroyStream(v662);
            }
            if (v678) {
              v1.destroyStream(v679);
            }
            if (v695) {
              v1.destroyStream(v696);
            }
            if (v712) {
              v1.destroyStream(v713);
            }
            if (v729) {
              v1.destroyStream(v730);
            }
            if (v746) {
              v1.destroyStream(v747);
            }
            if (v763) {
              v1.destroyStream(v764);
            }
            v809.unbind();
            if (v812) {
              v5.destroyStream(v811);
            }
          }
        }
        $44.unbind();
        v3.dirty = true;
        v15.setVAO(null);
        if (v609) {
          $1.cpuTime += performance.now() - v610;
        }
      },
      'draw': function (a0) {
        var v47, v48, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275;
        v47 = v6.angle_instanced_arrays;
        v48 = v7.next;
        if (v48 !== v7.cur) {
          if (v48) {
            v8.bindFramebuffer(36160, v48.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v48;
        }
        if (v3.dirty) {
          var v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82;
          v49 = v10.dither;
          if (v49 !== v3.dither) {
            if (v49) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v49;
          }
          v50 = v18[0];
          v51 = v18[1];
          if (v50 !== v19[0] || v51 !== v19[1]) {
            v8.blendEquationSeparate(v50, v51);
            v19[0] = v50;
            v19[1] = v51;
          }
          v52 = v10.depth_func;
          if (v52 !== v3.depth_func) {
            v8.depthFunc(v52);
            v3.depth_func = v52;
          }
          v53 = v24[0];
          v54 = v24[1];
          if (v53 !== v25[0] || v54 !== v25[1]) {
            v8.depthRange(v53, v54);
            v25[0] = v53;
            v25[1] = v54;
          }
          v55 = v10.depth_mask;
          if (v55 !== v3.depth_mask) {
            v8.depthMask(v55);
            v3.depth_mask = v55;
          }
          v56 = v22[0];
          v57 = v22[1];
          v58 = v22[2];
          v59 = v22[3];
          if (v56 !== v23[0] || v57 !== v23[1] || v58 !== v23[2] || v59 !== v23[3]) {
            v8.colorMask(v56, v57, v58, v59);
            v23[0] = v56;
            v23[1] = v57;
            v23[2] = v58;
            v23[3] = v59;
          }
          v60 = v10.cull_enable;
          if (v60 !== v3.cull_enable) {
            if (v60) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v60;
          }
          v61 = v10.cull_face;
          if (v61 !== v3.cull_face) {
            v8.cullFace(v61);
            v3.cull_face = v61;
          }
          v62 = v10.frontFace;
          if (v62 !== v3.frontFace) {
            v8.frontFace(v62);
            v3.frontFace = v62;
          }
          v63 = v10.lineWidth;
          if (v63 !== v3.lineWidth) {
            v8.lineWidth(v63);
            v3.lineWidth = v63;
          }
          v64 = v10.polygonOffset_enable;
          if (v64 !== v3.polygonOffset_enable) {
            if (v64) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v64;
          }
          v65 = v26[0];
          v66 = v26[1];
          if (v65 !== v27[0] || v66 !== v27[1]) {
            v8.polygonOffset(v65, v66);
            v27[0] = v65;
            v27[1] = v66;
          }
          v67 = v10.sample_alpha;
          if (v67 !== v3.sample_alpha) {
            if (v67) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v67;
          }
          v68 = v10.sample_enable;
          if (v68 !== v3.sample_enable) {
            if (v68) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v68;
          }
          v69 = v28[0];
          v70 = v28[1];
          if (v69 !== v29[0] || v70 !== v29[1]) {
            v8.sampleCoverage(v69, v70);
            v29[0] = v69;
            v29[1] = v70;
          }
          v71 = v10.stencil_mask;
          if (v71 !== v3.stencil_mask) {
            v8.stencilMask(v71);
            v3.stencil_mask = v71;
          }
          v72 = v32[0];
          v73 = v32[1];
          v74 = v32[2];
          if (v72 !== v33[0] || v73 !== v33[1] || v74 !== v33[2]) {
            v8.stencilFunc(v72, v73, v74);
            v33[0] = v72;
            v33[1] = v73;
            v33[2] = v74;
          }
          v75 = v36[0];
          v76 = v36[1];
          v77 = v36[2];
          v78 = v36[3];
          if (v75 !== v37[0] || v76 !== v37[1] || v77 !== v37[2] || v78 !== v37[3]) {
            v8.stencilOpSeparate(v75, v76, v77, v78);
            v37[0] = v75;
            v37[1] = v76;
            v37[2] = v77;
            v37[3] = v78;
          }
          v79 = v34[0];
          v80 = v34[1];
          v81 = v34[2];
          v82 = v34[3];
          if (v79 !== v35[0] || v80 !== v35[1] || v81 !== v35[2] || v82 !== v35[3]) {
            v8.stencilOpSeparate(v79, v80, v81, v82);
            v35[0] = v79;
            v35[1] = v80;
            v35[2] = v81;
            v35[3] = v82;
          }
        }
        v83 = a0['viewport'];
        v84 = v83.x | 0;
        v85 = v83.y | 0;
        v86 = 'width' in v83 ? v83.width | 0 : v2.framebufferWidth - v84;
        v87 = 'height' in v83 ? v83.height | 0 : v2.framebufferHeight - v85;
        v88 = v2.viewportWidth;
        v2.viewportWidth = v86;
        v89 = v2.viewportHeight;
        v2.viewportHeight = v87;
        v8.viewport(v84, v85, v86, v87);
        v39[0] = v84;
        v39[1] = v85;
        v39[2] = v86;
        v39[3] = v87;
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v90 = a0['viewport'];
        v91 = v90.x | 0;
        v92 = v90.y | 0;
        v93 = 'width' in v90 ? v90.width | 0 : v2.framebufferWidth - v91;
        v94 = 'height' in v90 ? v90.height | 0 : v2.framebufferHeight - v92;
        v8.scissor(v91, v92, v93, v94);
        v31[0] = v91;
        v31[1] = v92;
        v31[2] = v93;
        v31[3] = v94;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v95 = v3.profile;
        if (v95) {
          v96 = performance.now();
          $1.count++;
        }
        v8.useProgram($2.program);
        v97 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v98 = $3.call(this, v2, a0, 0);
        v99 = false;
        v100 = null;
        v101 = 0;
        v102 = false;
        v103 = 0;
        v104 = 0;
        v105 = 1;
        v106 = 0;
        v107 = 5126;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        if (v9(v98)) {
          v99 = true;
          v100 = v1.createStream(34962, v98);
          v107 = v100.dtype;
        } else {
          v100 = v1.getBuffer(v98);
          if (v100) {
            v107 = v100.dtype;
          } else if ('constant' in v98) {
            v105 = 2;
            if (typeof v98.constant === 'number') {
              v109 = v98.constant;
              v110 = v111 = v108 = 0;
            } else {
              v109 = v98.constant.length > 0 ? v98.constant[0] : 0;
              v110 = v98.constant.length > 1 ? v98.constant[1] : 0;
              v111 = v98.constant.length > 2 ? v98.constant[2] : 0;
              v108 = v98.constant.length > 3 ? v98.constant[3] : 0;
            }
          } else {
            if (v9(v98.buffer)) {
              v100 = v1.createStream(34962, v98.buffer);
            } else {
              v100 = v1.getBuffer(v98.buffer);
            }
            v107 = 'type' in v98 ? v43[v98.type] : v100.dtype;
            v102 = !!v98.normalized;
            v104 = v98.size | 0;
            v103 = v98.offset | 0;
            v106 = v98.stride | 0;
            v101 = v98.divisor | 0;
          }
        }
        v112 = x.location;
        v113 = v0[v112];
        if (v105 === 1) {
          if (!v113.buffer) {
            v8.enableVertexAttribArray(v112);
          }
          v114 = v104 || 1;
          if (v113.type !== v107 || v113.size !== v114 || v113.buffer !== v100 || v113.normalized !== v102 || v113.offset !== v103 || v113.stride !== v106) {
            v8.bindBuffer(34962, v100.buffer);
            v8.vertexAttribPointer(v112, v114, v107, v102, v106, v103);
            v113.type = v107;
            v113.size = v114;
            v113.buffer = v100;
            v113.normalized = v102;
            v113.offset = v103;
            v113.stride = v106;
          }
          if (v113.divisor !== v101) {
            v97.vertexAttribDivisorANGLE(v112, v101);
            v113.divisor = v101;
          }
        } else {
          if (v113.buffer) {
            v8.disableVertexAttribArray(v112);
            v113.buffer = null;
          }
          if (v113.x !== v109 || v113.y !== v110 || v113.z !== v111 || v113.w !== v108) {
            v8.vertexAttrib4f(v112, v109, v110, v111, v108);
            v113.x = v109;
            v113.y = v110;
            v113.z = v111;
            v113.w = v108;
          }
        }
        v115 = $4.call(this, v2, a0, 0);
        v116 = false;
        v117 = null;
        v118 = 0;
        v119 = false;
        v120 = 0;
        v121 = 0;
        v122 = 1;
        v123 = 0;
        v124 = 5126;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        if (v9(v115)) {
          v116 = true;
          v117 = v1.createStream(34962, v115);
          v124 = v117.dtype;
        } else {
          v117 = v1.getBuffer(v115);
          if (v117) {
            v124 = v117.dtype;
          } else if ('constant' in v115) {
            v122 = 2;
            if (typeof v115.constant === 'number') {
              v126 = v115.constant;
              v127 = v128 = v125 = 0;
            } else {
              v126 = v115.constant.length > 0 ? v115.constant[0] : 0;
              v127 = v115.constant.length > 1 ? v115.constant[1] : 0;
              v128 = v115.constant.length > 2 ? v115.constant[2] : 0;
              v125 = v115.constant.length > 3 ? v115.constant[3] : 0;
            }
          } else {
            if (v9(v115.buffer)) {
              v117 = v1.createStream(34962, v115.buffer);
            } else {
              v117 = v1.getBuffer(v115.buffer);
            }
            v124 = 'type' in v115 ? v43[v115.type] : v117.dtype;
            v119 = !!v115.normalized;
            v121 = v115.size | 0;
            v120 = v115.offset | 0;
            v123 = v115.stride | 0;
            v118 = v115.divisor | 0;
          }
        }
        v129 = y.location;
        v130 = v0[v129];
        if (v122 === 1) {
          if (!v130.buffer) {
            v8.enableVertexAttribArray(v129);
          }
          v131 = v121 || 1;
          if (v130.type !== v124 || v130.size !== v131 || v130.buffer !== v117 || v130.normalized !== v119 || v130.offset !== v120 || v130.stride !== v123) {
            v8.bindBuffer(34962, v117.buffer);
            v8.vertexAttribPointer(v129, v131, v124, v119, v123, v120);
            v130.type = v124;
            v130.size = v131;
            v130.buffer = v117;
            v130.normalized = v119;
            v130.offset = v120;
            v130.stride = v123;
          }
          if (v130.divisor !== v118) {
            v97.vertexAttribDivisorANGLE(v129, v118);
            v130.divisor = v118;
          }
        } else {
          if (v130.buffer) {
            v8.disableVertexAttribArray(v129);
            v130.buffer = null;
          }
          if (v130.x !== v126 || v130.y !== v127 || v130.z !== v128 || v130.w !== v125) {
            v8.vertexAttrib4f(v129, v126, v127, v128, v125);
            v130.x = v126;
            v130.y = v127;
            v130.z = v128;
            v130.w = v125;
          }
        }
        v132 = $5.call(this, v2, a0, 0);
        v133 = false;
        v134 = null;
        v135 = 0;
        v136 = false;
        v137 = 0;
        v138 = 0;
        v139 = 1;
        v140 = 0;
        v141 = 5126;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v145 = 0;
        if (v9(v132)) {
          v133 = true;
          v134 = v1.createStream(34962, v132);
          v141 = v134.dtype;
        } else {
          v134 = v1.getBuffer(v132);
          if (v134) {
            v141 = v134.dtype;
          } else if ('constant' in v132) {
            v139 = 2;
            if (typeof v132.constant === 'number') {
              v143 = v132.constant;
              v144 = v145 = v142 = 0;
            } else {
              v143 = v132.constant.length > 0 ? v132.constant[0] : 0;
              v144 = v132.constant.length > 1 ? v132.constant[1] : 0;
              v145 = v132.constant.length > 2 ? v132.constant[2] : 0;
              v142 = v132.constant.length > 3 ? v132.constant[3] : 0;
            }
          } else {
            if (v9(v132.buffer)) {
              v134 = v1.createStream(34962, v132.buffer);
            } else {
              v134 = v1.getBuffer(v132.buffer);
            }
            v141 = 'type' in v132 ? v43[v132.type] : v134.dtype;
            v136 = !!v132.normalized;
            v138 = v132.size | 0;
            v137 = v132.offset | 0;
            v140 = v132.stride | 0;
            v135 = v132.divisor | 0;
          }
        }
        v146 = xFract.location;
        v147 = v0[v146];
        if (v139 === 1) {
          if (!v147.buffer) {
            v8.enableVertexAttribArray(v146);
          }
          v148 = v138 || 1;
          if (v147.type !== v141 || v147.size !== v148 || v147.buffer !== v134 || v147.normalized !== v136 || v147.offset !== v137 || v147.stride !== v140) {
            v8.bindBuffer(34962, v134.buffer);
            v8.vertexAttribPointer(v146, v148, v141, v136, v140, v137);
            v147.type = v141;
            v147.size = v148;
            v147.buffer = v134;
            v147.normalized = v136;
            v147.offset = v137;
            v147.stride = v140;
          }
          if (v147.divisor !== v135) {
            v97.vertexAttribDivisorANGLE(v146, v135);
            v147.divisor = v135;
          }
        } else {
          if (v147.buffer) {
            v8.disableVertexAttribArray(v146);
            v147.buffer = null;
          }
          if (v147.x !== v143 || v147.y !== v144 || v147.z !== v145 || v147.w !== v142) {
            v8.vertexAttrib4f(v146, v143, v144, v145, v142);
            v147.x = v143;
            v147.y = v144;
            v147.z = v145;
            v147.w = v142;
          }
        }
        v149 = $6.call(this, v2, a0, 0);
        v150 = false;
        v151 = null;
        v152 = 0;
        v153 = false;
        v154 = 0;
        v155 = 0;
        v156 = 1;
        v157 = 0;
        v158 = 5126;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        if (v9(v149)) {
          v150 = true;
          v151 = v1.createStream(34962, v149);
          v158 = v151.dtype;
        } else {
          v151 = v1.getBuffer(v149);
          if (v151) {
            v158 = v151.dtype;
          } else if ('constant' in v149) {
            v156 = 2;
            if (typeof v149.constant === 'number') {
              v160 = v149.constant;
              v161 = v162 = v159 = 0;
            } else {
              v160 = v149.constant.length > 0 ? v149.constant[0] : 0;
              v161 = v149.constant.length > 1 ? v149.constant[1] : 0;
              v162 = v149.constant.length > 2 ? v149.constant[2] : 0;
              v159 = v149.constant.length > 3 ? v149.constant[3] : 0;
            }
          } else {
            if (v9(v149.buffer)) {
              v151 = v1.createStream(34962, v149.buffer);
            } else {
              v151 = v1.getBuffer(v149.buffer);
            }
            v158 = 'type' in v149 ? v43[v149.type] : v151.dtype;
            v153 = !!v149.normalized;
            v155 = v149.size | 0;
            v154 = v149.offset | 0;
            v157 = v149.stride | 0;
            v152 = v149.divisor | 0;
          }
        }
        v163 = yFract.location;
        v164 = v0[v163];
        if (v156 === 1) {
          if (!v164.buffer) {
            v8.enableVertexAttribArray(v163);
          }
          v165 = v155 || 1;
          if (v164.type !== v158 || v164.size !== v165 || v164.buffer !== v151 || v164.normalized !== v153 || v164.offset !== v154 || v164.stride !== v157) {
            v8.bindBuffer(34962, v151.buffer);
            v8.vertexAttribPointer(v163, v165, v158, v153, v157, v154);
            v164.type = v158;
            v164.size = v165;
            v164.buffer = v151;
            v164.normalized = v153;
            v164.offset = v154;
            v164.stride = v157;
          }
          if (v164.divisor !== v152) {
            v97.vertexAttribDivisorANGLE(v163, v152);
            v164.divisor = v152;
          }
        } else {
          if (v164.buffer) {
            v8.disableVertexAttribArray(v163);
            v164.buffer = null;
          }
          if (v164.x !== v160 || v164.y !== v161 || v164.z !== v162 || v164.w !== v159) {
            v8.vertexAttrib4f(v163, v160, v161, v162, v159);
            v164.x = v160;
            v164.y = v161;
            v164.z = v162;
            v164.w = v159;
          }
        }
        v166 = $7.call(this, v2, a0, 0);
        v167 = false;
        v168 = null;
        v169 = 0;
        v170 = false;
        v171 = 0;
        v172 = 0;
        v173 = 1;
        v174 = 0;
        v175 = 5126;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v179 = 0;
        if (v9(v166)) {
          v167 = true;
          v168 = v1.createStream(34962, v166);
          v175 = v168.dtype;
        } else {
          v168 = v1.getBuffer(v166);
          if (v168) {
            v175 = v168.dtype;
          } else if ('constant' in v166) {
            v173 = 2;
            if (typeof v166.constant === 'number') {
              v177 = v166.constant;
              v178 = v179 = v176 = 0;
            } else {
              v177 = v166.constant.length > 0 ? v166.constant[0] : 0;
              v178 = v166.constant.length > 1 ? v166.constant[1] : 0;
              v179 = v166.constant.length > 2 ? v166.constant[2] : 0;
              v176 = v166.constant.length > 3 ? v166.constant[3] : 0;
            }
          } else {
            if (v9(v166.buffer)) {
              v168 = v1.createStream(34962, v166.buffer);
            } else {
              v168 = v1.getBuffer(v166.buffer);
            }
            v175 = 'type' in v166 ? v43[v166.type] : v168.dtype;
            v170 = !!v166.normalized;
            v172 = v166.size | 0;
            v171 = v166.offset | 0;
            v174 = v166.stride | 0;
            v169 = v166.divisor | 0;
          }
        }
        v180 = size.location;
        v181 = v0[v180];
        if (v173 === 1) {
          if (!v181.buffer) {
            v8.enableVertexAttribArray(v180);
          }
          v182 = v172 || 1;
          if (v181.type !== v175 || v181.size !== v182 || v181.buffer !== v168 || v181.normalized !== v170 || v181.offset !== v171 || v181.stride !== v174) {
            v8.bindBuffer(34962, v168.buffer);
            v8.vertexAttribPointer(v180, v182, v175, v170, v174, v171);
            v181.type = v175;
            v181.size = v182;
            v181.buffer = v168;
            v181.normalized = v170;
            v181.offset = v171;
            v181.stride = v174;
          }
          if (v181.divisor !== v169) {
            v97.vertexAttribDivisorANGLE(v180, v169);
            v181.divisor = v169;
          }
        } else {
          if (v181.buffer) {
            v8.disableVertexAttribArray(v180);
            v181.buffer = null;
          }
          if (v181.x !== v177 || v181.y !== v178 || v181.z !== v179 || v181.w !== v176) {
            v8.vertexAttrib4f(v180, v177, v178, v179, v176);
            v181.x = v177;
            v181.y = v178;
            v181.z = v179;
            v181.w = v176;
          }
        }
        v183 = $8.call(this, v2, a0, 0);
        v184 = false;
        v185 = null;
        v186 = 0;
        v187 = false;
        v188 = 0;
        v189 = 0;
        v190 = 1;
        v191 = 0;
        v192 = 5126;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        v196 = 0;
        if (v9(v183)) {
          v184 = true;
          v185 = v1.createStream(34962, v183);
          v192 = v185.dtype;
        } else {
          v185 = v1.getBuffer(v183);
          if (v185) {
            v192 = v185.dtype;
          } else if ('constant' in v183) {
            v190 = 2;
            if (typeof v183.constant === 'number') {
              v194 = v183.constant;
              v195 = v196 = v193 = 0;
            } else {
              v194 = v183.constant.length > 0 ? v183.constant[0] : 0;
              v195 = v183.constant.length > 1 ? v183.constant[1] : 0;
              v196 = v183.constant.length > 2 ? v183.constant[2] : 0;
              v193 = v183.constant.length > 3 ? v183.constant[3] : 0;
            }
          } else {
            if (v9(v183.buffer)) {
              v185 = v1.createStream(34962, v183.buffer);
            } else {
              v185 = v1.getBuffer(v183.buffer);
            }
            v192 = 'type' in v183 ? v43[v183.type] : v185.dtype;
            v187 = !!v183.normalized;
            v189 = v183.size | 0;
            v188 = v183.offset | 0;
            v191 = v183.stride | 0;
            v186 = v183.divisor | 0;
          }
        }
        v197 = borderSize.location;
        v198 = v0[v197];
        if (v190 === 1) {
          if (!v198.buffer) {
            v8.enableVertexAttribArray(v197);
          }
          v199 = v189 || 1;
          if (v198.type !== v192 || v198.size !== v199 || v198.buffer !== v185 || v198.normalized !== v187 || v198.offset !== v188 || v198.stride !== v191) {
            v8.bindBuffer(34962, v185.buffer);
            v8.vertexAttribPointer(v197, v199, v192, v187, v191, v188);
            v198.type = v192;
            v198.size = v199;
            v198.buffer = v185;
            v198.normalized = v187;
            v198.offset = v188;
            v198.stride = v191;
          }
          if (v198.divisor !== v186) {
            v97.vertexAttribDivisorANGLE(v197, v186);
            v198.divisor = v186;
          }
        } else {
          if (v198.buffer) {
            v8.disableVertexAttribArray(v197);
            v198.buffer = null;
          }
          if (v198.x !== v194 || v198.y !== v195 || v198.z !== v196 || v198.w !== v193) {
            v8.vertexAttrib4f(v197, v194, v195, v196, v193);
            v198.x = v194;
            v198.y = v195;
            v198.z = v196;
            v198.w = v193;
          }
        }
        v200 = $9.call(this, v2, a0, 0);
        v201 = false;
        v202 = null;
        v203 = 0;
        v204 = false;
        v205 = 0;
        v206 = 0;
        v207 = 1;
        v208 = 0;
        v209 = 5126;
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 0;
        if (v9(v200)) {
          v201 = true;
          v202 = v1.createStream(34962, v200);
          v209 = v202.dtype;
        } else {
          v202 = v1.getBuffer(v200);
          if (v202) {
            v209 = v202.dtype;
          } else if ('constant' in v200) {
            v207 = 2;
            if (typeof v200.constant === 'number') {
              v211 = v200.constant;
              v212 = v213 = v210 = 0;
            } else {
              v211 = v200.constant.length > 0 ? v200.constant[0] : 0;
              v212 = v200.constant.length > 1 ? v200.constant[1] : 0;
              v213 = v200.constant.length > 2 ? v200.constant[2] : 0;
              v210 = v200.constant.length > 3 ? v200.constant[3] : 0;
            }
          } else {
            if (v9(v200.buffer)) {
              v202 = v1.createStream(34962, v200.buffer);
            } else {
              v202 = v1.getBuffer(v200.buffer);
            }
            v209 = 'type' in v200 ? v43[v200.type] : v202.dtype;
            v204 = !!v200.normalized;
            v206 = v200.size | 0;
            v205 = v200.offset | 0;
            v208 = v200.stride | 0;
            v203 = v200.divisor | 0;
          }
        }
        v214 = colorId.location;
        v215 = v0[v214];
        if (v207 === 1) {
          if (!v215.buffer) {
            v8.enableVertexAttribArray(v214);
          }
          v216 = v206 || 4;
          if (v215.type !== v209 || v215.size !== v216 || v215.buffer !== v202 || v215.normalized !== v204 || v215.offset !== v205 || v215.stride !== v208) {
            v8.bindBuffer(34962, v202.buffer);
            v8.vertexAttribPointer(v214, v216, v209, v204, v208, v205);
            v215.type = v209;
            v215.size = v216;
            v215.buffer = v202;
            v215.normalized = v204;
            v215.offset = v205;
            v215.stride = v208;
          }
          if (v215.divisor !== v203) {
            v97.vertexAttribDivisorANGLE(v214, v203);
            v215.divisor = v203;
          }
        } else {
          if (v215.buffer) {
            v8.disableVertexAttribArray(v214);
            v215.buffer = null;
          }
          if (v215.x !== v211 || v215.y !== v212 || v215.z !== v213 || v215.w !== v210) {
            v8.vertexAttrib4f(v214, v211, v212, v213, v210);
            v215.x = v211;
            v215.y = v212;
            v215.z = v213;
            v215.w = v210;
          }
        }
        v217 = $10.call(this, v2, a0, 0);
        v218 = false;
        v219 = null;
        v220 = 0;
        v221 = false;
        v222 = 0;
        v223 = 0;
        v224 = 1;
        v225 = 0;
        v226 = 5126;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        if (v9(v217)) {
          v218 = true;
          v219 = v1.createStream(34962, v217);
          v226 = v219.dtype;
        } else {
          v219 = v1.getBuffer(v217);
          if (v219) {
            v226 = v219.dtype;
          } else if ('constant' in v217) {
            v224 = 2;
            if (typeof v217.constant === 'number') {
              v228 = v217.constant;
              v229 = v230 = v227 = 0;
            } else {
              v228 = v217.constant.length > 0 ? v217.constant[0] : 0;
              v229 = v217.constant.length > 1 ? v217.constant[1] : 0;
              v230 = v217.constant.length > 2 ? v217.constant[2] : 0;
              v227 = v217.constant.length > 3 ? v217.constant[3] : 0;
            }
          } else {
            if (v9(v217.buffer)) {
              v219 = v1.createStream(34962, v217.buffer);
            } else {
              v219 = v1.getBuffer(v217.buffer);
            }
            v226 = 'type' in v217 ? v43[v217.type] : v219.dtype;
            v221 = !!v217.normalized;
            v223 = v217.size | 0;
            v222 = v217.offset | 0;
            v225 = v217.stride | 0;
            v220 = v217.divisor | 0;
          }
        }
        v231 = borderColorId.location;
        v232 = v0[v231];
        if (v224 === 1) {
          if (!v232.buffer) {
            v8.enableVertexAttribArray(v231);
          }
          v233 = v223 || 4;
          if (v232.type !== v226 || v232.size !== v233 || v232.buffer !== v219 || v232.normalized !== v221 || v232.offset !== v222 || v232.stride !== v225) {
            v8.bindBuffer(34962, v219.buffer);
            v8.vertexAttribPointer(v231, v233, v226, v221, v225, v222);
            v232.type = v226;
            v232.size = v233;
            v232.buffer = v219;
            v232.normalized = v221;
            v232.offset = v222;
            v232.stride = v225;
          }
          if (v232.divisor !== v220) {
            v97.vertexAttribDivisorANGLE(v231, v220);
            v232.divisor = v220;
          }
        } else {
          if (v232.buffer) {
            v8.disableVertexAttribArray(v231);
            v232.buffer = null;
          }
          if (v232.x !== v228 || v232.y !== v229 || v232.z !== v230 || v232.w !== v227) {
            v8.vertexAttrib4f(v231, v228, v229, v230, v227);
            v232.x = v228;
            v232.y = v229;
            v232.z = v230;
            v232.w = v227;
          }
        }
        v234 = $11.call(this, v2, a0, 0);
        v235 = false;
        v236 = null;
        v237 = 0;
        v238 = false;
        v239 = 0;
        v240 = 0;
        v241 = 1;
        v242 = 0;
        v243 = 5126;
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = 0;
        if (v9(v234)) {
          v235 = true;
          v236 = v1.createStream(34962, v234);
          v243 = v236.dtype;
        } else {
          v236 = v1.getBuffer(v234);
          if (v236) {
            v243 = v236.dtype;
          } else if ('constant' in v234) {
            v241 = 2;
            if (typeof v234.constant === 'number') {
              v245 = v234.constant;
              v246 = v247 = v244 = 0;
            } else {
              v245 = v234.constant.length > 0 ? v234.constant[0] : 0;
              v246 = v234.constant.length > 1 ? v234.constant[1] : 0;
              v247 = v234.constant.length > 2 ? v234.constant[2] : 0;
              v244 = v234.constant.length > 3 ? v234.constant[3] : 0;
            }
          } else {
            if (v9(v234.buffer)) {
              v236 = v1.createStream(34962, v234.buffer);
            } else {
              v236 = v1.getBuffer(v234.buffer);
            }
            v243 = 'type' in v234 ? v43[v234.type] : v236.dtype;
            v238 = !!v234.normalized;
            v240 = v234.size | 0;
            v239 = v234.offset | 0;
            v242 = v234.stride | 0;
            v237 = v234.divisor | 0;
          }
        }
        v248 = isActive.location;
        v249 = v0[v248];
        if (v241 === 1) {
          if (!v249.buffer) {
            v8.enableVertexAttribArray(v248);
          }
          v250 = v240 || 1;
          if (v249.type !== v243 || v249.size !== v250 || v249.buffer !== v236 || v249.normalized !== v238 || v249.offset !== v239 || v249.stride !== v242) {
            v8.bindBuffer(34962, v236.buffer);
            v8.vertexAttribPointer(v248, v250, v243, v238, v242, v239);
            v249.type = v243;
            v249.size = v250;
            v249.buffer = v236;
            v249.normalized = v238;
            v249.offset = v239;
            v249.stride = v242;
          }
          if (v249.divisor !== v237) {
            v97.vertexAttribDivisorANGLE(v248, v237);
            v249.divisor = v237;
          }
        } else {
          if (v249.buffer) {
            v8.disableVertexAttribArray(v248);
            v249.buffer = null;
          }
          if (v249.x !== v245 || v249.y !== v246 || v249.z !== v247 || v249.w !== v244) {
            v8.vertexAttrib4f(v248, v245, v246, v247, v244);
            v249.x = v245;
            v249.y = v246;
            v249.z = v247;
            v249.w = v244;
          }
        }
        v8.uniform1i(constPointSize.location, false);
        v251 = v2['pixelRatio'];
        v8.uniform1f(pixelRatio.location, v251);
        v252 = a0['scale'];
        v253 = v252[0];
        v254 = v252[1];
        v8.uniform2f(scale.location, v253, v254);
        v255 = a0['scaleFract'];
        v256 = v255[0];
        v257 = v255[1];
        v8.uniform2f(scaleFract.location, v256, v257);
        v258 = a0['translate'];
        v259 = v258[0];
        v260 = v258[1];
        v8.uniform2f(translate.location, v259, v260);
        v261 = a0['translateFract'];
        v262 = v261[0];
        v263 = v261[1];
        v8.uniform2f(translateFract.location, v262, v263);
        v264 = $12.call(this, v2, a0, 0);
        v265 = v264[0];
        v266 = v264[1];
        v8.uniform2f(paletteSize.location, v265, v266);
        v267 = a0['opacity'];
        v8.uniform1f(opacity.location, v267);
        v8.uniform1i(paletteTexture.location, $13.bind());
        v268 = a0['markerTexture'];
        if (v268 && v268._reglType === 'framebuffer') {
          v268 = v268.color[0];
        }
        v269 = v268._texture;
        v8.uniform1i(markerTexture.location, v269.bind());
        v270 = a0['elements'];
        v271 = null;
        v272 = v9(v270);
        if (v272) {
          v271 = v5.createStream(v270);
        } else {
          v271 = v5.getElements(v270);
        }
        if (v271) v8.bindBuffer(34963, v271.buffer.buffer);
        v273 = a0['offset'];
        v274 = a0['count'];
        if (v274) {
          v275 = v4.instances;
          if (v275 > 0) {
            if (v271) {
              v97.drawElementsInstancedANGLE(0, v274, v271.type, v273 << (v271.type - 5121 >> 1), v275);
            } else {
              v97.drawArraysInstancedANGLE(0, v273, v274, v275);
            }
          } else if (v275 < 0) {
            if (v271) {
              v8.drawElements(0, v274, v271.type, v273 << (v271.type - 5121 >> 1));
            } else {
              v8.drawArrays(0, v273, v274);
            }
          }
          v3.dirty = true;
          v15.setVAO(null);
          v2.viewportWidth = v88;
          v2.viewportHeight = v89;
          if (v95) {
            $1.cpuTime += performance.now() - v96;
          }
          if (v99) {
            v1.destroyStream(v100);
          }
          if (v116) {
            v1.destroyStream(v117);
          }
          if (v133) {
            v1.destroyStream(v134);
          }
          if (v150) {
            v1.destroyStream(v151);
          }
          if (v167) {
            v1.destroyStream(v168);
          }
          if (v184) {
            v1.destroyStream(v185);
          }
          if (v201) {
            v1.destroyStream(v202);
          }
          if (v218) {
            v1.destroyStream(v219);
          }
          if (v235) {
            v1.destroyStream(v236);
          }
          $13.unbind();
          v269.unbind();
          if (v272) {
            v5.destroyStream(v271);
          }
        }
      },
      'scope': function (a0, a1, a2) {
        var v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572;
        v276 = a0['viewport'];
        v277 = v276.x | 0;
        v278 = v276.y | 0;
        v279 = 'width' in v276 ? v276.width | 0 : v2.framebufferWidth - v277;
        v280 = 'height' in v276 ? v276.height | 0 : v2.framebufferHeight - v278;
        v281 = v2.viewportWidth;
        v2.viewportWidth = v279;
        v282 = v2.viewportHeight;
        v2.viewportHeight = v280;
        v283 = v38[0];
        v38[0] = v277;
        v284 = v38[1];
        v38[1] = v278;
        v285 = v38[2];
        v38[2] = v279;
        v286 = v38[3];
        v38[3] = v280;
        v287 = v16[0];
        v16[0] = 0;
        v288 = v16[1];
        v16[1] = 0;
        v289 = v16[2];
        v16[2] = 0;
        v290 = v16[3];
        v16[3] = 1;
        v291 = v10.blend_enable;
        v10.blend_enable = true;
        v292 = v20[0];
        v20[0] = 770;
        v293 = v20[1];
        v20[1] = 771;
        v294 = v20[2];
        v20[2] = 773;
        v295 = v20[3];
        v20[3] = 1;
        v296 = v10.depth_enable;
        v10.depth_enable = false;
        v297 = a0['viewport'];
        v298 = v297.x | 0;
        v299 = v297.y | 0;
        v300 = 'width' in v297 ? v297.width | 0 : v2.framebufferWidth - v298;
        v301 = 'height' in v297 ? v297.height | 0 : v2.framebufferHeight - v299;
        v302 = v30[0];
        v30[0] = v298;
        v303 = v30[1];
        v30[1] = v299;
        v304 = v30[2];
        v30[2] = v300;
        v305 = v30[3];
        v30[3] = v301;
        v306 = v10.scissor_enable;
        v10.scissor_enable = true;
        v307 = v10.stencil_enable;
        v10.stencil_enable = false;
        v308 = v3.profile;
        if (v308) {
          v309 = performance.now();
          $1.count++;
        }
        v310 = a0['elements'];
        v311 = null;
        v312 = v9(v310);
        if (v312) {
          v311 = v5.createStream(v310);
        } else {
          v311 = v5.getElements(v310);
        }
        v313 = v4.elements;
        v4.elements = v311;
        v314 = a0['offset'];
        v315 = v4.offset;
        v4.offset = v314;
        v316 = a0['count'];
        v317 = v4.count;
        v4.count = v316;
        v318 = v4.primitive;
        v4.primitive = 0;
        v319 = v14[45];
        v14[45] = false;
        v320 = a0['markerTexture'];
        v321 = v14[48];
        v14[48] = v320;
        v322 = a0['opacity'];
        v323 = v14[10];
        v14[10] = v322;
        v324 = $14.call(this, v2, a0, a2);
        v325 = v14[46];
        v14[46] = v324;
        v326 = v14[47];
        v14[47] = $15;
        v327 = v2['pixelRatio'];
        v328 = v14[34];
        v14[34] = v327;
        v329 = a0['scale'];
        v330 = v14[6];
        v14[6] = v329;
        v331 = a0['scaleFract'];
        v332 = v14[7];
        v14[7] = v331;
        v333 = a0['translate'];
        v334 = v14[8];
        v14[8] = v333;
        v335 = a0['translateFract'];
        v336 = v14[9];
        v14[9] = v335;
        v337 = $16.call(this, v2, a0, a2);
        v338 = false;
        v339 = null;
        v340 = 0;
        v341 = false;
        v342 = 0;
        v343 = 0;
        v344 = 1;
        v345 = 0;
        v346 = 5126;
        v347 = 0;
        v348 = 0;
        v349 = 0;
        v350 = 0;
        if (v9(v337)) {
          v338 = true;
          v339 = v1.createStream(34962, v337);
          v346 = v339.dtype;
        } else {
          v339 = v1.getBuffer(v337);
          if (v339) {
            v346 = v339.dtype;
          } else if ('constant' in v337) {
            v344 = 2;
            if (typeof v337.constant === 'number') {
              v348 = v337.constant;
              v349 = v350 = v347 = 0;
            } else {
              v348 = v337.constant.length > 0 ? v337.constant[0] : 0;
              v349 = v337.constant.length > 1 ? v337.constant[1] : 0;
              v350 = v337.constant.length > 2 ? v337.constant[2] : 0;
              v347 = v337.constant.length > 3 ? v337.constant[3] : 0;
            }
          } else {
            if (v9(v337.buffer)) {
              v339 = v1.createStream(34962, v337.buffer);
            } else {
              v339 = v1.getBuffer(v337.buffer);
            }
            v346 = 'type' in v337 ? v43[v337.type] : v339.dtype;
            v341 = !!v337.normalized;
            v343 = v337.size | 0;
            v342 = v337.offset | 0;
            v345 = v337.stride | 0;
            v340 = v337.divisor | 0;
          }
        }
        v351 = $17.buffer;
        $17.buffer = v339;
        v352 = $17.divisor;
        $17.divisor = v340;
        v353 = $17.normalized;
        $17.normalized = v341;
        v354 = $17.offset;
        $17.offset = v342;
        v355 = $17.size;
        $17.size = v343;
        v356 = $17.state;
        $17.state = v344;
        v357 = $17.stride;
        $17.stride = v345;
        v358 = $17.type;
        $17.type = v346;
        v359 = $17.w;
        $17.w = v347;
        v360 = $17.x;
        $17.x = v348;
        v361 = $17.y;
        $17.y = v349;
        v362 = $17.z;
        $17.z = v350;
        v363 = $18.call(this, v2, a0, a2);
        v364 = false;
        v365 = null;
        v366 = 0;
        v367 = false;
        v368 = 0;
        v369 = 0;
        v370 = 1;
        v371 = 0;
        v372 = 5126;
        v373 = 0;
        v374 = 0;
        v375 = 0;
        v376 = 0;
        if (v9(v363)) {
          v364 = true;
          v365 = v1.createStream(34962, v363);
          v372 = v365.dtype;
        } else {
          v365 = v1.getBuffer(v363);
          if (v365) {
            v372 = v365.dtype;
          } else if ('constant' in v363) {
            v370 = 2;
            if (typeof v363.constant === 'number') {
              v374 = v363.constant;
              v375 = v376 = v373 = 0;
            } else {
              v374 = v363.constant.length > 0 ? v363.constant[0] : 0;
              v375 = v363.constant.length > 1 ? v363.constant[1] : 0;
              v376 = v363.constant.length > 2 ? v363.constant[2] : 0;
              v373 = v363.constant.length > 3 ? v363.constant[3] : 0;
            }
          } else {
            if (v9(v363.buffer)) {
              v365 = v1.createStream(34962, v363.buffer);
            } else {
              v365 = v1.getBuffer(v363.buffer);
            }
            v372 = 'type' in v363 ? v43[v363.type] : v365.dtype;
            v367 = !!v363.normalized;
            v369 = v363.size | 0;
            v368 = v363.offset | 0;
            v371 = v363.stride | 0;
            v366 = v363.divisor | 0;
          }
        }
        v377 = $19.buffer;
        $19.buffer = v365;
        v378 = $19.divisor;
        $19.divisor = v366;
        v379 = $19.normalized;
        $19.normalized = v367;
        v380 = $19.offset;
        $19.offset = v368;
        v381 = $19.size;
        $19.size = v369;
        v382 = $19.state;
        $19.state = v370;
        v383 = $19.stride;
        $19.stride = v371;
        v384 = $19.type;
        $19.type = v372;
        v385 = $19.w;
        $19.w = v373;
        v386 = $19.x;
        $19.x = v374;
        v387 = $19.y;
        $19.y = v375;
        v388 = $19.z;
        $19.z = v376;
        v389 = $20.call(this, v2, a0, a2);
        v390 = false;
        v391 = null;
        v392 = 0;
        v393 = false;
        v394 = 0;
        v395 = 0;
        v396 = 1;
        v397 = 0;
        v398 = 5126;
        v399 = 0;
        v400 = 0;
        v401 = 0;
        v402 = 0;
        if (v9(v389)) {
          v390 = true;
          v391 = v1.createStream(34962, v389);
          v398 = v391.dtype;
        } else {
          v391 = v1.getBuffer(v389);
          if (v391) {
            v398 = v391.dtype;
          } else if ('constant' in v389) {
            v396 = 2;
            if (typeof v389.constant === 'number') {
              v400 = v389.constant;
              v401 = v402 = v399 = 0;
            } else {
              v400 = v389.constant.length > 0 ? v389.constant[0] : 0;
              v401 = v389.constant.length > 1 ? v389.constant[1] : 0;
              v402 = v389.constant.length > 2 ? v389.constant[2] : 0;
              v399 = v389.constant.length > 3 ? v389.constant[3] : 0;
            }
          } else {
            if (v9(v389.buffer)) {
              v391 = v1.createStream(34962, v389.buffer);
            } else {
              v391 = v1.getBuffer(v389.buffer);
            }
            v398 = 'type' in v389 ? v43[v389.type] : v391.dtype;
            v393 = !!v389.normalized;
            v395 = v389.size | 0;
            v394 = v389.offset | 0;
            v397 = v389.stride | 0;
            v392 = v389.divisor | 0;
          }
        }
        v403 = $21.buffer;
        $21.buffer = v391;
        v404 = $21.divisor;
        $21.divisor = v392;
        v405 = $21.normalized;
        $21.normalized = v393;
        v406 = $21.offset;
        $21.offset = v394;
        v407 = $21.size;
        $21.size = v395;
        v408 = $21.state;
        $21.state = v396;
        v409 = $21.stride;
        $21.stride = v397;
        v410 = $21.type;
        $21.type = v398;
        v411 = $21.w;
        $21.w = v399;
        v412 = $21.x;
        $21.x = v400;
        v413 = $21.y;
        $21.y = v401;
        v414 = $21.z;
        $21.z = v402;
        v415 = $22.call(this, v2, a0, a2);
        v416 = false;
        v417 = null;
        v418 = 0;
        v419 = false;
        v420 = 0;
        v421 = 0;
        v422 = 1;
        v423 = 0;
        v424 = 5126;
        v425 = 0;
        v426 = 0;
        v427 = 0;
        v428 = 0;
        if (v9(v415)) {
          v416 = true;
          v417 = v1.createStream(34962, v415);
          v424 = v417.dtype;
        } else {
          v417 = v1.getBuffer(v415);
          if (v417) {
            v424 = v417.dtype;
          } else if ('constant' in v415) {
            v422 = 2;
            if (typeof v415.constant === 'number') {
              v426 = v415.constant;
              v427 = v428 = v425 = 0;
            } else {
              v426 = v415.constant.length > 0 ? v415.constant[0] : 0;
              v427 = v415.constant.length > 1 ? v415.constant[1] : 0;
              v428 = v415.constant.length > 2 ? v415.constant[2] : 0;
              v425 = v415.constant.length > 3 ? v415.constant[3] : 0;
            }
          } else {
            if (v9(v415.buffer)) {
              v417 = v1.createStream(34962, v415.buffer);
            } else {
              v417 = v1.getBuffer(v415.buffer);
            }
            v424 = 'type' in v415 ? v43[v415.type] : v417.dtype;
            v419 = !!v415.normalized;
            v421 = v415.size | 0;
            v420 = v415.offset | 0;
            v423 = v415.stride | 0;
            v418 = v415.divisor | 0;
          }
        }
        v429 = $23.buffer;
        $23.buffer = v417;
        v430 = $23.divisor;
        $23.divisor = v418;
        v431 = $23.normalized;
        $23.normalized = v419;
        v432 = $23.offset;
        $23.offset = v420;
        v433 = $23.size;
        $23.size = v421;
        v434 = $23.state;
        $23.state = v422;
        v435 = $23.stride;
        $23.stride = v423;
        v436 = $23.type;
        $23.type = v424;
        v437 = $23.w;
        $23.w = v425;
        v438 = $23.x;
        $23.x = v426;
        v439 = $23.y;
        $23.y = v427;
        v440 = $23.z;
        $23.z = v428;
        v441 = $24.call(this, v2, a0, a2);
        v442 = false;
        v443 = null;
        v444 = 0;
        v445 = false;
        v446 = 0;
        v447 = 0;
        v448 = 1;
        v449 = 0;
        v450 = 5126;
        v451 = 0;
        v452 = 0;
        v453 = 0;
        v454 = 0;
        if (v9(v441)) {
          v442 = true;
          v443 = v1.createStream(34962, v441);
          v450 = v443.dtype;
        } else {
          v443 = v1.getBuffer(v441);
          if (v443) {
            v450 = v443.dtype;
          } else if ('constant' in v441) {
            v448 = 2;
            if (typeof v441.constant === 'number') {
              v452 = v441.constant;
              v453 = v454 = v451 = 0;
            } else {
              v452 = v441.constant.length > 0 ? v441.constant[0] : 0;
              v453 = v441.constant.length > 1 ? v441.constant[1] : 0;
              v454 = v441.constant.length > 2 ? v441.constant[2] : 0;
              v451 = v441.constant.length > 3 ? v441.constant[3] : 0;
            }
          } else {
            if (v9(v441.buffer)) {
              v443 = v1.createStream(34962, v441.buffer);
            } else {
              v443 = v1.getBuffer(v441.buffer);
            }
            v450 = 'type' in v441 ? v43[v441.type] : v443.dtype;
            v445 = !!v441.normalized;
            v447 = v441.size | 0;
            v446 = v441.offset | 0;
            v449 = v441.stride | 0;
            v444 = v441.divisor | 0;
          }
        }
        v455 = $25.buffer;
        $25.buffer = v443;
        v456 = $25.divisor;
        $25.divisor = v444;
        v457 = $25.normalized;
        $25.normalized = v445;
        v458 = $25.offset;
        $25.offset = v446;
        v459 = $25.size;
        $25.size = v447;
        v460 = $25.state;
        $25.state = v448;
        v461 = $25.stride;
        $25.stride = v449;
        v462 = $25.type;
        $25.type = v450;
        v463 = $25.w;
        $25.w = v451;
        v464 = $25.x;
        $25.x = v452;
        v465 = $25.y;
        $25.y = v453;
        v466 = $25.z;
        $25.z = v454;
        v467 = $26.call(this, v2, a0, a2);
        v468 = false;
        v469 = null;
        v470 = 0;
        v471 = false;
        v472 = 0;
        v473 = 0;
        v474 = 1;
        v475 = 0;
        v476 = 5126;
        v477 = 0;
        v478 = 0;
        v479 = 0;
        v480 = 0;
        if (v9(v467)) {
          v468 = true;
          v469 = v1.createStream(34962, v467);
          v476 = v469.dtype;
        } else {
          v469 = v1.getBuffer(v467);
          if (v469) {
            v476 = v469.dtype;
          } else if ('constant' in v467) {
            v474 = 2;
            if (typeof v467.constant === 'number') {
              v478 = v467.constant;
              v479 = v480 = v477 = 0;
            } else {
              v478 = v467.constant.length > 0 ? v467.constant[0] : 0;
              v479 = v467.constant.length > 1 ? v467.constant[1] : 0;
              v480 = v467.constant.length > 2 ? v467.constant[2] : 0;
              v477 = v467.constant.length > 3 ? v467.constant[3] : 0;
            }
          } else {
            if (v9(v467.buffer)) {
              v469 = v1.createStream(34962, v467.buffer);
            } else {
              v469 = v1.getBuffer(v467.buffer);
            }
            v476 = 'type' in v467 ? v43[v467.type] : v469.dtype;
            v471 = !!v467.normalized;
            v473 = v467.size | 0;
            v472 = v467.offset | 0;
            v475 = v467.stride | 0;
            v470 = v467.divisor | 0;
          }
        }
        v481 = $27.buffer;
        $27.buffer = v469;
        v482 = $27.divisor;
        $27.divisor = v470;
        v483 = $27.normalized;
        $27.normalized = v471;
        v484 = $27.offset;
        $27.offset = v472;
        v485 = $27.size;
        $27.size = v473;
        v486 = $27.state;
        $27.state = v474;
        v487 = $27.stride;
        $27.stride = v475;
        v488 = $27.type;
        $27.type = v476;
        v489 = $27.w;
        $27.w = v477;
        v490 = $27.x;
        $27.x = v478;
        v491 = $27.y;
        $27.y = v479;
        v492 = $27.z;
        $27.z = v480;
        v493 = $28.call(this, v2, a0, a2);
        v494 = false;
        v495 = null;
        v496 = 0;
        v497 = false;
        v498 = 0;
        v499 = 0;
        v500 = 1;
        v501 = 0;
        v502 = 5126;
        v503 = 0;
        v504 = 0;
        v505 = 0;
        v506 = 0;
        if (v9(v493)) {
          v494 = true;
          v495 = v1.createStream(34962, v493);
          v502 = v495.dtype;
        } else {
          v495 = v1.getBuffer(v493);
          if (v495) {
            v502 = v495.dtype;
          } else if ('constant' in v493) {
            v500 = 2;
            if (typeof v493.constant === 'number') {
              v504 = v493.constant;
              v505 = v506 = v503 = 0;
            } else {
              v504 = v493.constant.length > 0 ? v493.constant[0] : 0;
              v505 = v493.constant.length > 1 ? v493.constant[1] : 0;
              v506 = v493.constant.length > 2 ? v493.constant[2] : 0;
              v503 = v493.constant.length > 3 ? v493.constant[3] : 0;
            }
          } else {
            if (v9(v493.buffer)) {
              v495 = v1.createStream(34962, v493.buffer);
            } else {
              v495 = v1.getBuffer(v493.buffer);
            }
            v502 = 'type' in v493 ? v43[v493.type] : v495.dtype;
            v497 = !!v493.normalized;
            v499 = v493.size | 0;
            v498 = v493.offset | 0;
            v501 = v493.stride | 0;
            v496 = v493.divisor | 0;
          }
        }
        v507 = $29.buffer;
        $29.buffer = v495;
        v508 = $29.divisor;
        $29.divisor = v496;
        v509 = $29.normalized;
        $29.normalized = v497;
        v510 = $29.offset;
        $29.offset = v498;
        v511 = $29.size;
        $29.size = v499;
        v512 = $29.state;
        $29.state = v500;
        v513 = $29.stride;
        $29.stride = v501;
        v514 = $29.type;
        $29.type = v502;
        v515 = $29.w;
        $29.w = v503;
        v516 = $29.x;
        $29.x = v504;
        v517 = $29.y;
        $29.y = v505;
        v518 = $29.z;
        $29.z = v506;
        v519 = $30.call(this, v2, a0, a2);
        v520 = false;
        v521 = null;
        v522 = 0;
        v523 = false;
        v524 = 0;
        v525 = 0;
        v526 = 1;
        v527 = 0;
        v528 = 5126;
        v529 = 0;
        v530 = 0;
        v531 = 0;
        v532 = 0;
        if (v9(v519)) {
          v520 = true;
          v521 = v1.createStream(34962, v519);
          v528 = v521.dtype;
        } else {
          v521 = v1.getBuffer(v519);
          if (v521) {
            v528 = v521.dtype;
          } else if ('constant' in v519) {
            v526 = 2;
            if (typeof v519.constant === 'number') {
              v530 = v519.constant;
              v531 = v532 = v529 = 0;
            } else {
              v530 = v519.constant.length > 0 ? v519.constant[0] : 0;
              v531 = v519.constant.length > 1 ? v519.constant[1] : 0;
              v532 = v519.constant.length > 2 ? v519.constant[2] : 0;
              v529 = v519.constant.length > 3 ? v519.constant[3] : 0;
            }
          } else {
            if (v9(v519.buffer)) {
              v521 = v1.createStream(34962, v519.buffer);
            } else {
              v521 = v1.getBuffer(v519.buffer);
            }
            v528 = 'type' in v519 ? v43[v519.type] : v521.dtype;
            v523 = !!v519.normalized;
            v525 = v519.size | 0;
            v524 = v519.offset | 0;
            v527 = v519.stride | 0;
            v522 = v519.divisor | 0;
          }
        }
        v533 = $31.buffer;
        $31.buffer = v521;
        v534 = $31.divisor;
        $31.divisor = v522;
        v535 = $31.normalized;
        $31.normalized = v523;
        v536 = $31.offset;
        $31.offset = v524;
        v537 = $31.size;
        $31.size = v525;
        v538 = $31.state;
        $31.state = v526;
        v539 = $31.stride;
        $31.stride = v527;
        v540 = $31.type;
        $31.type = v528;
        v541 = $31.w;
        $31.w = v529;
        v542 = $31.x;
        $31.x = v530;
        v543 = $31.y;
        $31.y = v531;
        v544 = $31.z;
        $31.z = v532;
        v545 = $32.call(this, v2, a0, a2);
        v546 = false;
        v547 = null;
        v548 = 0;
        v549 = false;
        v550 = 0;
        v551 = 0;
        v552 = 1;
        v553 = 0;
        v554 = 5126;
        v555 = 0;
        v556 = 0;
        v557 = 0;
        v558 = 0;
        if (v9(v545)) {
          v546 = true;
          v547 = v1.createStream(34962, v545);
          v554 = v547.dtype;
        } else {
          v547 = v1.getBuffer(v545);
          if (v547) {
            v554 = v547.dtype;
          } else if ('constant' in v545) {
            v552 = 2;
            if (typeof v545.constant === 'number') {
              v556 = v545.constant;
              v557 = v558 = v555 = 0;
            } else {
              v556 = v545.constant.length > 0 ? v545.constant[0] : 0;
              v557 = v545.constant.length > 1 ? v545.constant[1] : 0;
              v558 = v545.constant.length > 2 ? v545.constant[2] : 0;
              v555 = v545.constant.length > 3 ? v545.constant[3] : 0;
            }
          } else {
            if (v9(v545.buffer)) {
              v547 = v1.createStream(34962, v545.buffer);
            } else {
              v547 = v1.getBuffer(v545.buffer);
            }
            v554 = 'type' in v545 ? v43[v545.type] : v547.dtype;
            v549 = !!v545.normalized;
            v551 = v545.size | 0;
            v550 = v545.offset | 0;
            v553 = v545.stride | 0;
            v548 = v545.divisor | 0;
          }
        }
        v559 = $33.buffer;
        $33.buffer = v547;
        v560 = $33.divisor;
        $33.divisor = v548;
        v561 = $33.normalized;
        $33.normalized = v549;
        v562 = $33.offset;
        $33.offset = v550;
        v563 = $33.size;
        $33.size = v551;
        v564 = $33.state;
        $33.state = v552;
        v565 = $33.stride;
        $33.stride = v553;
        v566 = $33.type;
        $33.type = v554;
        v567 = $33.w;
        $33.w = v555;
        v568 = $33.x;
        $33.x = v556;
        v569 = $33.y;
        $33.y = v557;
        v570 = $33.z;
        $33.z = v558;
        v571 = v11.vert;
        v11.vert = 44;
        v572 = v11.frag;
        v11.frag = 43;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v281;
        v2.viewportHeight = v282;
        v38[0] = v283;
        v38[1] = v284;
        v38[2] = v285;
        v38[3] = v286;
        v16[0] = v287;
        v16[1] = v288;
        v16[2] = v289;
        v16[3] = v290;
        v10.blend_enable = v291;
        v20[0] = v292;
        v20[1] = v293;
        v20[2] = v294;
        v20[3] = v295;
        v10.depth_enable = v296;
        v30[0] = v302;
        v30[1] = v303;
        v30[2] = v304;
        v30[3] = v305;
        v10.scissor_enable = v306;
        v10.stencil_enable = v307;
        if (v308) {
          $1.cpuTime += performance.now() - v309;
        }
        if (v312) {
          v5.destroyStream(v311);
        }
        v4.elements = v313;
        v4.offset = v315;
        v4.count = v317;
        v4.primitive = v318;
        v14[45] = v319;
        v14[48] = v321;
        v14[10] = v323;
        v14[46] = v325;
        v14[47] = v326;
        v14[34] = v328;
        v14[6] = v330;
        v14[7] = v332;
        v14[8] = v334;
        v14[9] = v336;
        if (v338) {
          v1.destroyStream(v339);
        }
        $17.buffer = v351;
        $17.divisor = v352;
        $17.normalized = v353;
        $17.offset = v354;
        $17.size = v355;
        $17.state = v356;
        $17.stride = v357;
        $17.type = v358;
        $17.w = v359;
        $17.x = v360;
        $17.y = v361;
        $17.z = v362;
        if (v364) {
          v1.destroyStream(v365);
        }
        $19.buffer = v377;
        $19.divisor = v378;
        $19.normalized = v379;
        $19.offset = v380;
        $19.size = v381;
        $19.state = v382;
        $19.stride = v383;
        $19.type = v384;
        $19.w = v385;
        $19.x = v386;
        $19.y = v387;
        $19.z = v388;
        if (v390) {
          v1.destroyStream(v391);
        }
        $21.buffer = v403;
        $21.divisor = v404;
        $21.normalized = v405;
        $21.offset = v406;
        $21.size = v407;
        $21.state = v408;
        $21.stride = v409;
        $21.type = v410;
        $21.w = v411;
        $21.x = v412;
        $21.y = v413;
        $21.z = v414;
        if (v416) {
          v1.destroyStream(v417);
        }
        $23.buffer = v429;
        $23.divisor = v430;
        $23.normalized = v431;
        $23.offset = v432;
        $23.size = v433;
        $23.state = v434;
        $23.stride = v435;
        $23.type = v436;
        $23.w = v437;
        $23.x = v438;
        $23.y = v439;
        $23.z = v440;
        if (v442) {
          v1.destroyStream(v443);
        }
        $25.buffer = v455;
        $25.divisor = v456;
        $25.normalized = v457;
        $25.offset = v458;
        $25.size = v459;
        $25.state = v460;
        $25.stride = v461;
        $25.type = v462;
        $25.w = v463;
        $25.x = v464;
        $25.y = v465;
        $25.z = v466;
        if (v468) {
          v1.destroyStream(v469);
        }
        $27.buffer = v481;
        $27.divisor = v482;
        $27.normalized = v483;
        $27.offset = v484;
        $27.size = v485;
        $27.state = v486;
        $27.stride = v487;
        $27.type = v488;
        $27.w = v489;
        $27.x = v490;
        $27.y = v491;
        $27.z = v492;
        if (v494) {
          v1.destroyStream(v495);
        }
        $29.buffer = v507;
        $29.divisor = v508;
        $29.normalized = v509;
        $29.offset = v510;
        $29.size = v511;
        $29.state = v512;
        $29.stride = v513;
        $29.type = v514;
        $29.w = v515;
        $29.x = v516;
        $29.y = v517;
        $29.z = v518;
        if (v520) {
          v1.destroyStream(v521);
        }
        $31.buffer = v533;
        $31.divisor = v534;
        $31.normalized = v535;
        $31.offset = v536;
        $31.size = v537;
        $31.state = v538;
        $31.stride = v539;
        $31.type = v540;
        $31.w = v541;
        $31.x = v542;
        $31.y = v543;
        $31.z = v544;
        if (v546) {
          v1.destroyStream(v547);
        }
        $33.buffer = v559;
        $33.divisor = v560;
        $33.normalized = v561;
        $33.offset = v562;
        $33.size = v563;
        $33.state = v564;
        $33.stride = v565;
        $33.type = v566;
        $33.w = v567;
        $33.x = v568;
        $33.y = v569;
        $33.z = v570;
        v11.vert = v571;
        v11.frag = v572;
        v3.dirty = true;
      }

    };
  },
  '$45,borderColorId,borderSize,colorId,constPointSize,isActive,opacity,paletteSize,paletteTexture,pixelRatio,scale,scaleFract,size,translate,translateFract,x,xFract,y,yFract': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, borderColorId, borderSize, colorId, constPointSize, isActive, opacity, paletteSize, paletteTexture, pixelRatio, scale, scaleFract, size, translate, translateFract, x, xFract, y, yFract) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    return {
      'batch': function (a0, a1) {
        var v571, v572, v607, v608, v609, v610, v611;
        v571 = v6.angle_instanced_arrays;
        v572 = v7.next;
        if (v572 !== v7.cur) {
          if (v572) {
            v8.bindFramebuffer(36160, v572.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v572;
        }
        if (v3.dirty) {
          var v573, v574, v575, v576, v577, v578, v579, v580, v581, v582, v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606;
          v573 = v10.dither;
          if (v573 !== v3.dither) {
            if (v573) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v573;
          }
          v574 = v18[0];
          v575 = v18[1];
          if (v574 !== v19[0] || v575 !== v19[1]) {
            v8.blendEquationSeparate(v574, v575);
            v19[0] = v574;
            v19[1] = v575;
          }
          v576 = v10.depth_func;
          if (v576 !== v3.depth_func) {
            v8.depthFunc(v576);
            v3.depth_func = v576;
          }
          v577 = v24[0];
          v578 = v24[1];
          if (v577 !== v25[0] || v578 !== v25[1]) {
            v8.depthRange(v577, v578);
            v25[0] = v577;
            v25[1] = v578;
          }
          v579 = v10.depth_mask;
          if (v579 !== v3.depth_mask) {
            v8.depthMask(v579);
            v3.depth_mask = v579;
          }
          v580 = v22[0];
          v581 = v22[1];
          v582 = v22[2];
          v583 = v22[3];
          if (v580 !== v23[0] || v581 !== v23[1] || v582 !== v23[2] || v583 !== v23[3]) {
            v8.colorMask(v580, v581, v582, v583);
            v23[0] = v580;
            v23[1] = v581;
            v23[2] = v582;
            v23[3] = v583;
          }
          v584 = v10.cull_enable;
          if (v584 !== v3.cull_enable) {
            if (v584) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v584;
          }
          v585 = v10.cull_face;
          if (v585 !== v3.cull_face) {
            v8.cullFace(v585);
            v3.cull_face = v585;
          }
          v586 = v10.frontFace;
          if (v586 !== v3.frontFace) {
            v8.frontFace(v586);
            v3.frontFace = v586;
          }
          v587 = v10.lineWidth;
          if (v587 !== v3.lineWidth) {
            v8.lineWidth(v587);
            v3.lineWidth = v587;
          }
          v588 = v10.polygonOffset_enable;
          if (v588 !== v3.polygonOffset_enable) {
            if (v588) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v588;
          }
          v589 = v26[0];
          v590 = v26[1];
          if (v589 !== v27[0] || v590 !== v27[1]) {
            v8.polygonOffset(v589, v590);
            v27[0] = v589;
            v27[1] = v590;
          }
          v591 = v10.sample_alpha;
          if (v591 !== v3.sample_alpha) {
            if (v591) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v591;
          }
          v592 = v10.sample_enable;
          if (v592 !== v3.sample_enable) {
            if (v592) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v592;
          }
          v593 = v28[0];
          v594 = v28[1];
          if (v593 !== v29[0] || v594 !== v29[1]) {
            v8.sampleCoverage(v593, v594);
            v29[0] = v593;
            v29[1] = v594;
          }
          v595 = v10.stencil_mask;
          if (v595 !== v3.stencil_mask) {
            v8.stencilMask(v595);
            v3.stencil_mask = v595;
          }
          v596 = v32[0];
          v597 = v32[1];
          v598 = v32[2];
          if (v596 !== v33[0] || v597 !== v33[1] || v598 !== v33[2]) {
            v8.stencilFunc(v596, v597, v598);
            v33[0] = v596;
            v33[1] = v597;
            v33[2] = v598;
          }
          v599 = v36[0];
          v600 = v36[1];
          v601 = v36[2];
          v602 = v36[3];
          if (v599 !== v37[0] || v600 !== v37[1] || v601 !== v37[2] || v602 !== v37[3]) {
            v8.stencilOpSeparate(v599, v600, v601, v602);
            v37[0] = v599;
            v37[1] = v600;
            v37[2] = v601;
            v37[3] = v602;
          }
          v603 = v34[0];
          v604 = v34[1];
          v605 = v34[2];
          v606 = v34[3];
          if (v603 !== v35[0] || v604 !== v35[1] || v605 !== v35[2] || v606 !== v35[3]) {
            v8.stencilOpSeparate(v603, v604, v605, v606);
            v35[0] = v603;
            v35[1] = v604;
            v35[2] = v605;
            v35[3] = v606;
          }
        }
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v607 = v3.profile;
        if (v607) {
          v608 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($34.program);
        v609 = v6.angle_instanced_arrays;
        var v811;
        v15.setVAO(null);
        v8.uniform1i(constPointSize.location, false);
        v8.uniform1i(paletteTexture.location, $44.bind());
        v811 = v4.instances;
        for (v610 = 0; v610 < a1; ++v610) {
          v611 = a0[v610];
          var v612, v613, v614, v615, v616, v617, v618, v619, v620, v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, v674, v675, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, v703, v704, v705, v706, v707, v708, v709, v710, v711, v712, v713, v714, v715, v716, v717, v718, v719, v720, v721, v722, v723, v724, v725, v726, v727, v728, v729, v730, v731, v732, v733, v734, v735, v736, v737, v738, v739, v740, v741, v742, v743, v744, v745, v746, v747, v748, v749, v750, v751, v752, v753, v754, v755, v756, v757, v758, v759, v760, v761, v762, v763, v764, v765, v766, v767, v768, v769, v770, v771, v772, v773, v774, v775, v776, v777, v778, v779, v780, v781, v782, v783, v784, v785, v786, v787, v788, v789, v790, v791, v792, v793, v794, v795, v796, v797, v798, v799, v800, v801, v802, v803, v804, v805, v806, v807, v808, v809, v810;
          v612 = v611['viewport'];
          v613 = v612.x | 0;
          v614 = v612.y | 0;
          v615 = 'width' in v612 ? v612.width | 0 : v2.framebufferWidth - v613;
          v616 = 'height' in v612 ? v612.height | 0 : v2.framebufferHeight - v614;
          v617 = v2.viewportWidth;
          v2.viewportWidth = v615;
          v618 = v2.viewportHeight;
          v2.viewportHeight = v616;
          v8.viewport(v613, v614, v615, v616);
          v39[0] = v613;
          v39[1] = v614;
          v39[2] = v615;
          v39[3] = v616;
          v619 = v611['viewport'];
          v620 = v619.x | 0;
          v621 = v619.y | 0;
          v622 = 'width' in v619 ? v619.width | 0 : v2.framebufferWidth - v620;
          v623 = 'height' in v619 ? v619.height | 0 : v2.framebufferHeight - v621;
          v8.scissor(v620, v621, v622, v623);
          v31[0] = v620;
          v31[1] = v621;
          v31[2] = v622;
          v31[3] = v623;
          v624 = $35.call(this, v2, v611, v610);
          v625 = false;
          v626 = null;
          v627 = 0;
          v628 = false;
          v629 = 0;
          v630 = 0;
          v631 = 1;
          v632 = 0;
          v633 = 5126;
          v634 = 0;
          v635 = 0;
          v636 = 0;
          v637 = 0;
          if (v9(v624)) {
            v625 = true;
            v626 = v1.createStream(34962, v624);
            v633 = v626.dtype;
          } else {
            v626 = v1.getBuffer(v624);
            if (v626) {
              v633 = v626.dtype;
            } else if ('constant' in v624) {
              v631 = 2;
              if (typeof v624.constant === 'number') {
                v635 = v624.constant;
                v636 = v637 = v634 = 0;
              } else {
                v635 = v624.constant.length > 0 ? v624.constant[0] : 0;
                v636 = v624.constant.length > 1 ? v624.constant[1] : 0;
                v637 = v624.constant.length > 2 ? v624.constant[2] : 0;
                v634 = v624.constant.length > 3 ? v624.constant[3] : 0;
              }
            } else {
              if (v9(v624.buffer)) {
                v626 = v1.createStream(34962, v624.buffer);
              } else {
                v626 = v1.getBuffer(v624.buffer);
              }
              v633 = 'type' in v624 ? v43[v624.type] : v626.dtype;
              v628 = !!v624.normalized;
              v630 = v624.size | 0;
              v629 = v624.offset | 0;
              v632 = v624.stride | 0;
              v627 = v624.divisor | 0;
            }
          }
          v638 = x.location;
          v639 = v0[v638];
          if (v631 === 1) {
            if (!v639.buffer) {
              v8.enableVertexAttribArray(v638);
            }
            v640 = v630 || 1;
            if (v639.type !== v633 || v639.size !== v640 || v639.buffer !== v626 || v639.normalized !== v628 || v639.offset !== v629 || v639.stride !== v632) {
              v8.bindBuffer(34962, v626.buffer);
              v8.vertexAttribPointer(v638, v640, v633, v628, v632, v629);
              v639.type = v633;
              v639.size = v640;
              v639.buffer = v626;
              v639.normalized = v628;
              v639.offset = v629;
              v639.stride = v632;
            }
            if (v639.divisor !== v627) {
              v609.vertexAttribDivisorANGLE(v638, v627);
              v639.divisor = v627;
            }
          } else {
            if (v639.buffer) {
              v8.disableVertexAttribArray(v638);
              v639.buffer = null;
            }
            if (v639.x !== v635 || v639.y !== v636 || v639.z !== v637 || v639.w !== v634) {
              v8.vertexAttrib4f(v638, v635, v636, v637, v634);
              v639.x = v635;
              v639.y = v636;
              v639.z = v637;
              v639.w = v634;
            }
          }
          v641 = $36.call(this, v2, v611, v610);
          v642 = false;
          v643 = null;
          v644 = 0;
          v645 = false;
          v646 = 0;
          v647 = 0;
          v648 = 1;
          v649 = 0;
          v650 = 5126;
          v651 = 0;
          v652 = 0;
          v653 = 0;
          v654 = 0;
          if (v9(v641)) {
            v642 = true;
            v643 = v1.createStream(34962, v641);
            v650 = v643.dtype;
          } else {
            v643 = v1.getBuffer(v641);
            if (v643) {
              v650 = v643.dtype;
            } else if ('constant' in v641) {
              v648 = 2;
              if (typeof v641.constant === 'number') {
                v652 = v641.constant;
                v653 = v654 = v651 = 0;
              } else {
                v652 = v641.constant.length > 0 ? v641.constant[0] : 0;
                v653 = v641.constant.length > 1 ? v641.constant[1] : 0;
                v654 = v641.constant.length > 2 ? v641.constant[2] : 0;
                v651 = v641.constant.length > 3 ? v641.constant[3] : 0;
              }
            } else {
              if (v9(v641.buffer)) {
                v643 = v1.createStream(34962, v641.buffer);
              } else {
                v643 = v1.getBuffer(v641.buffer);
              }
              v650 = 'type' in v641 ? v43[v641.type] : v643.dtype;
              v645 = !!v641.normalized;
              v647 = v641.size | 0;
              v646 = v641.offset | 0;
              v649 = v641.stride | 0;
              v644 = v641.divisor | 0;
            }
          }
          v655 = y.location;
          v656 = v0[v655];
          if (v648 === 1) {
            if (!v656.buffer) {
              v8.enableVertexAttribArray(v655);
            }
            v657 = v647 || 1;
            if (v656.type !== v650 || v656.size !== v657 || v656.buffer !== v643 || v656.normalized !== v645 || v656.offset !== v646 || v656.stride !== v649) {
              v8.bindBuffer(34962, v643.buffer);
              v8.vertexAttribPointer(v655, v657, v650, v645, v649, v646);
              v656.type = v650;
              v656.size = v657;
              v656.buffer = v643;
              v656.normalized = v645;
              v656.offset = v646;
              v656.stride = v649;
            }
            if (v656.divisor !== v644) {
              v609.vertexAttribDivisorANGLE(v655, v644);
              v656.divisor = v644;
            }
          } else {
            if (v656.buffer) {
              v8.disableVertexAttribArray(v655);
              v656.buffer = null;
            }
            if (v656.x !== v652 || v656.y !== v653 || v656.z !== v654 || v656.w !== v651) {
              v8.vertexAttrib4f(v655, v652, v653, v654, v651);
              v656.x = v652;
              v656.y = v653;
              v656.z = v654;
              v656.w = v651;
            }
          }
          v658 = $37.call(this, v2, v611, v610);
          v659 = false;
          v660 = null;
          v661 = 0;
          v662 = false;
          v663 = 0;
          v664 = 0;
          v665 = 1;
          v666 = 0;
          v667 = 5126;
          v668 = 0;
          v669 = 0;
          v670 = 0;
          v671 = 0;
          if (v9(v658)) {
            v659 = true;
            v660 = v1.createStream(34962, v658);
            v667 = v660.dtype;
          } else {
            v660 = v1.getBuffer(v658);
            if (v660) {
              v667 = v660.dtype;
            } else if ('constant' in v658) {
              v665 = 2;
              if (typeof v658.constant === 'number') {
                v669 = v658.constant;
                v670 = v671 = v668 = 0;
              } else {
                v669 = v658.constant.length > 0 ? v658.constant[0] : 0;
                v670 = v658.constant.length > 1 ? v658.constant[1] : 0;
                v671 = v658.constant.length > 2 ? v658.constant[2] : 0;
                v668 = v658.constant.length > 3 ? v658.constant[3] : 0;
              }
            } else {
              if (v9(v658.buffer)) {
                v660 = v1.createStream(34962, v658.buffer);
              } else {
                v660 = v1.getBuffer(v658.buffer);
              }
              v667 = 'type' in v658 ? v43[v658.type] : v660.dtype;
              v662 = !!v658.normalized;
              v664 = v658.size | 0;
              v663 = v658.offset | 0;
              v666 = v658.stride | 0;
              v661 = v658.divisor | 0;
            }
          }
          v672 = xFract.location;
          v673 = v0[v672];
          if (v665 === 1) {
            if (!v673.buffer) {
              v8.enableVertexAttribArray(v672);
            }
            v674 = v664 || 1;
            if (v673.type !== v667 || v673.size !== v674 || v673.buffer !== v660 || v673.normalized !== v662 || v673.offset !== v663 || v673.stride !== v666) {
              v8.bindBuffer(34962, v660.buffer);
              v8.vertexAttribPointer(v672, v674, v667, v662, v666, v663);
              v673.type = v667;
              v673.size = v674;
              v673.buffer = v660;
              v673.normalized = v662;
              v673.offset = v663;
              v673.stride = v666;
            }
            if (v673.divisor !== v661) {
              v609.vertexAttribDivisorANGLE(v672, v661);
              v673.divisor = v661;
            }
          } else {
            if (v673.buffer) {
              v8.disableVertexAttribArray(v672);
              v673.buffer = null;
            }
            if (v673.x !== v669 || v673.y !== v670 || v673.z !== v671 || v673.w !== v668) {
              v8.vertexAttrib4f(v672, v669, v670, v671, v668);
              v673.x = v669;
              v673.y = v670;
              v673.z = v671;
              v673.w = v668;
            }
          }
          v675 = $38.call(this, v2, v611, v610);
          v676 = false;
          v677 = null;
          v678 = 0;
          v679 = false;
          v680 = 0;
          v681 = 0;
          v682 = 1;
          v683 = 0;
          v684 = 5126;
          v685 = 0;
          v686 = 0;
          v687 = 0;
          v688 = 0;
          if (v9(v675)) {
            v676 = true;
            v677 = v1.createStream(34962, v675);
            v684 = v677.dtype;
          } else {
            v677 = v1.getBuffer(v675);
            if (v677) {
              v684 = v677.dtype;
            } else if ('constant' in v675) {
              v682 = 2;
              if (typeof v675.constant === 'number') {
                v686 = v675.constant;
                v687 = v688 = v685 = 0;
              } else {
                v686 = v675.constant.length > 0 ? v675.constant[0] : 0;
                v687 = v675.constant.length > 1 ? v675.constant[1] : 0;
                v688 = v675.constant.length > 2 ? v675.constant[2] : 0;
                v685 = v675.constant.length > 3 ? v675.constant[3] : 0;
              }
            } else {
              if (v9(v675.buffer)) {
                v677 = v1.createStream(34962, v675.buffer);
              } else {
                v677 = v1.getBuffer(v675.buffer);
              }
              v684 = 'type' in v675 ? v43[v675.type] : v677.dtype;
              v679 = !!v675.normalized;
              v681 = v675.size | 0;
              v680 = v675.offset | 0;
              v683 = v675.stride | 0;
              v678 = v675.divisor | 0;
            }
          }
          v689 = yFract.location;
          v690 = v0[v689];
          if (v682 === 1) {
            if (!v690.buffer) {
              v8.enableVertexAttribArray(v689);
            }
            v691 = v681 || 1;
            if (v690.type !== v684 || v690.size !== v691 || v690.buffer !== v677 || v690.normalized !== v679 || v690.offset !== v680 || v690.stride !== v683) {
              v8.bindBuffer(34962, v677.buffer);
              v8.vertexAttribPointer(v689, v691, v684, v679, v683, v680);
              v690.type = v684;
              v690.size = v691;
              v690.buffer = v677;
              v690.normalized = v679;
              v690.offset = v680;
              v690.stride = v683;
            }
            if (v690.divisor !== v678) {
              v609.vertexAttribDivisorANGLE(v689, v678);
              v690.divisor = v678;
            }
          } else {
            if (v690.buffer) {
              v8.disableVertexAttribArray(v689);
              v690.buffer = null;
            }
            if (v690.x !== v686 || v690.y !== v687 || v690.z !== v688 || v690.w !== v685) {
              v8.vertexAttrib4f(v689, v686, v687, v688, v685);
              v690.x = v686;
              v690.y = v687;
              v690.z = v688;
              v690.w = v685;
            }
          }
          v692 = $39.call(this, v2, v611, v610);
          v693 = false;
          v694 = null;
          v695 = 0;
          v696 = false;
          v697 = 0;
          v698 = 0;
          v699 = 1;
          v700 = 0;
          v701 = 5126;
          v702 = 0;
          v703 = 0;
          v704 = 0;
          v705 = 0;
          if (v9(v692)) {
            v693 = true;
            v694 = v1.createStream(34962, v692);
            v701 = v694.dtype;
          } else {
            v694 = v1.getBuffer(v692);
            if (v694) {
              v701 = v694.dtype;
            } else if ('constant' in v692) {
              v699 = 2;
              if (typeof v692.constant === 'number') {
                v703 = v692.constant;
                v704 = v705 = v702 = 0;
              } else {
                v703 = v692.constant.length > 0 ? v692.constant[0] : 0;
                v704 = v692.constant.length > 1 ? v692.constant[1] : 0;
                v705 = v692.constant.length > 2 ? v692.constant[2] : 0;
                v702 = v692.constant.length > 3 ? v692.constant[3] : 0;
              }
            } else {
              if (v9(v692.buffer)) {
                v694 = v1.createStream(34962, v692.buffer);
              } else {
                v694 = v1.getBuffer(v692.buffer);
              }
              v701 = 'type' in v692 ? v43[v692.type] : v694.dtype;
              v696 = !!v692.normalized;
              v698 = v692.size | 0;
              v697 = v692.offset | 0;
              v700 = v692.stride | 0;
              v695 = v692.divisor | 0;
            }
          }
          v706 = size.location;
          v707 = v0[v706];
          if (v699 === 1) {
            if (!v707.buffer) {
              v8.enableVertexAttribArray(v706);
            }
            v708 = v698 || 1;
            if (v707.type !== v701 || v707.size !== v708 || v707.buffer !== v694 || v707.normalized !== v696 || v707.offset !== v697 || v707.stride !== v700) {
              v8.bindBuffer(34962, v694.buffer);
              v8.vertexAttribPointer(v706, v708, v701, v696, v700, v697);
              v707.type = v701;
              v707.size = v708;
              v707.buffer = v694;
              v707.normalized = v696;
              v707.offset = v697;
              v707.stride = v700;
            }
            if (v707.divisor !== v695) {
              v609.vertexAttribDivisorANGLE(v706, v695);
              v707.divisor = v695;
            }
          } else {
            if (v707.buffer) {
              v8.disableVertexAttribArray(v706);
              v707.buffer = null;
            }
            if (v707.x !== v703 || v707.y !== v704 || v707.z !== v705 || v707.w !== v702) {
              v8.vertexAttrib4f(v706, v703, v704, v705, v702);
              v707.x = v703;
              v707.y = v704;
              v707.z = v705;
              v707.w = v702;
            }
          }
          v709 = $40.call(this, v2, v611, v610);
          v710 = false;
          v711 = null;
          v712 = 0;
          v713 = false;
          v714 = 0;
          v715 = 0;
          v716 = 1;
          v717 = 0;
          v718 = 5126;
          v719 = 0;
          v720 = 0;
          v721 = 0;
          v722 = 0;
          if (v9(v709)) {
            v710 = true;
            v711 = v1.createStream(34962, v709);
            v718 = v711.dtype;
          } else {
            v711 = v1.getBuffer(v709);
            if (v711) {
              v718 = v711.dtype;
            } else if ('constant' in v709) {
              v716 = 2;
              if (typeof v709.constant === 'number') {
                v720 = v709.constant;
                v721 = v722 = v719 = 0;
              } else {
                v720 = v709.constant.length > 0 ? v709.constant[0] : 0;
                v721 = v709.constant.length > 1 ? v709.constant[1] : 0;
                v722 = v709.constant.length > 2 ? v709.constant[2] : 0;
                v719 = v709.constant.length > 3 ? v709.constant[3] : 0;
              }
            } else {
              if (v9(v709.buffer)) {
                v711 = v1.createStream(34962, v709.buffer);
              } else {
                v711 = v1.getBuffer(v709.buffer);
              }
              v718 = 'type' in v709 ? v43[v709.type] : v711.dtype;
              v713 = !!v709.normalized;
              v715 = v709.size | 0;
              v714 = v709.offset | 0;
              v717 = v709.stride | 0;
              v712 = v709.divisor | 0;
            }
          }
          v723 = borderSize.location;
          v724 = v0[v723];
          if (v716 === 1) {
            if (!v724.buffer) {
              v8.enableVertexAttribArray(v723);
            }
            v725 = v715 || 1;
            if (v724.type !== v718 || v724.size !== v725 || v724.buffer !== v711 || v724.normalized !== v713 || v724.offset !== v714 || v724.stride !== v717) {
              v8.bindBuffer(34962, v711.buffer);
              v8.vertexAttribPointer(v723, v725, v718, v713, v717, v714);
              v724.type = v718;
              v724.size = v725;
              v724.buffer = v711;
              v724.normalized = v713;
              v724.offset = v714;
              v724.stride = v717;
            }
            if (v724.divisor !== v712) {
              v609.vertexAttribDivisorANGLE(v723, v712);
              v724.divisor = v712;
            }
          } else {
            if (v724.buffer) {
              v8.disableVertexAttribArray(v723);
              v724.buffer = null;
            }
            if (v724.x !== v720 || v724.y !== v721 || v724.z !== v722 || v724.w !== v719) {
              v8.vertexAttrib4f(v723, v720, v721, v722, v719);
              v724.x = v720;
              v724.y = v721;
              v724.z = v722;
              v724.w = v719;
            }
          }
          v726 = $41.call(this, v2, v611, v610);
          v727 = false;
          v728 = null;
          v729 = 0;
          v730 = false;
          v731 = 0;
          v732 = 0;
          v733 = 1;
          v734 = 0;
          v735 = 5126;
          v736 = 0;
          v737 = 0;
          v738 = 0;
          v739 = 0;
          if (v9(v726)) {
            v727 = true;
            v728 = v1.createStream(34962, v726);
            v735 = v728.dtype;
          } else {
            v728 = v1.getBuffer(v726);
            if (v728) {
              v735 = v728.dtype;
            } else if ('constant' in v726) {
              v733 = 2;
              if (typeof v726.constant === 'number') {
                v737 = v726.constant;
                v738 = v739 = v736 = 0;
              } else {
                v737 = v726.constant.length > 0 ? v726.constant[0] : 0;
                v738 = v726.constant.length > 1 ? v726.constant[1] : 0;
                v739 = v726.constant.length > 2 ? v726.constant[2] : 0;
                v736 = v726.constant.length > 3 ? v726.constant[3] : 0;
              }
            } else {
              if (v9(v726.buffer)) {
                v728 = v1.createStream(34962, v726.buffer);
              } else {
                v728 = v1.getBuffer(v726.buffer);
              }
              v735 = 'type' in v726 ? v43[v726.type] : v728.dtype;
              v730 = !!v726.normalized;
              v732 = v726.size | 0;
              v731 = v726.offset | 0;
              v734 = v726.stride | 0;
              v729 = v726.divisor | 0;
            }
          }
          v740 = colorId.location;
          v741 = v0[v740];
          if (v733 === 1) {
            if (!v741.buffer) {
              v8.enableVertexAttribArray(v740);
            }
            v742 = v732 || 4;
            if (v741.type !== v735 || v741.size !== v742 || v741.buffer !== v728 || v741.normalized !== v730 || v741.offset !== v731 || v741.stride !== v734) {
              v8.bindBuffer(34962, v728.buffer);
              v8.vertexAttribPointer(v740, v742, v735, v730, v734, v731);
              v741.type = v735;
              v741.size = v742;
              v741.buffer = v728;
              v741.normalized = v730;
              v741.offset = v731;
              v741.stride = v734;
            }
            if (v741.divisor !== v729) {
              v609.vertexAttribDivisorANGLE(v740, v729);
              v741.divisor = v729;
            }
          } else {
            if (v741.buffer) {
              v8.disableVertexAttribArray(v740);
              v741.buffer = null;
            }
            if (v741.x !== v737 || v741.y !== v738 || v741.z !== v739 || v741.w !== v736) {
              v8.vertexAttrib4f(v740, v737, v738, v739, v736);
              v741.x = v737;
              v741.y = v738;
              v741.z = v739;
              v741.w = v736;
            }
          }
          v743 = $42.call(this, v2, v611, v610);
          v744 = false;
          v745 = null;
          v746 = 0;
          v747 = false;
          v748 = 0;
          v749 = 0;
          v750 = 1;
          v751 = 0;
          v752 = 5126;
          v753 = 0;
          v754 = 0;
          v755 = 0;
          v756 = 0;
          if (v9(v743)) {
            v744 = true;
            v745 = v1.createStream(34962, v743);
            v752 = v745.dtype;
          } else {
            v745 = v1.getBuffer(v743);
            if (v745) {
              v752 = v745.dtype;
            } else if ('constant' in v743) {
              v750 = 2;
              if (typeof v743.constant === 'number') {
                v754 = v743.constant;
                v755 = v756 = v753 = 0;
              } else {
                v754 = v743.constant.length > 0 ? v743.constant[0] : 0;
                v755 = v743.constant.length > 1 ? v743.constant[1] : 0;
                v756 = v743.constant.length > 2 ? v743.constant[2] : 0;
                v753 = v743.constant.length > 3 ? v743.constant[3] : 0;
              }
            } else {
              if (v9(v743.buffer)) {
                v745 = v1.createStream(34962, v743.buffer);
              } else {
                v745 = v1.getBuffer(v743.buffer);
              }
              v752 = 'type' in v743 ? v43[v743.type] : v745.dtype;
              v747 = !!v743.normalized;
              v749 = v743.size | 0;
              v748 = v743.offset | 0;
              v751 = v743.stride | 0;
              v746 = v743.divisor | 0;
            }
          }
          v757 = borderColorId.location;
          v758 = v0[v757];
          if (v750 === 1) {
            if (!v758.buffer) {
              v8.enableVertexAttribArray(v757);
            }
            v759 = v749 || 4;
            if (v758.type !== v752 || v758.size !== v759 || v758.buffer !== v745 || v758.normalized !== v747 || v758.offset !== v748 || v758.stride !== v751) {
              v8.bindBuffer(34962, v745.buffer);
              v8.vertexAttribPointer(v757, v759, v752, v747, v751, v748);
              v758.type = v752;
              v758.size = v759;
              v758.buffer = v745;
              v758.normalized = v747;
              v758.offset = v748;
              v758.stride = v751;
            }
            if (v758.divisor !== v746) {
              v609.vertexAttribDivisorANGLE(v757, v746);
              v758.divisor = v746;
            }
          } else {
            if (v758.buffer) {
              v8.disableVertexAttribArray(v757);
              v758.buffer = null;
            }
            if (v758.x !== v754 || v758.y !== v755 || v758.z !== v756 || v758.w !== v753) {
              v8.vertexAttrib4f(v757, v754, v755, v756, v753);
              v758.x = v754;
              v758.y = v755;
              v758.z = v756;
              v758.w = v753;
            }
          }
          v760 = $43.call(this, v2, v611, v610);
          v761 = false;
          v762 = null;
          v763 = 0;
          v764 = false;
          v765 = 0;
          v766 = 0;
          v767 = 1;
          v768 = 0;
          v769 = 5126;
          v770 = 0;
          v771 = 0;
          v772 = 0;
          v773 = 0;
          if (v9(v760)) {
            v761 = true;
            v762 = v1.createStream(34962, v760);
            v769 = v762.dtype;
          } else {
            v762 = v1.getBuffer(v760);
            if (v762) {
              v769 = v762.dtype;
            } else if ('constant' in v760) {
              v767 = 2;
              if (typeof v760.constant === 'number') {
                v771 = v760.constant;
                v772 = v773 = v770 = 0;
              } else {
                v771 = v760.constant.length > 0 ? v760.constant[0] : 0;
                v772 = v760.constant.length > 1 ? v760.constant[1] : 0;
                v773 = v760.constant.length > 2 ? v760.constant[2] : 0;
                v770 = v760.constant.length > 3 ? v760.constant[3] : 0;
              }
            } else {
              if (v9(v760.buffer)) {
                v762 = v1.createStream(34962, v760.buffer);
              } else {
                v762 = v1.getBuffer(v760.buffer);
              }
              v769 = 'type' in v760 ? v43[v760.type] : v762.dtype;
              v764 = !!v760.normalized;
              v766 = v760.size | 0;
              v765 = v760.offset | 0;
              v768 = v760.stride | 0;
              v763 = v760.divisor | 0;
            }
          }
          v774 = isActive.location;
          v775 = v0[v774];
          if (v767 === 1) {
            if (!v775.buffer) {
              v8.enableVertexAttribArray(v774);
            }
            v776 = v766 || 1;
            if (v775.type !== v769 || v775.size !== v776 || v775.buffer !== v762 || v775.normalized !== v764 || v775.offset !== v765 || v775.stride !== v768) {
              v8.bindBuffer(34962, v762.buffer);
              v8.vertexAttribPointer(v774, v776, v769, v764, v768, v765);
              v775.type = v769;
              v775.size = v776;
              v775.buffer = v762;
              v775.normalized = v764;
              v775.offset = v765;
              v775.stride = v768;
            }
            if (v775.divisor !== v763) {
              v609.vertexAttribDivisorANGLE(v774, v763);
              v775.divisor = v763;
            }
          } else {
            if (v775.buffer) {
              v8.disableVertexAttribArray(v774);
              v775.buffer = null;
            }
            if (v775.x !== v771 || v775.y !== v772 || v775.z !== v773 || v775.w !== v770) {
              v8.vertexAttrib4f(v774, v771, v772, v773, v770);
              v775.x = v771;
              v775.y = v772;
              v775.z = v773;
              v775.w = v770;
            }
          }
          v777 = v2['pixelRatio'];
          if (!v610 || v778 !== v777) {
            v778 = v777;
            v8.uniform1f(pixelRatio.location, v777);
          }
          v779 = $45.call(this, v2, v611, v610);
          v780 = v779[0];
          v782 = v779[1];
          if (!v610 || v781 !== v780 || v783 !== v782) {
            v781 = v780;
            v783 = v782;
            v8.uniform2f(paletteSize.location, v780, v782);
          }
          v784 = v611['scale'];
          v785 = v784[0];
          v787 = v784[1];
          if (!v610 || v786 !== v785 || v788 !== v787) {
            v786 = v785;
            v788 = v787;
            v8.uniform2f(scale.location, v785, v787);
          }
          v789 = v611['scaleFract'];
          v790 = v789[0];
          v792 = v789[1];
          if (!v610 || v791 !== v790 || v793 !== v792) {
            v791 = v790;
            v793 = v792;
            v8.uniform2f(scaleFract.location, v790, v792);
          }
          v794 = v611['translate'];
          v795 = v794[0];
          v797 = v794[1];
          if (!v610 || v796 !== v795 || v798 !== v797) {
            v796 = v795;
            v798 = v797;
            v8.uniform2f(translate.location, v795, v797);
          }
          v799 = v611['translateFract'];
          v800 = v799[0];
          v802 = v799[1];
          if (!v610 || v801 !== v800 || v803 !== v802) {
            v801 = v800;
            v803 = v802;
            v8.uniform2f(translateFract.location, v800, v802);
          }
          v804 = v611['opacity'];
          if (!v610 || v805 !== v804) {
            v805 = v804;
            v8.uniform1f(opacity.location, v804);
          }
          v806 = v611['elements'];
          v807 = null;
          v808 = v9(v806);
          if (v808) {
            v807 = v5.createStream(v806);
          } else {
            v807 = v5.getElements(v806);
          }
          if (v807) v8.bindBuffer(34963, v807.buffer.buffer);
          v809 = v611['offset'];
          v810 = v611['count'];
          if (v810) {
            if (v811 > 0) {
              if (v807) {
                v609.drawElementsInstancedANGLE(0, v810, v807.type, v809 << (v807.type - 5121 >> 1), v811);
              } else {
                v609.drawArraysInstancedANGLE(0, v809, v810, v811);
              }
            } else if (v811 < 0) {
              if (v807) {
                v8.drawElements(0, v810, v807.type, v809 << (v807.type - 5121 >> 1));
              } else {
                v8.drawArrays(0, v809, v810);
              }
            }
            v2.viewportWidth = v617;
            v2.viewportHeight = v618;
            if (v625) {
              v1.destroyStream(v626);
            }
            if (v642) {
              v1.destroyStream(v643);
            }
            if (v659) {
              v1.destroyStream(v660);
            }
            if (v676) {
              v1.destroyStream(v677);
            }
            if (v693) {
              v1.destroyStream(v694);
            }
            if (v710) {
              v1.destroyStream(v711);
            }
            if (v727) {
              v1.destroyStream(v728);
            }
            if (v744) {
              v1.destroyStream(v745);
            }
            if (v761) {
              v1.destroyStream(v762);
            }
            if (v808) {
              v5.destroyStream(v807);
            }
          }
        }
        $44.unbind();
        v3.dirty = true;
        v15.setVAO(null);
        if (v607) {
          $1.cpuTime += performance.now() - v608;
        }
      },
      'draw': function (a0) {
        var v47, v48, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273;
        v47 = v6.angle_instanced_arrays;
        v48 = v7.next;
        if (v48 !== v7.cur) {
          if (v48) {
            v8.bindFramebuffer(36160, v48.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v48;
        }
        if (v3.dirty) {
          var v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82;
          v49 = v10.dither;
          if (v49 !== v3.dither) {
            if (v49) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v49;
          }
          v50 = v18[0];
          v51 = v18[1];
          if (v50 !== v19[0] || v51 !== v19[1]) {
            v8.blendEquationSeparate(v50, v51);
            v19[0] = v50;
            v19[1] = v51;
          }
          v52 = v10.depth_func;
          if (v52 !== v3.depth_func) {
            v8.depthFunc(v52);
            v3.depth_func = v52;
          }
          v53 = v24[0];
          v54 = v24[1];
          if (v53 !== v25[0] || v54 !== v25[1]) {
            v8.depthRange(v53, v54);
            v25[0] = v53;
            v25[1] = v54;
          }
          v55 = v10.depth_mask;
          if (v55 !== v3.depth_mask) {
            v8.depthMask(v55);
            v3.depth_mask = v55;
          }
          v56 = v22[0];
          v57 = v22[1];
          v58 = v22[2];
          v59 = v22[3];
          if (v56 !== v23[0] || v57 !== v23[1] || v58 !== v23[2] || v59 !== v23[3]) {
            v8.colorMask(v56, v57, v58, v59);
            v23[0] = v56;
            v23[1] = v57;
            v23[2] = v58;
            v23[3] = v59;
          }
          v60 = v10.cull_enable;
          if (v60 !== v3.cull_enable) {
            if (v60) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v60;
          }
          v61 = v10.cull_face;
          if (v61 !== v3.cull_face) {
            v8.cullFace(v61);
            v3.cull_face = v61;
          }
          v62 = v10.frontFace;
          if (v62 !== v3.frontFace) {
            v8.frontFace(v62);
            v3.frontFace = v62;
          }
          v63 = v10.lineWidth;
          if (v63 !== v3.lineWidth) {
            v8.lineWidth(v63);
            v3.lineWidth = v63;
          }
          v64 = v10.polygonOffset_enable;
          if (v64 !== v3.polygonOffset_enable) {
            if (v64) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v64;
          }
          v65 = v26[0];
          v66 = v26[1];
          if (v65 !== v27[0] || v66 !== v27[1]) {
            v8.polygonOffset(v65, v66);
            v27[0] = v65;
            v27[1] = v66;
          }
          v67 = v10.sample_alpha;
          if (v67 !== v3.sample_alpha) {
            if (v67) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v67;
          }
          v68 = v10.sample_enable;
          if (v68 !== v3.sample_enable) {
            if (v68) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v68;
          }
          v69 = v28[0];
          v70 = v28[1];
          if (v69 !== v29[0] || v70 !== v29[1]) {
            v8.sampleCoverage(v69, v70);
            v29[0] = v69;
            v29[1] = v70;
          }
          v71 = v10.stencil_mask;
          if (v71 !== v3.stencil_mask) {
            v8.stencilMask(v71);
            v3.stencil_mask = v71;
          }
          v72 = v32[0];
          v73 = v32[1];
          v74 = v32[2];
          if (v72 !== v33[0] || v73 !== v33[1] || v74 !== v33[2]) {
            v8.stencilFunc(v72, v73, v74);
            v33[0] = v72;
            v33[1] = v73;
            v33[2] = v74;
          }
          v75 = v36[0];
          v76 = v36[1];
          v77 = v36[2];
          v78 = v36[3];
          if (v75 !== v37[0] || v76 !== v37[1] || v77 !== v37[2] || v78 !== v37[3]) {
            v8.stencilOpSeparate(v75, v76, v77, v78);
            v37[0] = v75;
            v37[1] = v76;
            v37[2] = v77;
            v37[3] = v78;
          }
          v79 = v34[0];
          v80 = v34[1];
          v81 = v34[2];
          v82 = v34[3];
          if (v79 !== v35[0] || v80 !== v35[1] || v81 !== v35[2] || v82 !== v35[3]) {
            v8.stencilOpSeparate(v79, v80, v81, v82);
            v35[0] = v79;
            v35[1] = v80;
            v35[2] = v81;
            v35[3] = v82;
          }
        }
        v83 = a0['viewport'];
        v84 = v83.x | 0;
        v85 = v83.y | 0;
        v86 = 'width' in v83 ? v83.width | 0 : v2.framebufferWidth - v84;
        v87 = 'height' in v83 ? v83.height | 0 : v2.framebufferHeight - v85;
        v88 = v2.viewportWidth;
        v2.viewportWidth = v86;
        v89 = v2.viewportHeight;
        v2.viewportHeight = v87;
        v8.viewport(v84, v85, v86, v87);
        v39[0] = v84;
        v39[1] = v85;
        v39[2] = v86;
        v39[3] = v87;
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v90 = a0['viewport'];
        v91 = v90.x | 0;
        v92 = v90.y | 0;
        v93 = 'width' in v90 ? v90.width | 0 : v2.framebufferWidth - v91;
        v94 = 'height' in v90 ? v90.height | 0 : v2.framebufferHeight - v92;
        v8.scissor(v91, v92, v93, v94);
        v31[0] = v91;
        v31[1] = v92;
        v31[2] = v93;
        v31[3] = v94;
        v8.enable(3089);
        v3.scissor_enable = true;
        v8.disable(2960);
        v3.stencil_enable = false;
        v95 = v3.profile;
        if (v95) {
          v96 = performance.now();
          $1.count++;
        }
        v8.useProgram($2.program);
        v97 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v98 = $3.call(this, v2, a0, 0);
        v99 = false;
        v100 = null;
        v101 = 0;
        v102 = false;
        v103 = 0;
        v104 = 0;
        v105 = 1;
        v106 = 0;
        v107 = 5126;
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        if (v9(v98)) {
          v99 = true;
          v100 = v1.createStream(34962, v98);
          v107 = v100.dtype;
        } else {
          v100 = v1.getBuffer(v98);
          if (v100) {
            v107 = v100.dtype;
          } else if ('constant' in v98) {
            v105 = 2;
            if (typeof v98.constant === 'number') {
              v109 = v98.constant;
              v110 = v111 = v108 = 0;
            } else {
              v109 = v98.constant.length > 0 ? v98.constant[0] : 0;
              v110 = v98.constant.length > 1 ? v98.constant[1] : 0;
              v111 = v98.constant.length > 2 ? v98.constant[2] : 0;
              v108 = v98.constant.length > 3 ? v98.constant[3] : 0;
            }
          } else {
            if (v9(v98.buffer)) {
              v100 = v1.createStream(34962, v98.buffer);
            } else {
              v100 = v1.getBuffer(v98.buffer);
            }
            v107 = 'type' in v98 ? v43[v98.type] : v100.dtype;
            v102 = !!v98.normalized;
            v104 = v98.size | 0;
            v103 = v98.offset | 0;
            v106 = v98.stride | 0;
            v101 = v98.divisor | 0;
          }
        }
        v112 = x.location;
        v113 = v0[v112];
        if (v105 === 1) {
          if (!v113.buffer) {
            v8.enableVertexAttribArray(v112);
          }
          v114 = v104 || 1;
          if (v113.type !== v107 || v113.size !== v114 || v113.buffer !== v100 || v113.normalized !== v102 || v113.offset !== v103 || v113.stride !== v106) {
            v8.bindBuffer(34962, v100.buffer);
            v8.vertexAttribPointer(v112, v114, v107, v102, v106, v103);
            v113.type = v107;
            v113.size = v114;
            v113.buffer = v100;
            v113.normalized = v102;
            v113.offset = v103;
            v113.stride = v106;
          }
          if (v113.divisor !== v101) {
            v97.vertexAttribDivisorANGLE(v112, v101);
            v113.divisor = v101;
          }
        } else {
          if (v113.buffer) {
            v8.disableVertexAttribArray(v112);
            v113.buffer = null;
          }
          if (v113.x !== v109 || v113.y !== v110 || v113.z !== v111 || v113.w !== v108) {
            v8.vertexAttrib4f(v112, v109, v110, v111, v108);
            v113.x = v109;
            v113.y = v110;
            v113.z = v111;
            v113.w = v108;
          }
        }
        v115 = $4.call(this, v2, a0, 0);
        v116 = false;
        v117 = null;
        v118 = 0;
        v119 = false;
        v120 = 0;
        v121 = 0;
        v122 = 1;
        v123 = 0;
        v124 = 5126;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v128 = 0;
        if (v9(v115)) {
          v116 = true;
          v117 = v1.createStream(34962, v115);
          v124 = v117.dtype;
        } else {
          v117 = v1.getBuffer(v115);
          if (v117) {
            v124 = v117.dtype;
          } else if ('constant' in v115) {
            v122 = 2;
            if (typeof v115.constant === 'number') {
              v126 = v115.constant;
              v127 = v128 = v125 = 0;
            } else {
              v126 = v115.constant.length > 0 ? v115.constant[0] : 0;
              v127 = v115.constant.length > 1 ? v115.constant[1] : 0;
              v128 = v115.constant.length > 2 ? v115.constant[2] : 0;
              v125 = v115.constant.length > 3 ? v115.constant[3] : 0;
            }
          } else {
            if (v9(v115.buffer)) {
              v117 = v1.createStream(34962, v115.buffer);
            } else {
              v117 = v1.getBuffer(v115.buffer);
            }
            v124 = 'type' in v115 ? v43[v115.type] : v117.dtype;
            v119 = !!v115.normalized;
            v121 = v115.size | 0;
            v120 = v115.offset | 0;
            v123 = v115.stride | 0;
            v118 = v115.divisor | 0;
          }
        }
        v129 = y.location;
        v130 = v0[v129];
        if (v122 === 1) {
          if (!v130.buffer) {
            v8.enableVertexAttribArray(v129);
          }
          v131 = v121 || 1;
          if (v130.type !== v124 || v130.size !== v131 || v130.buffer !== v117 || v130.normalized !== v119 || v130.offset !== v120 || v130.stride !== v123) {
            v8.bindBuffer(34962, v117.buffer);
            v8.vertexAttribPointer(v129, v131, v124, v119, v123, v120);
            v130.type = v124;
            v130.size = v131;
            v130.buffer = v117;
            v130.normalized = v119;
            v130.offset = v120;
            v130.stride = v123;
          }
          if (v130.divisor !== v118) {
            v97.vertexAttribDivisorANGLE(v129, v118);
            v130.divisor = v118;
          }
        } else {
          if (v130.buffer) {
            v8.disableVertexAttribArray(v129);
            v130.buffer = null;
          }
          if (v130.x !== v126 || v130.y !== v127 || v130.z !== v128 || v130.w !== v125) {
            v8.vertexAttrib4f(v129, v126, v127, v128, v125);
            v130.x = v126;
            v130.y = v127;
            v130.z = v128;
            v130.w = v125;
          }
        }
        v132 = $5.call(this, v2, a0, 0);
        v133 = false;
        v134 = null;
        v135 = 0;
        v136 = false;
        v137 = 0;
        v138 = 0;
        v139 = 1;
        v140 = 0;
        v141 = 5126;
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v145 = 0;
        if (v9(v132)) {
          v133 = true;
          v134 = v1.createStream(34962, v132);
          v141 = v134.dtype;
        } else {
          v134 = v1.getBuffer(v132);
          if (v134) {
            v141 = v134.dtype;
          } else if ('constant' in v132) {
            v139 = 2;
            if (typeof v132.constant === 'number') {
              v143 = v132.constant;
              v144 = v145 = v142 = 0;
            } else {
              v143 = v132.constant.length > 0 ? v132.constant[0] : 0;
              v144 = v132.constant.length > 1 ? v132.constant[1] : 0;
              v145 = v132.constant.length > 2 ? v132.constant[2] : 0;
              v142 = v132.constant.length > 3 ? v132.constant[3] : 0;
            }
          } else {
            if (v9(v132.buffer)) {
              v134 = v1.createStream(34962, v132.buffer);
            } else {
              v134 = v1.getBuffer(v132.buffer);
            }
            v141 = 'type' in v132 ? v43[v132.type] : v134.dtype;
            v136 = !!v132.normalized;
            v138 = v132.size | 0;
            v137 = v132.offset | 0;
            v140 = v132.stride | 0;
            v135 = v132.divisor | 0;
          }
        }
        v146 = xFract.location;
        v147 = v0[v146];
        if (v139 === 1) {
          if (!v147.buffer) {
            v8.enableVertexAttribArray(v146);
          }
          v148 = v138 || 1;
          if (v147.type !== v141 || v147.size !== v148 || v147.buffer !== v134 || v147.normalized !== v136 || v147.offset !== v137 || v147.stride !== v140) {
            v8.bindBuffer(34962, v134.buffer);
            v8.vertexAttribPointer(v146, v148, v141, v136, v140, v137);
            v147.type = v141;
            v147.size = v148;
            v147.buffer = v134;
            v147.normalized = v136;
            v147.offset = v137;
            v147.stride = v140;
          }
          if (v147.divisor !== v135) {
            v97.vertexAttribDivisorANGLE(v146, v135);
            v147.divisor = v135;
          }
        } else {
          if (v147.buffer) {
            v8.disableVertexAttribArray(v146);
            v147.buffer = null;
          }
          if (v147.x !== v143 || v147.y !== v144 || v147.z !== v145 || v147.w !== v142) {
            v8.vertexAttrib4f(v146, v143, v144, v145, v142);
            v147.x = v143;
            v147.y = v144;
            v147.z = v145;
            v147.w = v142;
          }
        }
        v149 = $6.call(this, v2, a0, 0);
        v150 = false;
        v151 = null;
        v152 = 0;
        v153 = false;
        v154 = 0;
        v155 = 0;
        v156 = 1;
        v157 = 0;
        v158 = 5126;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v162 = 0;
        if (v9(v149)) {
          v150 = true;
          v151 = v1.createStream(34962, v149);
          v158 = v151.dtype;
        } else {
          v151 = v1.getBuffer(v149);
          if (v151) {
            v158 = v151.dtype;
          } else if ('constant' in v149) {
            v156 = 2;
            if (typeof v149.constant === 'number') {
              v160 = v149.constant;
              v161 = v162 = v159 = 0;
            } else {
              v160 = v149.constant.length > 0 ? v149.constant[0] : 0;
              v161 = v149.constant.length > 1 ? v149.constant[1] : 0;
              v162 = v149.constant.length > 2 ? v149.constant[2] : 0;
              v159 = v149.constant.length > 3 ? v149.constant[3] : 0;
            }
          } else {
            if (v9(v149.buffer)) {
              v151 = v1.createStream(34962, v149.buffer);
            } else {
              v151 = v1.getBuffer(v149.buffer);
            }
            v158 = 'type' in v149 ? v43[v149.type] : v151.dtype;
            v153 = !!v149.normalized;
            v155 = v149.size | 0;
            v154 = v149.offset | 0;
            v157 = v149.stride | 0;
            v152 = v149.divisor | 0;
          }
        }
        v163 = yFract.location;
        v164 = v0[v163];
        if (v156 === 1) {
          if (!v164.buffer) {
            v8.enableVertexAttribArray(v163);
          }
          v165 = v155 || 1;
          if (v164.type !== v158 || v164.size !== v165 || v164.buffer !== v151 || v164.normalized !== v153 || v164.offset !== v154 || v164.stride !== v157) {
            v8.bindBuffer(34962, v151.buffer);
            v8.vertexAttribPointer(v163, v165, v158, v153, v157, v154);
            v164.type = v158;
            v164.size = v165;
            v164.buffer = v151;
            v164.normalized = v153;
            v164.offset = v154;
            v164.stride = v157;
          }
          if (v164.divisor !== v152) {
            v97.vertexAttribDivisorANGLE(v163, v152);
            v164.divisor = v152;
          }
        } else {
          if (v164.buffer) {
            v8.disableVertexAttribArray(v163);
            v164.buffer = null;
          }
          if (v164.x !== v160 || v164.y !== v161 || v164.z !== v162 || v164.w !== v159) {
            v8.vertexAttrib4f(v163, v160, v161, v162, v159);
            v164.x = v160;
            v164.y = v161;
            v164.z = v162;
            v164.w = v159;
          }
        }
        v166 = $7.call(this, v2, a0, 0);
        v167 = false;
        v168 = null;
        v169 = 0;
        v170 = false;
        v171 = 0;
        v172 = 0;
        v173 = 1;
        v174 = 0;
        v175 = 5126;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v179 = 0;
        if (v9(v166)) {
          v167 = true;
          v168 = v1.createStream(34962, v166);
          v175 = v168.dtype;
        } else {
          v168 = v1.getBuffer(v166);
          if (v168) {
            v175 = v168.dtype;
          } else if ('constant' in v166) {
            v173 = 2;
            if (typeof v166.constant === 'number') {
              v177 = v166.constant;
              v178 = v179 = v176 = 0;
            } else {
              v177 = v166.constant.length > 0 ? v166.constant[0] : 0;
              v178 = v166.constant.length > 1 ? v166.constant[1] : 0;
              v179 = v166.constant.length > 2 ? v166.constant[2] : 0;
              v176 = v166.constant.length > 3 ? v166.constant[3] : 0;
            }
          } else {
            if (v9(v166.buffer)) {
              v168 = v1.createStream(34962, v166.buffer);
            } else {
              v168 = v1.getBuffer(v166.buffer);
            }
            v175 = 'type' in v166 ? v43[v166.type] : v168.dtype;
            v170 = !!v166.normalized;
            v172 = v166.size | 0;
            v171 = v166.offset | 0;
            v174 = v166.stride | 0;
            v169 = v166.divisor | 0;
          }
        }
        v180 = size.location;
        v181 = v0[v180];
        if (v173 === 1) {
          if (!v181.buffer) {
            v8.enableVertexAttribArray(v180);
          }
          v182 = v172 || 1;
          if (v181.type !== v175 || v181.size !== v182 || v181.buffer !== v168 || v181.normalized !== v170 || v181.offset !== v171 || v181.stride !== v174) {
            v8.bindBuffer(34962, v168.buffer);
            v8.vertexAttribPointer(v180, v182, v175, v170, v174, v171);
            v181.type = v175;
            v181.size = v182;
            v181.buffer = v168;
            v181.normalized = v170;
            v181.offset = v171;
            v181.stride = v174;
          }
          if (v181.divisor !== v169) {
            v97.vertexAttribDivisorANGLE(v180, v169);
            v181.divisor = v169;
          }
        } else {
          if (v181.buffer) {
            v8.disableVertexAttribArray(v180);
            v181.buffer = null;
          }
          if (v181.x !== v177 || v181.y !== v178 || v181.z !== v179 || v181.w !== v176) {
            v8.vertexAttrib4f(v180, v177, v178, v179, v176);
            v181.x = v177;
            v181.y = v178;
            v181.z = v179;
            v181.w = v176;
          }
        }
        v183 = $8.call(this, v2, a0, 0);
        v184 = false;
        v185 = null;
        v186 = 0;
        v187 = false;
        v188 = 0;
        v189 = 0;
        v190 = 1;
        v191 = 0;
        v192 = 5126;
        v193 = 0;
        v194 = 0;
        v195 = 0;
        v196 = 0;
        if (v9(v183)) {
          v184 = true;
          v185 = v1.createStream(34962, v183);
          v192 = v185.dtype;
        } else {
          v185 = v1.getBuffer(v183);
          if (v185) {
            v192 = v185.dtype;
          } else if ('constant' in v183) {
            v190 = 2;
            if (typeof v183.constant === 'number') {
              v194 = v183.constant;
              v195 = v196 = v193 = 0;
            } else {
              v194 = v183.constant.length > 0 ? v183.constant[0] : 0;
              v195 = v183.constant.length > 1 ? v183.constant[1] : 0;
              v196 = v183.constant.length > 2 ? v183.constant[2] : 0;
              v193 = v183.constant.length > 3 ? v183.constant[3] : 0;
            }
          } else {
            if (v9(v183.buffer)) {
              v185 = v1.createStream(34962, v183.buffer);
            } else {
              v185 = v1.getBuffer(v183.buffer);
            }
            v192 = 'type' in v183 ? v43[v183.type] : v185.dtype;
            v187 = !!v183.normalized;
            v189 = v183.size | 0;
            v188 = v183.offset | 0;
            v191 = v183.stride | 0;
            v186 = v183.divisor | 0;
          }
        }
        v197 = borderSize.location;
        v198 = v0[v197];
        if (v190 === 1) {
          if (!v198.buffer) {
            v8.enableVertexAttribArray(v197);
          }
          v199 = v189 || 1;
          if (v198.type !== v192 || v198.size !== v199 || v198.buffer !== v185 || v198.normalized !== v187 || v198.offset !== v188 || v198.stride !== v191) {
            v8.bindBuffer(34962, v185.buffer);
            v8.vertexAttribPointer(v197, v199, v192, v187, v191, v188);
            v198.type = v192;
            v198.size = v199;
            v198.buffer = v185;
            v198.normalized = v187;
            v198.offset = v188;
            v198.stride = v191;
          }
          if (v198.divisor !== v186) {
            v97.vertexAttribDivisorANGLE(v197, v186);
            v198.divisor = v186;
          }
        } else {
          if (v198.buffer) {
            v8.disableVertexAttribArray(v197);
            v198.buffer = null;
          }
          if (v198.x !== v194 || v198.y !== v195 || v198.z !== v196 || v198.w !== v193) {
            v8.vertexAttrib4f(v197, v194, v195, v196, v193);
            v198.x = v194;
            v198.y = v195;
            v198.z = v196;
            v198.w = v193;
          }
        }
        v200 = $9.call(this, v2, a0, 0);
        v201 = false;
        v202 = null;
        v203 = 0;
        v204 = false;
        v205 = 0;
        v206 = 0;
        v207 = 1;
        v208 = 0;
        v209 = 5126;
        v210 = 0;
        v211 = 0;
        v212 = 0;
        v213 = 0;
        if (v9(v200)) {
          v201 = true;
          v202 = v1.createStream(34962, v200);
          v209 = v202.dtype;
        } else {
          v202 = v1.getBuffer(v200);
          if (v202) {
            v209 = v202.dtype;
          } else if ('constant' in v200) {
            v207 = 2;
            if (typeof v200.constant === 'number') {
              v211 = v200.constant;
              v212 = v213 = v210 = 0;
            } else {
              v211 = v200.constant.length > 0 ? v200.constant[0] : 0;
              v212 = v200.constant.length > 1 ? v200.constant[1] : 0;
              v213 = v200.constant.length > 2 ? v200.constant[2] : 0;
              v210 = v200.constant.length > 3 ? v200.constant[3] : 0;
            }
          } else {
            if (v9(v200.buffer)) {
              v202 = v1.createStream(34962, v200.buffer);
            } else {
              v202 = v1.getBuffer(v200.buffer);
            }
            v209 = 'type' in v200 ? v43[v200.type] : v202.dtype;
            v204 = !!v200.normalized;
            v206 = v200.size | 0;
            v205 = v200.offset | 0;
            v208 = v200.stride | 0;
            v203 = v200.divisor | 0;
          }
        }
        v214 = colorId.location;
        v215 = v0[v214];
        if (v207 === 1) {
          if (!v215.buffer) {
            v8.enableVertexAttribArray(v214);
          }
          v216 = v206 || 4;
          if (v215.type !== v209 || v215.size !== v216 || v215.buffer !== v202 || v215.normalized !== v204 || v215.offset !== v205 || v215.stride !== v208) {
            v8.bindBuffer(34962, v202.buffer);
            v8.vertexAttribPointer(v214, v216, v209, v204, v208, v205);
            v215.type = v209;
            v215.size = v216;
            v215.buffer = v202;
            v215.normalized = v204;
            v215.offset = v205;
            v215.stride = v208;
          }
          if (v215.divisor !== v203) {
            v97.vertexAttribDivisorANGLE(v214, v203);
            v215.divisor = v203;
          }
        } else {
          if (v215.buffer) {
            v8.disableVertexAttribArray(v214);
            v215.buffer = null;
          }
          if (v215.x !== v211 || v215.y !== v212 || v215.z !== v213 || v215.w !== v210) {
            v8.vertexAttrib4f(v214, v211, v212, v213, v210);
            v215.x = v211;
            v215.y = v212;
            v215.z = v213;
            v215.w = v210;
          }
        }
        v217 = $10.call(this, v2, a0, 0);
        v218 = false;
        v219 = null;
        v220 = 0;
        v221 = false;
        v222 = 0;
        v223 = 0;
        v224 = 1;
        v225 = 0;
        v226 = 5126;
        v227 = 0;
        v228 = 0;
        v229 = 0;
        v230 = 0;
        if (v9(v217)) {
          v218 = true;
          v219 = v1.createStream(34962, v217);
          v226 = v219.dtype;
        } else {
          v219 = v1.getBuffer(v217);
          if (v219) {
            v226 = v219.dtype;
          } else if ('constant' in v217) {
            v224 = 2;
            if (typeof v217.constant === 'number') {
              v228 = v217.constant;
              v229 = v230 = v227 = 0;
            } else {
              v228 = v217.constant.length > 0 ? v217.constant[0] : 0;
              v229 = v217.constant.length > 1 ? v217.constant[1] : 0;
              v230 = v217.constant.length > 2 ? v217.constant[2] : 0;
              v227 = v217.constant.length > 3 ? v217.constant[3] : 0;
            }
          } else {
            if (v9(v217.buffer)) {
              v219 = v1.createStream(34962, v217.buffer);
            } else {
              v219 = v1.getBuffer(v217.buffer);
            }
            v226 = 'type' in v217 ? v43[v217.type] : v219.dtype;
            v221 = !!v217.normalized;
            v223 = v217.size | 0;
            v222 = v217.offset | 0;
            v225 = v217.stride | 0;
            v220 = v217.divisor | 0;
          }
        }
        v231 = borderColorId.location;
        v232 = v0[v231];
        if (v224 === 1) {
          if (!v232.buffer) {
            v8.enableVertexAttribArray(v231);
          }
          v233 = v223 || 4;
          if (v232.type !== v226 || v232.size !== v233 || v232.buffer !== v219 || v232.normalized !== v221 || v232.offset !== v222 || v232.stride !== v225) {
            v8.bindBuffer(34962, v219.buffer);
            v8.vertexAttribPointer(v231, v233, v226, v221, v225, v222);
            v232.type = v226;
            v232.size = v233;
            v232.buffer = v219;
            v232.normalized = v221;
            v232.offset = v222;
            v232.stride = v225;
          }
          if (v232.divisor !== v220) {
            v97.vertexAttribDivisorANGLE(v231, v220);
            v232.divisor = v220;
          }
        } else {
          if (v232.buffer) {
            v8.disableVertexAttribArray(v231);
            v232.buffer = null;
          }
          if (v232.x !== v228 || v232.y !== v229 || v232.z !== v230 || v232.w !== v227) {
            v8.vertexAttrib4f(v231, v228, v229, v230, v227);
            v232.x = v228;
            v232.y = v229;
            v232.z = v230;
            v232.w = v227;
          }
        }
        v234 = $11.call(this, v2, a0, 0);
        v235 = false;
        v236 = null;
        v237 = 0;
        v238 = false;
        v239 = 0;
        v240 = 0;
        v241 = 1;
        v242 = 0;
        v243 = 5126;
        v244 = 0;
        v245 = 0;
        v246 = 0;
        v247 = 0;
        if (v9(v234)) {
          v235 = true;
          v236 = v1.createStream(34962, v234);
          v243 = v236.dtype;
        } else {
          v236 = v1.getBuffer(v234);
          if (v236) {
            v243 = v236.dtype;
          } else if ('constant' in v234) {
            v241 = 2;
            if (typeof v234.constant === 'number') {
              v245 = v234.constant;
              v246 = v247 = v244 = 0;
            } else {
              v245 = v234.constant.length > 0 ? v234.constant[0] : 0;
              v246 = v234.constant.length > 1 ? v234.constant[1] : 0;
              v247 = v234.constant.length > 2 ? v234.constant[2] : 0;
              v244 = v234.constant.length > 3 ? v234.constant[3] : 0;
            }
          } else {
            if (v9(v234.buffer)) {
              v236 = v1.createStream(34962, v234.buffer);
            } else {
              v236 = v1.getBuffer(v234.buffer);
            }
            v243 = 'type' in v234 ? v43[v234.type] : v236.dtype;
            v238 = !!v234.normalized;
            v240 = v234.size | 0;
            v239 = v234.offset | 0;
            v242 = v234.stride | 0;
            v237 = v234.divisor | 0;
          }
        }
        v248 = isActive.location;
        v249 = v0[v248];
        if (v241 === 1) {
          if (!v249.buffer) {
            v8.enableVertexAttribArray(v248);
          }
          v250 = v240 || 1;
          if (v249.type !== v243 || v249.size !== v250 || v249.buffer !== v236 || v249.normalized !== v238 || v249.offset !== v239 || v249.stride !== v242) {
            v8.bindBuffer(34962, v236.buffer);
            v8.vertexAttribPointer(v248, v250, v243, v238, v242, v239);
            v249.type = v243;
            v249.size = v250;
            v249.buffer = v236;
            v249.normalized = v238;
            v249.offset = v239;
            v249.stride = v242;
          }
          if (v249.divisor !== v237) {
            v97.vertexAttribDivisorANGLE(v248, v237);
            v249.divisor = v237;
          }
        } else {
          if (v249.buffer) {
            v8.disableVertexAttribArray(v248);
            v249.buffer = null;
          }
          if (v249.x !== v245 || v249.y !== v246 || v249.z !== v247 || v249.w !== v244) {
            v8.vertexAttrib4f(v248, v245, v246, v247, v244);
            v249.x = v245;
            v249.y = v246;
            v249.z = v247;
            v249.w = v244;
          }
        }
        v8.uniform1i(constPointSize.location, false);
        v251 = v2['pixelRatio'];
        v8.uniform1f(pixelRatio.location, v251);
        v252 = $12.call(this, v2, a0, 0);
        v253 = v252[0];
        v254 = v252[1];
        v8.uniform2f(paletteSize.location, v253, v254);
        v255 = a0['scale'];
        v256 = v255[0];
        v257 = v255[1];
        v8.uniform2f(scale.location, v256, v257);
        v258 = a0['scaleFract'];
        v259 = v258[0];
        v260 = v258[1];
        v8.uniform2f(scaleFract.location, v259, v260);
        v261 = a0['translate'];
        v262 = v261[0];
        v263 = v261[1];
        v8.uniform2f(translate.location, v262, v263);
        v264 = a0['translateFract'];
        v265 = v264[0];
        v266 = v264[1];
        v8.uniform2f(translateFract.location, v265, v266);
        v267 = a0['opacity'];
        v8.uniform1f(opacity.location, v267);
        v8.uniform1i(paletteTexture.location, $13.bind());
        v268 = a0['elements'];
        v269 = null;
        v270 = v9(v268);
        if (v270) {
          v269 = v5.createStream(v268);
        } else {
          v269 = v5.getElements(v268);
        }
        if (v269) v8.bindBuffer(34963, v269.buffer.buffer);
        v271 = a0['offset'];
        v272 = a0['count'];
        if (v272) {
          v273 = v4.instances;
          if (v273 > 0) {
            if (v269) {
              v97.drawElementsInstancedANGLE(0, v272, v269.type, v271 << (v269.type - 5121 >> 1), v273);
            } else {
              v97.drawArraysInstancedANGLE(0, v271, v272, v273);
            }
          } else if (v273 < 0) {
            if (v269) {
              v8.drawElements(0, v272, v269.type, v271 << (v269.type - 5121 >> 1));
            } else {
              v8.drawArrays(0, v271, v272);
            }
          }
          v3.dirty = true;
          v15.setVAO(null);
          v2.viewportWidth = v88;
          v2.viewportHeight = v89;
          if (v95) {
            $1.cpuTime += performance.now() - v96;
          }
          if (v99) {
            v1.destroyStream(v100);
          }
          if (v116) {
            v1.destroyStream(v117);
          }
          if (v133) {
            v1.destroyStream(v134);
          }
          if (v150) {
            v1.destroyStream(v151);
          }
          if (v167) {
            v1.destroyStream(v168);
          }
          if (v184) {
            v1.destroyStream(v185);
          }
          if (v201) {
            v1.destroyStream(v202);
          }
          if (v218) {
            v1.destroyStream(v219);
          }
          if (v235) {
            v1.destroyStream(v236);
          }
          $13.unbind();
          if (v270) {
            v5.destroyStream(v269);
          }
        }
      },
      'scope': function (a0, a1, a2) {
        var v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570;
        v274 = a0['viewport'];
        v275 = v274.x | 0;
        v276 = v274.y | 0;
        v277 = 'width' in v274 ? v274.width | 0 : v2.framebufferWidth - v275;
        v278 = 'height' in v274 ? v274.height | 0 : v2.framebufferHeight - v276;
        v279 = v2.viewportWidth;
        v2.viewportWidth = v277;
        v280 = v2.viewportHeight;
        v2.viewportHeight = v278;
        v281 = v38[0];
        v38[0] = v275;
        v282 = v38[1];
        v38[1] = v276;
        v283 = v38[2];
        v38[2] = v277;
        v284 = v38[3];
        v38[3] = v278;
        v285 = v16[0];
        v16[0] = 0;
        v286 = v16[1];
        v16[1] = 0;
        v287 = v16[2];
        v16[2] = 0;
        v288 = v16[3];
        v16[3] = 1;
        v289 = v10.blend_enable;
        v10.blend_enable = true;
        v290 = v20[0];
        v20[0] = 770;
        v291 = v20[1];
        v20[1] = 771;
        v292 = v20[2];
        v20[2] = 773;
        v293 = v20[3];
        v20[3] = 1;
        v294 = v10.depth_enable;
        v10.depth_enable = false;
        v295 = a0['viewport'];
        v296 = v295.x | 0;
        v297 = v295.y | 0;
        v298 = 'width' in v295 ? v295.width | 0 : v2.framebufferWidth - v296;
        v299 = 'height' in v295 ? v295.height | 0 : v2.framebufferHeight - v297;
        v300 = v30[0];
        v30[0] = v296;
        v301 = v30[1];
        v30[1] = v297;
        v302 = v30[2];
        v30[2] = v298;
        v303 = v30[3];
        v30[3] = v299;
        v304 = v10.scissor_enable;
        v10.scissor_enable = true;
        v305 = v10.stencil_enable;
        v10.stencil_enable = false;
        v306 = v3.profile;
        if (v306) {
          v307 = performance.now();
          $1.count++;
        }
        v308 = a0['elements'];
        v309 = null;
        v310 = v9(v308);
        if (v310) {
          v309 = v5.createStream(v308);
        } else {
          v309 = v5.getElements(v308);
        }
        v311 = v4.elements;
        v4.elements = v309;
        v312 = a0['offset'];
        v313 = v4.offset;
        v4.offset = v312;
        v314 = a0['count'];
        v315 = v4.count;
        v4.count = v314;
        v316 = v4.primitive;
        v4.primitive = 0;
        v317 = v14[45];
        v14[45] = false;
        v318 = a0['markerTexture'];
        v319 = v14[48];
        v14[48] = v318;
        v320 = a0['opacity'];
        v321 = v14[10];
        v14[10] = v320;
        v322 = $14.call(this, v2, a0, a2);
        v323 = v14[46];
        v14[46] = v322;
        v324 = v14[47];
        v14[47] = $15;
        v325 = v2['pixelRatio'];
        v326 = v14[34];
        v14[34] = v325;
        v327 = a0['scale'];
        v328 = v14[6];
        v14[6] = v327;
        v329 = a0['scaleFract'];
        v330 = v14[7];
        v14[7] = v329;
        v331 = a0['translate'];
        v332 = v14[8];
        v14[8] = v331;
        v333 = a0['translateFract'];
        v334 = v14[9];
        v14[9] = v333;
        v335 = $16.call(this, v2, a0, a2);
        v336 = false;
        v337 = null;
        v338 = 0;
        v339 = false;
        v340 = 0;
        v341 = 0;
        v342 = 1;
        v343 = 0;
        v344 = 5126;
        v345 = 0;
        v346 = 0;
        v347 = 0;
        v348 = 0;
        if (v9(v335)) {
          v336 = true;
          v337 = v1.createStream(34962, v335);
          v344 = v337.dtype;
        } else {
          v337 = v1.getBuffer(v335);
          if (v337) {
            v344 = v337.dtype;
          } else if ('constant' in v335) {
            v342 = 2;
            if (typeof v335.constant === 'number') {
              v346 = v335.constant;
              v347 = v348 = v345 = 0;
            } else {
              v346 = v335.constant.length > 0 ? v335.constant[0] : 0;
              v347 = v335.constant.length > 1 ? v335.constant[1] : 0;
              v348 = v335.constant.length > 2 ? v335.constant[2] : 0;
              v345 = v335.constant.length > 3 ? v335.constant[3] : 0;
            }
          } else {
            if (v9(v335.buffer)) {
              v337 = v1.createStream(34962, v335.buffer);
            } else {
              v337 = v1.getBuffer(v335.buffer);
            }
            v344 = 'type' in v335 ? v43[v335.type] : v337.dtype;
            v339 = !!v335.normalized;
            v341 = v335.size | 0;
            v340 = v335.offset | 0;
            v343 = v335.stride | 0;
            v338 = v335.divisor | 0;
          }
        }
        v349 = $17.buffer;
        $17.buffer = v337;
        v350 = $17.divisor;
        $17.divisor = v338;
        v351 = $17.normalized;
        $17.normalized = v339;
        v352 = $17.offset;
        $17.offset = v340;
        v353 = $17.size;
        $17.size = v341;
        v354 = $17.state;
        $17.state = v342;
        v355 = $17.stride;
        $17.stride = v343;
        v356 = $17.type;
        $17.type = v344;
        v357 = $17.w;
        $17.w = v345;
        v358 = $17.x;
        $17.x = v346;
        v359 = $17.y;
        $17.y = v347;
        v360 = $17.z;
        $17.z = v348;
        v361 = $18.call(this, v2, a0, a2);
        v362 = false;
        v363 = null;
        v364 = 0;
        v365 = false;
        v366 = 0;
        v367 = 0;
        v368 = 1;
        v369 = 0;
        v370 = 5126;
        v371 = 0;
        v372 = 0;
        v373 = 0;
        v374 = 0;
        if (v9(v361)) {
          v362 = true;
          v363 = v1.createStream(34962, v361);
          v370 = v363.dtype;
        } else {
          v363 = v1.getBuffer(v361);
          if (v363) {
            v370 = v363.dtype;
          } else if ('constant' in v361) {
            v368 = 2;
            if (typeof v361.constant === 'number') {
              v372 = v361.constant;
              v373 = v374 = v371 = 0;
            } else {
              v372 = v361.constant.length > 0 ? v361.constant[0] : 0;
              v373 = v361.constant.length > 1 ? v361.constant[1] : 0;
              v374 = v361.constant.length > 2 ? v361.constant[2] : 0;
              v371 = v361.constant.length > 3 ? v361.constant[3] : 0;
            }
          } else {
            if (v9(v361.buffer)) {
              v363 = v1.createStream(34962, v361.buffer);
            } else {
              v363 = v1.getBuffer(v361.buffer);
            }
            v370 = 'type' in v361 ? v43[v361.type] : v363.dtype;
            v365 = !!v361.normalized;
            v367 = v361.size | 0;
            v366 = v361.offset | 0;
            v369 = v361.stride | 0;
            v364 = v361.divisor | 0;
          }
        }
        v375 = $19.buffer;
        $19.buffer = v363;
        v376 = $19.divisor;
        $19.divisor = v364;
        v377 = $19.normalized;
        $19.normalized = v365;
        v378 = $19.offset;
        $19.offset = v366;
        v379 = $19.size;
        $19.size = v367;
        v380 = $19.state;
        $19.state = v368;
        v381 = $19.stride;
        $19.stride = v369;
        v382 = $19.type;
        $19.type = v370;
        v383 = $19.w;
        $19.w = v371;
        v384 = $19.x;
        $19.x = v372;
        v385 = $19.y;
        $19.y = v373;
        v386 = $19.z;
        $19.z = v374;
        v387 = $20.call(this, v2, a0, a2);
        v388 = false;
        v389 = null;
        v390 = 0;
        v391 = false;
        v392 = 0;
        v393 = 0;
        v394 = 1;
        v395 = 0;
        v396 = 5126;
        v397 = 0;
        v398 = 0;
        v399 = 0;
        v400 = 0;
        if (v9(v387)) {
          v388 = true;
          v389 = v1.createStream(34962, v387);
          v396 = v389.dtype;
        } else {
          v389 = v1.getBuffer(v387);
          if (v389) {
            v396 = v389.dtype;
          } else if ('constant' in v387) {
            v394 = 2;
            if (typeof v387.constant === 'number') {
              v398 = v387.constant;
              v399 = v400 = v397 = 0;
            } else {
              v398 = v387.constant.length > 0 ? v387.constant[0] : 0;
              v399 = v387.constant.length > 1 ? v387.constant[1] : 0;
              v400 = v387.constant.length > 2 ? v387.constant[2] : 0;
              v397 = v387.constant.length > 3 ? v387.constant[3] : 0;
            }
          } else {
            if (v9(v387.buffer)) {
              v389 = v1.createStream(34962, v387.buffer);
            } else {
              v389 = v1.getBuffer(v387.buffer);
            }
            v396 = 'type' in v387 ? v43[v387.type] : v389.dtype;
            v391 = !!v387.normalized;
            v393 = v387.size | 0;
            v392 = v387.offset | 0;
            v395 = v387.stride | 0;
            v390 = v387.divisor | 0;
          }
        }
        v401 = $21.buffer;
        $21.buffer = v389;
        v402 = $21.divisor;
        $21.divisor = v390;
        v403 = $21.normalized;
        $21.normalized = v391;
        v404 = $21.offset;
        $21.offset = v392;
        v405 = $21.size;
        $21.size = v393;
        v406 = $21.state;
        $21.state = v394;
        v407 = $21.stride;
        $21.stride = v395;
        v408 = $21.type;
        $21.type = v396;
        v409 = $21.w;
        $21.w = v397;
        v410 = $21.x;
        $21.x = v398;
        v411 = $21.y;
        $21.y = v399;
        v412 = $21.z;
        $21.z = v400;
        v413 = $22.call(this, v2, a0, a2);
        v414 = false;
        v415 = null;
        v416 = 0;
        v417 = false;
        v418 = 0;
        v419 = 0;
        v420 = 1;
        v421 = 0;
        v422 = 5126;
        v423 = 0;
        v424 = 0;
        v425 = 0;
        v426 = 0;
        if (v9(v413)) {
          v414 = true;
          v415 = v1.createStream(34962, v413);
          v422 = v415.dtype;
        } else {
          v415 = v1.getBuffer(v413);
          if (v415) {
            v422 = v415.dtype;
          } else if ('constant' in v413) {
            v420 = 2;
            if (typeof v413.constant === 'number') {
              v424 = v413.constant;
              v425 = v426 = v423 = 0;
            } else {
              v424 = v413.constant.length > 0 ? v413.constant[0] : 0;
              v425 = v413.constant.length > 1 ? v413.constant[1] : 0;
              v426 = v413.constant.length > 2 ? v413.constant[2] : 0;
              v423 = v413.constant.length > 3 ? v413.constant[3] : 0;
            }
          } else {
            if (v9(v413.buffer)) {
              v415 = v1.createStream(34962, v413.buffer);
            } else {
              v415 = v1.getBuffer(v413.buffer);
            }
            v422 = 'type' in v413 ? v43[v413.type] : v415.dtype;
            v417 = !!v413.normalized;
            v419 = v413.size | 0;
            v418 = v413.offset | 0;
            v421 = v413.stride | 0;
            v416 = v413.divisor | 0;
          }
        }
        v427 = $23.buffer;
        $23.buffer = v415;
        v428 = $23.divisor;
        $23.divisor = v416;
        v429 = $23.normalized;
        $23.normalized = v417;
        v430 = $23.offset;
        $23.offset = v418;
        v431 = $23.size;
        $23.size = v419;
        v432 = $23.state;
        $23.state = v420;
        v433 = $23.stride;
        $23.stride = v421;
        v434 = $23.type;
        $23.type = v422;
        v435 = $23.w;
        $23.w = v423;
        v436 = $23.x;
        $23.x = v424;
        v437 = $23.y;
        $23.y = v425;
        v438 = $23.z;
        $23.z = v426;
        v439 = $24.call(this, v2, a0, a2);
        v440 = false;
        v441 = null;
        v442 = 0;
        v443 = false;
        v444 = 0;
        v445 = 0;
        v446 = 1;
        v447 = 0;
        v448 = 5126;
        v449 = 0;
        v450 = 0;
        v451 = 0;
        v452 = 0;
        if (v9(v439)) {
          v440 = true;
          v441 = v1.createStream(34962, v439);
          v448 = v441.dtype;
        } else {
          v441 = v1.getBuffer(v439);
          if (v441) {
            v448 = v441.dtype;
          } else if ('constant' in v439) {
            v446 = 2;
            if (typeof v439.constant === 'number') {
              v450 = v439.constant;
              v451 = v452 = v449 = 0;
            } else {
              v450 = v439.constant.length > 0 ? v439.constant[0] : 0;
              v451 = v439.constant.length > 1 ? v439.constant[1] : 0;
              v452 = v439.constant.length > 2 ? v439.constant[2] : 0;
              v449 = v439.constant.length > 3 ? v439.constant[3] : 0;
            }
          } else {
            if (v9(v439.buffer)) {
              v441 = v1.createStream(34962, v439.buffer);
            } else {
              v441 = v1.getBuffer(v439.buffer);
            }
            v448 = 'type' in v439 ? v43[v439.type] : v441.dtype;
            v443 = !!v439.normalized;
            v445 = v439.size | 0;
            v444 = v439.offset | 0;
            v447 = v439.stride | 0;
            v442 = v439.divisor | 0;
          }
        }
        v453 = $25.buffer;
        $25.buffer = v441;
        v454 = $25.divisor;
        $25.divisor = v442;
        v455 = $25.normalized;
        $25.normalized = v443;
        v456 = $25.offset;
        $25.offset = v444;
        v457 = $25.size;
        $25.size = v445;
        v458 = $25.state;
        $25.state = v446;
        v459 = $25.stride;
        $25.stride = v447;
        v460 = $25.type;
        $25.type = v448;
        v461 = $25.w;
        $25.w = v449;
        v462 = $25.x;
        $25.x = v450;
        v463 = $25.y;
        $25.y = v451;
        v464 = $25.z;
        $25.z = v452;
        v465 = $26.call(this, v2, a0, a2);
        v466 = false;
        v467 = null;
        v468 = 0;
        v469 = false;
        v470 = 0;
        v471 = 0;
        v472 = 1;
        v473 = 0;
        v474 = 5126;
        v475 = 0;
        v476 = 0;
        v477 = 0;
        v478 = 0;
        if (v9(v465)) {
          v466 = true;
          v467 = v1.createStream(34962, v465);
          v474 = v467.dtype;
        } else {
          v467 = v1.getBuffer(v465);
          if (v467) {
            v474 = v467.dtype;
          } else if ('constant' in v465) {
            v472 = 2;
            if (typeof v465.constant === 'number') {
              v476 = v465.constant;
              v477 = v478 = v475 = 0;
            } else {
              v476 = v465.constant.length > 0 ? v465.constant[0] : 0;
              v477 = v465.constant.length > 1 ? v465.constant[1] : 0;
              v478 = v465.constant.length > 2 ? v465.constant[2] : 0;
              v475 = v465.constant.length > 3 ? v465.constant[3] : 0;
            }
          } else {
            if (v9(v465.buffer)) {
              v467 = v1.createStream(34962, v465.buffer);
            } else {
              v467 = v1.getBuffer(v465.buffer);
            }
            v474 = 'type' in v465 ? v43[v465.type] : v467.dtype;
            v469 = !!v465.normalized;
            v471 = v465.size | 0;
            v470 = v465.offset | 0;
            v473 = v465.stride | 0;
            v468 = v465.divisor | 0;
          }
        }
        v479 = $27.buffer;
        $27.buffer = v467;
        v480 = $27.divisor;
        $27.divisor = v468;
        v481 = $27.normalized;
        $27.normalized = v469;
        v482 = $27.offset;
        $27.offset = v470;
        v483 = $27.size;
        $27.size = v471;
        v484 = $27.state;
        $27.state = v472;
        v485 = $27.stride;
        $27.stride = v473;
        v486 = $27.type;
        $27.type = v474;
        v487 = $27.w;
        $27.w = v475;
        v488 = $27.x;
        $27.x = v476;
        v489 = $27.y;
        $27.y = v477;
        v490 = $27.z;
        $27.z = v478;
        v491 = $28.call(this, v2, a0, a2);
        v492 = false;
        v493 = null;
        v494 = 0;
        v495 = false;
        v496 = 0;
        v497 = 0;
        v498 = 1;
        v499 = 0;
        v500 = 5126;
        v501 = 0;
        v502 = 0;
        v503 = 0;
        v504 = 0;
        if (v9(v491)) {
          v492 = true;
          v493 = v1.createStream(34962, v491);
          v500 = v493.dtype;
        } else {
          v493 = v1.getBuffer(v491);
          if (v493) {
            v500 = v493.dtype;
          } else if ('constant' in v491) {
            v498 = 2;
            if (typeof v491.constant === 'number') {
              v502 = v491.constant;
              v503 = v504 = v501 = 0;
            } else {
              v502 = v491.constant.length > 0 ? v491.constant[0] : 0;
              v503 = v491.constant.length > 1 ? v491.constant[1] : 0;
              v504 = v491.constant.length > 2 ? v491.constant[2] : 0;
              v501 = v491.constant.length > 3 ? v491.constant[3] : 0;
            }
          } else {
            if (v9(v491.buffer)) {
              v493 = v1.createStream(34962, v491.buffer);
            } else {
              v493 = v1.getBuffer(v491.buffer);
            }
            v500 = 'type' in v491 ? v43[v491.type] : v493.dtype;
            v495 = !!v491.normalized;
            v497 = v491.size | 0;
            v496 = v491.offset | 0;
            v499 = v491.stride | 0;
            v494 = v491.divisor | 0;
          }
        }
        v505 = $29.buffer;
        $29.buffer = v493;
        v506 = $29.divisor;
        $29.divisor = v494;
        v507 = $29.normalized;
        $29.normalized = v495;
        v508 = $29.offset;
        $29.offset = v496;
        v509 = $29.size;
        $29.size = v497;
        v510 = $29.state;
        $29.state = v498;
        v511 = $29.stride;
        $29.stride = v499;
        v512 = $29.type;
        $29.type = v500;
        v513 = $29.w;
        $29.w = v501;
        v514 = $29.x;
        $29.x = v502;
        v515 = $29.y;
        $29.y = v503;
        v516 = $29.z;
        $29.z = v504;
        v517 = $30.call(this, v2, a0, a2);
        v518 = false;
        v519 = null;
        v520 = 0;
        v521 = false;
        v522 = 0;
        v523 = 0;
        v524 = 1;
        v525 = 0;
        v526 = 5126;
        v527 = 0;
        v528 = 0;
        v529 = 0;
        v530 = 0;
        if (v9(v517)) {
          v518 = true;
          v519 = v1.createStream(34962, v517);
          v526 = v519.dtype;
        } else {
          v519 = v1.getBuffer(v517);
          if (v519) {
            v526 = v519.dtype;
          } else if ('constant' in v517) {
            v524 = 2;
            if (typeof v517.constant === 'number') {
              v528 = v517.constant;
              v529 = v530 = v527 = 0;
            } else {
              v528 = v517.constant.length > 0 ? v517.constant[0] : 0;
              v529 = v517.constant.length > 1 ? v517.constant[1] : 0;
              v530 = v517.constant.length > 2 ? v517.constant[2] : 0;
              v527 = v517.constant.length > 3 ? v517.constant[3] : 0;
            }
          } else {
            if (v9(v517.buffer)) {
              v519 = v1.createStream(34962, v517.buffer);
            } else {
              v519 = v1.getBuffer(v517.buffer);
            }
            v526 = 'type' in v517 ? v43[v517.type] : v519.dtype;
            v521 = !!v517.normalized;
            v523 = v517.size | 0;
            v522 = v517.offset | 0;
            v525 = v517.stride | 0;
            v520 = v517.divisor | 0;
          }
        }
        v531 = $31.buffer;
        $31.buffer = v519;
        v532 = $31.divisor;
        $31.divisor = v520;
        v533 = $31.normalized;
        $31.normalized = v521;
        v534 = $31.offset;
        $31.offset = v522;
        v535 = $31.size;
        $31.size = v523;
        v536 = $31.state;
        $31.state = v524;
        v537 = $31.stride;
        $31.stride = v525;
        v538 = $31.type;
        $31.type = v526;
        v539 = $31.w;
        $31.w = v527;
        v540 = $31.x;
        $31.x = v528;
        v541 = $31.y;
        $31.y = v529;
        v542 = $31.z;
        $31.z = v530;
        v543 = $32.call(this, v2, a0, a2);
        v544 = false;
        v545 = null;
        v546 = 0;
        v547 = false;
        v548 = 0;
        v549 = 0;
        v550 = 1;
        v551 = 0;
        v552 = 5126;
        v553 = 0;
        v554 = 0;
        v555 = 0;
        v556 = 0;
        if (v9(v543)) {
          v544 = true;
          v545 = v1.createStream(34962, v543);
          v552 = v545.dtype;
        } else {
          v545 = v1.getBuffer(v543);
          if (v545) {
            v552 = v545.dtype;
          } else if ('constant' in v543) {
            v550 = 2;
            if (typeof v543.constant === 'number') {
              v554 = v543.constant;
              v555 = v556 = v553 = 0;
            } else {
              v554 = v543.constant.length > 0 ? v543.constant[0] : 0;
              v555 = v543.constant.length > 1 ? v543.constant[1] : 0;
              v556 = v543.constant.length > 2 ? v543.constant[2] : 0;
              v553 = v543.constant.length > 3 ? v543.constant[3] : 0;
            }
          } else {
            if (v9(v543.buffer)) {
              v545 = v1.createStream(34962, v543.buffer);
            } else {
              v545 = v1.getBuffer(v543.buffer);
            }
            v552 = 'type' in v543 ? v43[v543.type] : v545.dtype;
            v547 = !!v543.normalized;
            v549 = v543.size | 0;
            v548 = v543.offset | 0;
            v551 = v543.stride | 0;
            v546 = v543.divisor | 0;
          }
        }
        v557 = $33.buffer;
        $33.buffer = v545;
        v558 = $33.divisor;
        $33.divisor = v546;
        v559 = $33.normalized;
        $33.normalized = v547;
        v560 = $33.offset;
        $33.offset = v548;
        v561 = $33.size;
        $33.size = v549;
        v562 = $33.state;
        $33.state = v550;
        v563 = $33.stride;
        $33.stride = v551;
        v564 = $33.type;
        $33.type = v552;
        v565 = $33.w;
        $33.w = v553;
        v566 = $33.x;
        $33.x = v554;
        v567 = $33.y;
        $33.y = v555;
        v568 = $33.z;
        $33.z = v556;
        v569 = v11.vert;
        v11.vert = 59;
        v570 = v11.frag;
        v11.frag = 58;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v279;
        v2.viewportHeight = v280;
        v38[0] = v281;
        v38[1] = v282;
        v38[2] = v283;
        v38[3] = v284;
        v16[0] = v285;
        v16[1] = v286;
        v16[2] = v287;
        v16[3] = v288;
        v10.blend_enable = v289;
        v20[0] = v290;
        v20[1] = v291;
        v20[2] = v292;
        v20[3] = v293;
        v10.depth_enable = v294;
        v30[0] = v300;
        v30[1] = v301;
        v30[2] = v302;
        v30[3] = v303;
        v10.scissor_enable = v304;
        v10.stencil_enable = v305;
        if (v306) {
          $1.cpuTime += performance.now() - v307;
        }
        if (v310) {
          v5.destroyStream(v309);
        }
        v4.elements = v311;
        v4.offset = v313;
        v4.count = v315;
        v4.primitive = v316;
        v14[45] = v317;
        v14[48] = v319;
        v14[10] = v321;
        v14[46] = v323;
        v14[47] = v324;
        v14[34] = v326;
        v14[6] = v328;
        v14[7] = v330;
        v14[8] = v332;
        v14[9] = v334;
        if (v336) {
          v1.destroyStream(v337);
        }
        $17.buffer = v349;
        $17.divisor = v350;
        $17.normalized = v351;
        $17.offset = v352;
        $17.size = v353;
        $17.state = v354;
        $17.stride = v355;
        $17.type = v356;
        $17.w = v357;
        $17.x = v358;
        $17.y = v359;
        $17.z = v360;
        if (v362) {
          v1.destroyStream(v363);
        }
        $19.buffer = v375;
        $19.divisor = v376;
        $19.normalized = v377;
        $19.offset = v378;
        $19.size = v379;
        $19.state = v380;
        $19.stride = v381;
        $19.type = v382;
        $19.w = v383;
        $19.x = v384;
        $19.y = v385;
        $19.z = v386;
        if (v388) {
          v1.destroyStream(v389);
        }
        $21.buffer = v401;
        $21.divisor = v402;
        $21.normalized = v403;
        $21.offset = v404;
        $21.size = v405;
        $21.state = v406;
        $21.stride = v407;
        $21.type = v408;
        $21.w = v409;
        $21.x = v410;
        $21.y = v411;
        $21.z = v412;
        if (v414) {
          v1.destroyStream(v415);
        }
        $23.buffer = v427;
        $23.divisor = v428;
        $23.normalized = v429;
        $23.offset = v430;
        $23.size = v431;
        $23.state = v432;
        $23.stride = v433;
        $23.type = v434;
        $23.w = v435;
        $23.x = v436;
        $23.y = v437;
        $23.z = v438;
        if (v440) {
          v1.destroyStream(v441);
        }
        $25.buffer = v453;
        $25.divisor = v454;
        $25.normalized = v455;
        $25.offset = v456;
        $25.size = v457;
        $25.state = v458;
        $25.stride = v459;
        $25.type = v460;
        $25.w = v461;
        $25.x = v462;
        $25.y = v463;
        $25.z = v464;
        if (v466) {
          v1.destroyStream(v467);
        }
        $27.buffer = v479;
        $27.divisor = v480;
        $27.normalized = v481;
        $27.offset = v482;
        $27.size = v483;
        $27.state = v484;
        $27.stride = v485;
        $27.type = v486;
        $27.w = v487;
        $27.x = v488;
        $27.y = v489;
        $27.z = v490;
        if (v492) {
          v1.destroyStream(v493);
        }
        $29.buffer = v505;
        $29.divisor = v506;
        $29.normalized = v507;
        $29.offset = v508;
        $29.size = v509;
        $29.state = v510;
        $29.stride = v511;
        $29.type = v512;
        $29.w = v513;
        $29.x = v514;
        $29.y = v515;
        $29.z = v516;
        if (v518) {
          v1.destroyStream(v519);
        }
        $31.buffer = v531;
        $31.divisor = v532;
        $31.normalized = v533;
        $31.offset = v534;
        $31.size = v535;
        $31.state = v536;
        $31.stride = v537;
        $31.type = v538;
        $31.w = v539;
        $31.x = v540;
        $31.y = v541;
        $31.z = v542;
        if (v544) {
          v1.destroyStream(v545);
        }
        $33.buffer = v557;
        $33.divisor = v558;
        $33.normalized = v559;
        $33.offset = v560;
        $33.size = v561;
        $33.state = v562;
        $33.stride = v563;
        $33.type = v564;
        $33.w = v565;
        $33.x = v566;
        $33.y = v567;
        $33.z = v568;
        v11.vert = v569;
        v11.frag = v570;
        v3.dirty = true;
      }

    };
  },
  '$22,align,atlas,atlasDim,atlasSize,baseline,char,charOffset,charStep,color,em,opacity,position,positionOffset,scale,translate,viewport,width': function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, align, atlas, atlasDim, atlasSize, baseline, char, charOffset, charStep, color, em, opacity, position, positionOffset, scale, translate, viewport, width) {
    'use strict';

    var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48;
    v0 = $0.attributes;
    v1 = $0.buffer;
    v2 = $0.context;
    v3 = $0.current;
    v4 = $0.draw;
    v5 = $0.elements;
    v6 = $0.extensions;
    v7 = $0.framebuffer;
    v8 = $0.gl;
    v9 = $0.isBufferArgs;
    v10 = $0.next;
    v11 = $0.shader;
    v12 = $0.strings;
    v13 = $0.timer;
    v14 = $0.uniforms;
    v15 = $0.vao;
    v16 = v10.blend_color;
    v17 = v3.blend_color;
    v18 = v10.blend_equation;
    v19 = v3.blend_equation;
    v20 = v10.blend_func;
    v21 = v3.blend_func;
    v22 = v10.colorMask;
    v23 = v3.colorMask;
    v24 = v10.depth_range;
    v25 = v3.depth_range;
    v26 = v10.polygonOffset_offset;
    v27 = v3.polygonOffset_offset;
    v28 = v10.sample_coverage;
    v29 = v3.sample_coverage;
    v30 = v10.scissor_box;
    v31 = v3.scissor_box;
    v32 = v10.stencil_func;
    v33 = v3.stencil_func;
    v34 = v10.stencil_opBack;
    v35 = v3.stencil_opBack;
    v36 = v10.stencil_opFront;
    v37 = v3.stencil_opFront;
    v38 = v10.viewport;
    v39 = v3.viewport;
    v40 = {
      'add': 32774, 'subtract': 32778, 'reverse subtract': 32779
    };
    v41 = {
      '0': 0, '1': 1, 'zero': 0, 'one': 1, 'src color': 768, 'one minus src color': 769, 'src alpha': 770, 'one minus src alpha': 771, 'dst color': 774, 'one minus dst color': 775, 'dst alpha': 772, 'one minus dst alpha': 773, 'constant color': 32769, 'one minus constant color': 32770, 'constant alpha': 32771, 'one minus constant alpha': 32772, 'src alpha saturate': 776
    };
    v42 = {
      'never': 512, 'less': 513, '<': 513, 'equal': 514, '=': 514, '==': 514, '===': 514, 'lequal': 515, '<=': 515, 'greater': 516, '>': 516, 'notequal': 517, '!=': 517, '!==': 517, 'gequal': 518, '>=': 518, 'always': 519
    };
    v43 = {
      'int8': 5120, 'int16': 5122, 'int32': 5124, 'uint8': 5121, 'uint16': 5123, 'uint32': 5125, 'float': 5126, 'float32': 5126
    };
    v44 = {
      'cw': 2304, 'ccw': 2305
    };
    v45 = {
      'points': 0, 'point': 0, 'lines': 1, 'line': 1, 'triangles': 4, 'triangle': 4, 'line loop': 2, 'line strip': 3, 'triangle strip': 5, 'triangle fan': 6
    };
    v46 = {
      '0': 0, 'zero': 0, 'keep': 7680, 'replace': 7681, 'increment': 7682, 'decrement': 7683, 'increment wrap': 34055, 'decrement wrap': 34056, 'invert': 5386
    };
    v47 = {};
    v47.offset = 4;
    v47.stride = 8;
    v48 = {};
    v48.offset = 0;
    v48.stride = 8;
    return {
      'batch': function (a0, a1) {
        var v365, v366, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417;
        v365 = v6.angle_instanced_arrays;
        v366 = v7.next;
        if (v366 !== v7.cur) {
          if (v366) {
            v8.bindFramebuffer(36160, v366.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v366;
        }
        if (v3.dirty) {
          var v367, v368, v369, v370, v371, v372, v373, v374, v375, v376, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v403, v404, v405;
          v367 = v10.dither;
          if (v367 !== v3.dither) {
            if (v367) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v367;
          }
          v368 = v18[0];
          v369 = v18[1];
          if (v368 !== v19[0] || v369 !== v19[1]) {
            v8.blendEquationSeparate(v368, v369);
            v19[0] = v368;
            v19[1] = v369;
          }
          v370 = v10.depth_func;
          if (v370 !== v3.depth_func) {
            v8.depthFunc(v370);
            v3.depth_func = v370;
          }
          v371 = v24[0];
          v372 = v24[1];
          if (v371 !== v25[0] || v372 !== v25[1]) {
            v8.depthRange(v371, v372);
            v25[0] = v371;
            v25[1] = v372;
          }
          v373 = v10.depth_mask;
          if (v373 !== v3.depth_mask) {
            v8.depthMask(v373);
            v3.depth_mask = v373;
          }
          v374 = v22[0];
          v375 = v22[1];
          v376 = v22[2];
          v377 = v22[3];
          if (v374 !== v23[0] || v375 !== v23[1] || v376 !== v23[2] || v377 !== v23[3]) {
            v8.colorMask(v374, v375, v376, v377);
            v23[0] = v374;
            v23[1] = v375;
            v23[2] = v376;
            v23[3] = v377;
          }
          v378 = v10.cull_enable;
          if (v378 !== v3.cull_enable) {
            if (v378) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v378;
          }
          v379 = v10.cull_face;
          if (v379 !== v3.cull_face) {
            v8.cullFace(v379);
            v3.cull_face = v379;
          }
          v380 = v10.frontFace;
          if (v380 !== v3.frontFace) {
            v8.frontFace(v380);
            v3.frontFace = v380;
          }
          v381 = v10.lineWidth;
          if (v381 !== v3.lineWidth) {
            v8.lineWidth(v381);
            v3.lineWidth = v381;
          }
          v382 = v10.polygonOffset_enable;
          if (v382 !== v3.polygonOffset_enable) {
            if (v382) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v382;
          }
          v383 = v26[0];
          v384 = v26[1];
          if (v383 !== v27[0] || v384 !== v27[1]) {
            v8.polygonOffset(v383, v384);
            v27[0] = v383;
            v27[1] = v384;
          }
          v385 = v10.sample_alpha;
          if (v385 !== v3.sample_alpha) {
            if (v385) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v385;
          }
          v386 = v10.sample_enable;
          if (v386 !== v3.sample_enable) {
            if (v386) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v386;
          }
          v387 = v28[0];
          v388 = v28[1];
          if (v387 !== v29[0] || v388 !== v29[1]) {
            v8.sampleCoverage(v387, v388);
            v29[0] = v387;
            v29[1] = v388;
          }
          v389 = v10.stencil_mask;
          if (v389 !== v3.stencil_mask) {
            v8.stencilMask(v389);
            v3.stencil_mask = v389;
          }
          v390 = v32[0];
          v391 = v32[1];
          v392 = v32[2];
          if (v390 !== v33[0] || v391 !== v33[1] || v392 !== v33[2]) {
            v8.stencilFunc(v390, v391, v392);
            v33[0] = v390;
            v33[1] = v391;
            v33[2] = v392;
          }
          v393 = v36[0];
          v394 = v36[1];
          v395 = v36[2];
          v396 = v36[3];
          if (v393 !== v37[0] || v394 !== v37[1] || v395 !== v37[2] || v396 !== v37[3]) {
            v8.stencilOpSeparate(v393, v394, v395, v396);
            v37[0] = v393;
            v37[1] = v394;
            v37[2] = v395;
            v37[3] = v396;
          }
          v397 = v34[0];
          v398 = v34[1];
          v399 = v34[2];
          v400 = v34[3];
          if (v397 !== v35[0] || v398 !== v35[1] || v399 !== v35[2] || v400 !== v35[3]) {
            v8.stencilOpSeparate(v397, v398, v399, v400);
            v35[0] = v397;
            v35[1] = v398;
            v35[2] = v399;
            v35[3] = v400;
          }
          v401 = v10.scissor_enable;
          if (v401 !== v3.scissor_enable) {
            if (v401) {
              v8.enable(3089);
            } else {
              v8.disable(3089);
            }
            v3.scissor_enable = v401;
          }
          v402 = v30[0];
          v403 = v30[1];
          v404 = v30[2];
          v405 = v30[3];
          if (v402 !== v31[0] || v403 !== v31[1] || v404 !== v31[2] || v405 !== v31[3]) {
            v8.scissor(v402, v403, v404, v405);
            v31[0] = v402;
            v31[1] = v403;
            v31[2] = v404;
            v31[3] = v405;
          }
        }
        v406 = this['viewport'];
        v407 = v406.x | 0;
        v408 = v406.y | 0;
        v409 = 'width' in v406 ? v406.width | 0 : v2.framebufferWidth - v407;
        v410 = 'height' in v406 ? v406.height | 0 : v2.framebufferHeight - v408;
        v411 = v2.viewportWidth;
        v2.viewportWidth = v409;
        v412 = v2.viewportHeight;
        v2.viewportHeight = v410;
        v8.viewport(v407, v408, v409, v410);
        v39[0] = v407;
        v39[1] = v408;
        v39[2] = v409;
        v39[3] = v410;
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.disable(2960);
        v3.stencil_enable = false;
        v413 = v3.profile;
        if (v413) {
          v414 = performance.now();
          $1.count += a1;
        }
        v8.useProgram($17.program);
        v415 = v6.angle_instanced_arrays;
        var v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v430, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v484, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v533, v536;
        v15.setVAO(null);
        v418 = this['sizeBuffer'];
        v48.buffer = v418;
        v419 = false;
        v420 = null;
        v421 = 0;
        v422 = false;
        v423 = 0;
        v424 = 0;
        v425 = 1;
        v426 = 0;
        v427 = 5126;
        v428 = 0;
        v429 = 0;
        v430 = 0;
        v431 = 0;
        if (v9(v48)) {
          v419 = true;
          v420 = v1.createStream(34962, v48);
          v427 = v420.dtype;
        } else {
          v420 = v1.getBuffer(v48);
          if (v420) {
            v427 = v420.dtype;
          } else if ('constant' in v48) {
            v425 = 2;
            if (typeof v48.constant === 'number') {
              v429 = v48.constant;
              v430 = v431 = v428 = 0;
            } else {
              v429 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v430 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v431 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v428 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v420 = v1.createStream(34962, v48.buffer);
            } else {
              v420 = v1.getBuffer(v48.buffer);
            }
            v427 = 'type' in v48 ? v43[v48.type] : v420.dtype;
            v422 = !!v48.normalized;
            v424 = v48.size | 0;
            v423 = v48.offset | 0;
            v426 = v48.stride | 0;
            v421 = v48.divisor | 0;
          }
        }
        v432 = width.location;
        v433 = v0[v432];
        if (v425 === 1) {
          if (!v433.buffer) {
            v8.enableVertexAttribArray(v432);
          }
          v434 = v424 || 1;
          if (v433.type !== v427 || v433.size !== v434 || v433.buffer !== v420 || v433.normalized !== v422 || v433.offset !== v423 || v433.stride !== v426) {
            v8.bindBuffer(34962, v420.buffer);
            v8.vertexAttribPointer(v432, v434, v427, v422, v426, v423);
            v433.type = v427;
            v433.size = v434;
            v433.buffer = v420;
            v433.normalized = v422;
            v433.offset = v423;
            v433.stride = v426;
          }
          if (v433.divisor !== v421) {
            v415.vertexAttribDivisorANGLE(v432, v421);
            v433.divisor = v421;
          }
        } else {
          if (v433.buffer) {
            v8.disableVertexAttribArray(v432);
            v433.buffer = null;
          }
          if (v433.x !== v429 || v433.y !== v430 || v433.z !== v431 || v433.w !== v428) {
            v8.vertexAttrib4f(v432, v429, v430, v431, v428);
            v433.x = v429;
            v433.y = v430;
            v433.z = v431;
            v433.w = v428;
          }
        }
        v435 = this['sizeBuffer'];
        v47.buffer = v435;
        v436 = false;
        v437 = null;
        v438 = 0;
        v439 = false;
        v440 = 0;
        v441 = 0;
        v442 = 1;
        v443 = 0;
        v444 = 5126;
        v445 = 0;
        v446 = 0;
        v447 = 0;
        v448 = 0;
        if (v9(v47)) {
          v436 = true;
          v437 = v1.createStream(34962, v47);
          v444 = v437.dtype;
        } else {
          v437 = v1.getBuffer(v47);
          if (v437) {
            v444 = v437.dtype;
          } else if ('constant' in v47) {
            v442 = 2;
            if (typeof v47.constant === 'number') {
              v446 = v47.constant;
              v447 = v448 = v445 = 0;
            } else {
              v446 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v447 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v448 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v445 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v437 = v1.createStream(34962, v47.buffer);
            } else {
              v437 = v1.getBuffer(v47.buffer);
            }
            v444 = 'type' in v47 ? v43[v47.type] : v437.dtype;
            v439 = !!v47.normalized;
            v441 = v47.size | 0;
            v440 = v47.offset | 0;
            v443 = v47.stride | 0;
            v438 = v47.divisor | 0;
          }
        }
        v449 = charOffset.location;
        v450 = v0[v449];
        if (v442 === 1) {
          if (!v450.buffer) {
            v8.enableVertexAttribArray(v449);
          }
          v451 = v441 || 1;
          if (v450.type !== v444 || v450.size !== v451 || v450.buffer !== v437 || v450.normalized !== v439 || v450.offset !== v440 || v450.stride !== v443) {
            v8.bindBuffer(34962, v437.buffer);
            v8.vertexAttribPointer(v449, v451, v444, v439, v443, v440);
            v450.type = v444;
            v450.size = v451;
            v450.buffer = v437;
            v450.normalized = v439;
            v450.offset = v440;
            v450.stride = v443;
          }
          if (v450.divisor !== v438) {
            v415.vertexAttribDivisorANGLE(v449, v438);
            v450.divisor = v438;
          }
        } else {
          if (v450.buffer) {
            v8.disableVertexAttribArray(v449);
            v450.buffer = null;
          }
          if (v450.x !== v446 || v450.y !== v447 || v450.z !== v448 || v450.w !== v445) {
            v8.vertexAttrib4f(v449, v446, v447, v448, v445);
            v450.x = v446;
            v450.y = v447;
            v450.z = v448;
            v450.w = v445;
          }
        }
        v452 = this['charBuffer'];
        v453 = false;
        v454 = null;
        v455 = 0;
        v456 = false;
        v457 = 0;
        v458 = 0;
        v459 = 1;
        v460 = 0;
        v461 = 5126;
        v462 = 0;
        v463 = 0;
        v464 = 0;
        v465 = 0;
        if (v9(v452)) {
          v453 = true;
          v454 = v1.createStream(34962, v452);
          v461 = v454.dtype;
        } else {
          v454 = v1.getBuffer(v452);
          if (v454) {
            v461 = v454.dtype;
          } else if ('constant' in v452) {
            v459 = 2;
            if (typeof v452.constant === 'number') {
              v463 = v452.constant;
              v464 = v465 = v462 = 0;
            } else {
              v463 = v452.constant.length > 0 ? v452.constant[0] : 0;
              v464 = v452.constant.length > 1 ? v452.constant[1] : 0;
              v465 = v452.constant.length > 2 ? v452.constant[2] : 0;
              v462 = v452.constant.length > 3 ? v452.constant[3] : 0;
            }
          } else {
            if (v9(v452.buffer)) {
              v454 = v1.createStream(34962, v452.buffer);
            } else {
              v454 = v1.getBuffer(v452.buffer);
            }
            v461 = 'type' in v452 ? v43[v452.type] : v454.dtype;
            v456 = !!v452.normalized;
            v458 = v452.size | 0;
            v457 = v452.offset | 0;
            v460 = v452.stride | 0;
            v455 = v452.divisor | 0;
          }
        }
        v466 = char.location;
        v467 = v0[v466];
        if (v459 === 1) {
          if (!v467.buffer) {
            v8.enableVertexAttribArray(v466);
          }
          v468 = v458 || 1;
          if (v467.type !== v461 || v467.size !== v468 || v467.buffer !== v454 || v467.normalized !== v456 || v467.offset !== v457 || v467.stride !== v460) {
            v8.bindBuffer(34962, v454.buffer);
            v8.vertexAttribPointer(v466, v468, v461, v456, v460, v457);
            v467.type = v461;
            v467.size = v468;
            v467.buffer = v454;
            v467.normalized = v456;
            v467.offset = v457;
            v467.stride = v460;
          }
          if (v467.divisor !== v455) {
            v415.vertexAttribDivisorANGLE(v466, v455);
            v467.divisor = v455;
          }
        } else {
          if (v467.buffer) {
            v8.disableVertexAttribArray(v466);
            v467.buffer = null;
          }
          if (v467.x !== v463 || v467.y !== v464 || v467.z !== v465 || v467.w !== v462) {
            v8.vertexAttrib4f(v466, v463, v464, v465, v462);
            v467.x = v463;
            v467.y = v464;
            v467.z = v465;
            v467.w = v462;
          }
        }
        v469 = this['position'];
        v470 = false;
        v471 = null;
        v472 = 0;
        v473 = false;
        v474 = 0;
        v475 = 0;
        v476 = 1;
        v477 = 0;
        v478 = 5126;
        v479 = 0;
        v480 = 0;
        v481 = 0;
        v482 = 0;
        if (v9(v469)) {
          v470 = true;
          v471 = v1.createStream(34962, v469);
          v478 = v471.dtype;
        } else {
          v471 = v1.getBuffer(v469);
          if (v471) {
            v478 = v471.dtype;
          } else if ('constant' in v469) {
            v476 = 2;
            if (typeof v469.constant === 'number') {
              v480 = v469.constant;
              v481 = v482 = v479 = 0;
            } else {
              v480 = v469.constant.length > 0 ? v469.constant[0] : 0;
              v481 = v469.constant.length > 1 ? v469.constant[1] : 0;
              v482 = v469.constant.length > 2 ? v469.constant[2] : 0;
              v479 = v469.constant.length > 3 ? v469.constant[3] : 0;
            }
          } else {
            if (v9(v469.buffer)) {
              v471 = v1.createStream(34962, v469.buffer);
            } else {
              v471 = v1.getBuffer(v469.buffer);
            }
            v478 = 'type' in v469 ? v43[v469.type] : v471.dtype;
            v473 = !!v469.normalized;
            v475 = v469.size | 0;
            v474 = v469.offset | 0;
            v477 = v469.stride | 0;
            v472 = v469.divisor | 0;
          }
        }
        v483 = position.location;
        v484 = v0[v483];
        if (v476 === 1) {
          if (!v484.buffer) {
            v8.enableVertexAttribArray(v483);
          }
          v485 = v475 || 2;
          if (v484.type !== v478 || v484.size !== v485 || v484.buffer !== v471 || v484.normalized !== v473 || v484.offset !== v474 || v484.stride !== v477) {
            v8.bindBuffer(34962, v471.buffer);
            v8.vertexAttribPointer(v483, v485, v478, v473, v477, v474);
            v484.type = v478;
            v484.size = v485;
            v484.buffer = v471;
            v484.normalized = v473;
            v484.offset = v474;
            v484.stride = v477;
          }
          if (v484.divisor !== v472) {
            v415.vertexAttribDivisorANGLE(v483, v472);
            v484.divisor = v472;
          }
        } else {
          if (v484.buffer) {
            v8.disableVertexAttribArray(v483);
            v484.buffer = null;
          }
          if (v484.x !== v480 || v484.y !== v481 || v484.z !== v482 || v484.w !== v479) {
            v8.vertexAttrib4f(v483, v480, v481, v482, v479);
            v484.x = v480;
            v484.y = v481;
            v484.z = v482;
            v484.w = v479;
          }
        }
        v486 = this['viewportArray'];
        v487 = v486[0];
        v488 = v486[1];
        v489 = v486[2];
        v490 = v486[3];
        v8.uniform4f(viewport.location, v487, v488, v489, v490);
        v491 = this['scale'];
        v492 = v491[0];
        v493 = v491[1];
        v8.uniform2f(scale.location, v492, v493);
        v494 = this['translate'];
        v495 = v494[0];
        v496 = v494[1];
        v8.uniform2f(translate.location, v495, v496);
        v533 = v4.elements;
        if (v533) {
          v8.bindBuffer(34963, v533.buffer.buffer);
        } else if (v15.currentVAO) {
          v533 = v5.getElements(v15.currentVAO.elements);
          if (v533) v8.bindBuffer(34963, v533.buffer.buffer);
        }
        v536 = v4.instances;
        for (v416 = 0; v416 < a1; ++v416) {
          v417 = a0[v416];
          var v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v511, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v524, v525, v526, v527, v528, v529, v530, v531, v532, v534, v535;
          v497 = $18.call(this, v2, v417, v416);
          if (!v416 || v498 !== v497) {
            v498 = v497;
            v8.uniform1f(charStep.location, v497);
          }
          v499 = $19.call(this, v2, v417, v416);
          if (!v416 || v500 !== v499) {
            v500 = v499;
            v8.uniform1f(em.location, v499);
          }
          v501 = v417['align'];
          if (!v416 || v502 !== v501) {
            v502 = v501;
            v8.uniform1f(align.location, v501);
          }
          v503 = v417['baseline'];
          if (!v416 || v504 !== v503) {
            v504 = v503;
            v8.uniform1f(baseline.location, v503);
          }
          v505 = v417['color'];
          v506 = v505[0];
          v508 = v505[1];
          v510 = v505[2];
          v512 = v505[3];
          if (!v416 || v507 !== v506 || v509 !== v508 || v511 !== v510 || v513 !== v512) {
            v507 = v506;
            v509 = v508;
            v511 = v510;
            v513 = v512;
            v8.uniform4f(color.location, v506, v508, v510, v512);
          }
          v514 = $20.call(this, v2, v417, v416);
          v515 = v514[0];
          v517 = v514[1];
          if (!v416 || v516 !== v515 || v518 !== v517) {
            v516 = v515;
            v518 = v517;
            v8.uniform2f(atlasSize.location, v515, v517);
          }
          v519 = $21.call(this, v2, v417, v416);
          v520 = v519[0];
          v522 = v519[1];
          if (!v416 || v521 !== v520 || v523 !== v522) {
            v521 = v520;
            v523 = v522;
            v8.uniform2f(atlasDim.location, v520, v522);
          }
          v524 = v417['positionOffset'];
          v525 = v524[0];
          v527 = v524[1];
          if (!v416 || v526 !== v525 || v528 !== v527) {
            v526 = v525;
            v528 = v527;
            v8.uniform2f(positionOffset.location, v525, v527);
          }
          v529 = v417['opacity'];
          if (!v416 || v530 !== v529) {
            v530 = v529;
            v8.uniform1f(opacity.location, v529);
          }
          v531 = $22.call(this, v2, v417, v416);
          if (v531 && v531._reglType === 'framebuffer') {
            v531 = v531.color[0];
          }
          v532 = v531._texture;
          v8.uniform1i(atlas.location, v532.bind());
          v534 = v417['offset'];
          v535 = v417['count'];
          if (v535) {
            if (v536 > 0) {
              if (v533) {
                v415.drawElementsInstancedANGLE(0, v535, v533.type, v534 << (v533.type - 5121 >> 1), v536);
              } else {
                v415.drawArraysInstancedANGLE(0, v534, v535, v536);
              }
            } else if (v536 < 0) {
              if (v533) {
                v8.drawElements(0, v535, v533.type, v534 << (v533.type - 5121 >> 1));
              } else {
                v8.drawArrays(0, v534, v535);
              }
            }
            v532.unbind();
          }
        }
        if (v419) {
          v1.destroyStream(v420);
        }
        if (v436) {
          v1.destroyStream(v437);
        }
        if (v453) {
          v1.destroyStream(v454);
        }
        if (v470) {
          v1.destroyStream(v471);
        }
        v3.dirty = true;
        v15.setVAO(null);
        v2.viewportWidth = v411;
        v2.viewportHeight = v412;
        if (v413) {
          $1.cpuTime += performance.now() - v414;
        }
      },
      'draw': function (a0) {
        var v49, v50, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203;
        v49 = v6.angle_instanced_arrays;
        v50 = v7.next;
        if (v50 !== v7.cur) {
          if (v50) {
            v8.bindFramebuffer(36160, v50.framebuffer);
          } else {
            v8.bindFramebuffer(36160, null);
          }
          v7.cur = v50;
        }
        if (v3.dirty) {
          var v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89;
          v51 = v10.dither;
          if (v51 !== v3.dither) {
            if (v51) {
              v8.enable(3024);
            } else {
              v8.disable(3024);
            }
            v3.dither = v51;
          }
          v52 = v18[0];
          v53 = v18[1];
          if (v52 !== v19[0] || v53 !== v19[1]) {
            v8.blendEquationSeparate(v52, v53);
            v19[0] = v52;
            v19[1] = v53;
          }
          v54 = v10.depth_func;
          if (v54 !== v3.depth_func) {
            v8.depthFunc(v54);
            v3.depth_func = v54;
          }
          v55 = v24[0];
          v56 = v24[1];
          if (v55 !== v25[0] || v56 !== v25[1]) {
            v8.depthRange(v55, v56);
            v25[0] = v55;
            v25[1] = v56;
          }
          v57 = v10.depth_mask;
          if (v57 !== v3.depth_mask) {
            v8.depthMask(v57);
            v3.depth_mask = v57;
          }
          v58 = v22[0];
          v59 = v22[1];
          v60 = v22[2];
          v61 = v22[3];
          if (v58 !== v23[0] || v59 !== v23[1] || v60 !== v23[2] || v61 !== v23[3]) {
            v8.colorMask(v58, v59, v60, v61);
            v23[0] = v58;
            v23[1] = v59;
            v23[2] = v60;
            v23[3] = v61;
          }
          v62 = v10.cull_enable;
          if (v62 !== v3.cull_enable) {
            if (v62) {
              v8.enable(2884);
            } else {
              v8.disable(2884);
            }
            v3.cull_enable = v62;
          }
          v63 = v10.cull_face;
          if (v63 !== v3.cull_face) {
            v8.cullFace(v63);
            v3.cull_face = v63;
          }
          v64 = v10.frontFace;
          if (v64 !== v3.frontFace) {
            v8.frontFace(v64);
            v3.frontFace = v64;
          }
          v65 = v10.lineWidth;
          if (v65 !== v3.lineWidth) {
            v8.lineWidth(v65);
            v3.lineWidth = v65;
          }
          v66 = v10.polygonOffset_enable;
          if (v66 !== v3.polygonOffset_enable) {
            if (v66) {
              v8.enable(32823);
            } else {
              v8.disable(32823);
            }
            v3.polygonOffset_enable = v66;
          }
          v67 = v26[0];
          v68 = v26[1];
          if (v67 !== v27[0] || v68 !== v27[1]) {
            v8.polygonOffset(v67, v68);
            v27[0] = v67;
            v27[1] = v68;
          }
          v69 = v10.sample_alpha;
          if (v69 !== v3.sample_alpha) {
            if (v69) {
              v8.enable(32926);
            } else {
              v8.disable(32926);
            }
            v3.sample_alpha = v69;
          }
          v70 = v10.sample_enable;
          if (v70 !== v3.sample_enable) {
            if (v70) {
              v8.enable(32928);
            } else {
              v8.disable(32928);
            }
            v3.sample_enable = v70;
          }
          v71 = v28[0];
          v72 = v28[1];
          if (v71 !== v29[0] || v72 !== v29[1]) {
            v8.sampleCoverage(v71, v72);
            v29[0] = v71;
            v29[1] = v72;
          }
          v73 = v10.stencil_mask;
          if (v73 !== v3.stencil_mask) {
            v8.stencilMask(v73);
            v3.stencil_mask = v73;
          }
          v74 = v32[0];
          v75 = v32[1];
          v76 = v32[2];
          if (v74 !== v33[0] || v75 !== v33[1] || v76 !== v33[2]) {
            v8.stencilFunc(v74, v75, v76);
            v33[0] = v74;
            v33[1] = v75;
            v33[2] = v76;
          }
          v77 = v36[0];
          v78 = v36[1];
          v79 = v36[2];
          v80 = v36[3];
          if (v77 !== v37[0] || v78 !== v37[1] || v79 !== v37[2] || v80 !== v37[3]) {
            v8.stencilOpSeparate(v77, v78, v79, v80);
            v37[0] = v77;
            v37[1] = v78;
            v37[2] = v79;
            v37[3] = v80;
          }
          v81 = v34[0];
          v82 = v34[1];
          v83 = v34[2];
          v84 = v34[3];
          if (v81 !== v35[0] || v82 !== v35[1] || v83 !== v35[2] || v84 !== v35[3]) {
            v8.stencilOpSeparate(v81, v82, v83, v84);
            v35[0] = v81;
            v35[1] = v82;
            v35[2] = v83;
            v35[3] = v84;
          }
          v85 = v10.scissor_enable;
          if (v85 !== v3.scissor_enable) {
            if (v85) {
              v8.enable(3089);
            } else {
              v8.disable(3089);
            }
            v3.scissor_enable = v85;
          }
          v86 = v30[0];
          v87 = v30[1];
          v88 = v30[2];
          v89 = v30[3];
          if (v86 !== v31[0] || v87 !== v31[1] || v88 !== v31[2] || v89 !== v31[3]) {
            v8.scissor(v86, v87, v88, v89);
            v31[0] = v86;
            v31[1] = v87;
            v31[2] = v88;
            v31[3] = v89;
          }
        }
        v90 = this['viewport'];
        v91 = v90.x | 0;
        v92 = v90.y | 0;
        v93 = 'width' in v90 ? v90.width | 0 : v2.framebufferWidth - v91;
        v94 = 'height' in v90 ? v90.height | 0 : v2.framebufferHeight - v92;
        v95 = v2.viewportWidth;
        v2.viewportWidth = v93;
        v96 = v2.viewportHeight;
        v2.viewportHeight = v94;
        v8.viewport(v91, v92, v93, v94);
        v39[0] = v91;
        v39[1] = v92;
        v39[2] = v93;
        v39[3] = v94;
        v8.blendColor(0, 0, 0, 1);
        v17[0] = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 1;
        v8.enable(3042);
        v3.blend_enable = true;
        v8.blendFuncSeparate(770, 771, 773, 1);
        v21[0] = 770;
        v21[1] = 771;
        v21[2] = 773;
        v21[3] = 1;
        v8.disable(2929);
        v3.depth_enable = false;
        v8.disable(2960);
        v3.stencil_enable = false;
        v97 = v3.profile;
        if (v97) {
          v98 = performance.now();
          $1.count++;
        }
        v8.useProgram($2.program);
        v99 = v6.angle_instanced_arrays;
        v15.setVAO(null);
        v100 = this['sizeBuffer'];
        v48.buffer = v100;
        v101 = false;
        v102 = null;
        v103 = 0;
        v104 = false;
        v105 = 0;
        v106 = 0;
        v107 = 1;
        v108 = 0;
        v109 = 5126;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v113 = 0;
        if (v9(v48)) {
          v101 = true;
          v102 = v1.createStream(34962, v48);
          v109 = v102.dtype;
        } else {
          v102 = v1.getBuffer(v48);
          if (v102) {
            v109 = v102.dtype;
          } else if ('constant' in v48) {
            v107 = 2;
            if (typeof v48.constant === 'number') {
              v111 = v48.constant;
              v112 = v113 = v110 = 0;
            } else {
              v111 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v112 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v113 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v110 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v102 = v1.createStream(34962, v48.buffer);
            } else {
              v102 = v1.getBuffer(v48.buffer);
            }
            v109 = 'type' in v48 ? v43[v48.type] : v102.dtype;
            v104 = !!v48.normalized;
            v106 = v48.size | 0;
            v105 = v48.offset | 0;
            v108 = v48.stride | 0;
            v103 = v48.divisor | 0;
          }
        }
        v114 = width.location;
        v115 = v0[v114];
        if (v107 === 1) {
          if (!v115.buffer) {
            v8.enableVertexAttribArray(v114);
          }
          v116 = v106 || 1;
          if (v115.type !== v109 || v115.size !== v116 || v115.buffer !== v102 || v115.normalized !== v104 || v115.offset !== v105 || v115.stride !== v108) {
            v8.bindBuffer(34962, v102.buffer);
            v8.vertexAttribPointer(v114, v116, v109, v104, v108, v105);
            v115.type = v109;
            v115.size = v116;
            v115.buffer = v102;
            v115.normalized = v104;
            v115.offset = v105;
            v115.stride = v108;
          }
          if (v115.divisor !== v103) {
            v99.vertexAttribDivisorANGLE(v114, v103);
            v115.divisor = v103;
          }
        } else {
          if (v115.buffer) {
            v8.disableVertexAttribArray(v114);
            v115.buffer = null;
          }
          if (v115.x !== v111 || v115.y !== v112 || v115.z !== v113 || v115.w !== v110) {
            v8.vertexAttrib4f(v114, v111, v112, v113, v110);
            v115.x = v111;
            v115.y = v112;
            v115.z = v113;
            v115.w = v110;
          }
        }
        v117 = this['sizeBuffer'];
        v47.buffer = v117;
        v118 = false;
        v119 = null;
        v120 = 0;
        v121 = false;
        v122 = 0;
        v123 = 0;
        v124 = 1;
        v125 = 0;
        v126 = 5126;
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v130 = 0;
        if (v9(v47)) {
          v118 = true;
          v119 = v1.createStream(34962, v47);
          v126 = v119.dtype;
        } else {
          v119 = v1.getBuffer(v47);
          if (v119) {
            v126 = v119.dtype;
          } else if ('constant' in v47) {
            v124 = 2;
            if (typeof v47.constant === 'number') {
              v128 = v47.constant;
              v129 = v130 = v127 = 0;
            } else {
              v128 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v129 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v130 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v127 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v119 = v1.createStream(34962, v47.buffer);
            } else {
              v119 = v1.getBuffer(v47.buffer);
            }
            v126 = 'type' in v47 ? v43[v47.type] : v119.dtype;
            v121 = !!v47.normalized;
            v123 = v47.size | 0;
            v122 = v47.offset | 0;
            v125 = v47.stride | 0;
            v120 = v47.divisor | 0;
          }
        }
        v131 = charOffset.location;
        v132 = v0[v131];
        if (v124 === 1) {
          if (!v132.buffer) {
            v8.enableVertexAttribArray(v131);
          }
          v133 = v123 || 1;
          if (v132.type !== v126 || v132.size !== v133 || v132.buffer !== v119 || v132.normalized !== v121 || v132.offset !== v122 || v132.stride !== v125) {
            v8.bindBuffer(34962, v119.buffer);
            v8.vertexAttribPointer(v131, v133, v126, v121, v125, v122);
            v132.type = v126;
            v132.size = v133;
            v132.buffer = v119;
            v132.normalized = v121;
            v132.offset = v122;
            v132.stride = v125;
          }
          if (v132.divisor !== v120) {
            v99.vertexAttribDivisorANGLE(v131, v120);
            v132.divisor = v120;
          }
        } else {
          if (v132.buffer) {
            v8.disableVertexAttribArray(v131);
            v132.buffer = null;
          }
          if (v132.x !== v128 || v132.y !== v129 || v132.z !== v130 || v132.w !== v127) {
            v8.vertexAttrib4f(v131, v128, v129, v130, v127);
            v132.x = v128;
            v132.y = v129;
            v132.z = v130;
            v132.w = v127;
          }
        }
        v134 = this['charBuffer'];
        v135 = false;
        v136 = null;
        v137 = 0;
        v138 = false;
        v139 = 0;
        v140 = 0;
        v141 = 1;
        v142 = 0;
        v143 = 5126;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = 0;
        if (v9(v134)) {
          v135 = true;
          v136 = v1.createStream(34962, v134);
          v143 = v136.dtype;
        } else {
          v136 = v1.getBuffer(v134);
          if (v136) {
            v143 = v136.dtype;
          } else if ('constant' in v134) {
            v141 = 2;
            if (typeof v134.constant === 'number') {
              v145 = v134.constant;
              v146 = v147 = v144 = 0;
            } else {
              v145 = v134.constant.length > 0 ? v134.constant[0] : 0;
              v146 = v134.constant.length > 1 ? v134.constant[1] : 0;
              v147 = v134.constant.length > 2 ? v134.constant[2] : 0;
              v144 = v134.constant.length > 3 ? v134.constant[3] : 0;
            }
          } else {
            if (v9(v134.buffer)) {
              v136 = v1.createStream(34962, v134.buffer);
            } else {
              v136 = v1.getBuffer(v134.buffer);
            }
            v143 = 'type' in v134 ? v43[v134.type] : v136.dtype;
            v138 = !!v134.normalized;
            v140 = v134.size | 0;
            v139 = v134.offset | 0;
            v142 = v134.stride | 0;
            v137 = v134.divisor | 0;
          }
        }
        v148 = char.location;
        v149 = v0[v148];
        if (v141 === 1) {
          if (!v149.buffer) {
            v8.enableVertexAttribArray(v148);
          }
          v150 = v140 || 1;
          if (v149.type !== v143 || v149.size !== v150 || v149.buffer !== v136 || v149.normalized !== v138 || v149.offset !== v139 || v149.stride !== v142) {
            v8.bindBuffer(34962, v136.buffer);
            v8.vertexAttribPointer(v148, v150, v143, v138, v142, v139);
            v149.type = v143;
            v149.size = v150;
            v149.buffer = v136;
            v149.normalized = v138;
            v149.offset = v139;
            v149.stride = v142;
          }
          if (v149.divisor !== v137) {
            v99.vertexAttribDivisorANGLE(v148, v137);
            v149.divisor = v137;
          }
        } else {
          if (v149.buffer) {
            v8.disableVertexAttribArray(v148);
            v149.buffer = null;
          }
          if (v149.x !== v145 || v149.y !== v146 || v149.z !== v147 || v149.w !== v144) {
            v8.vertexAttrib4f(v148, v145, v146, v147, v144);
            v149.x = v145;
            v149.y = v146;
            v149.z = v147;
            v149.w = v144;
          }
        }
        v151 = this['position'];
        v152 = false;
        v153 = null;
        v154 = 0;
        v155 = false;
        v156 = 0;
        v157 = 0;
        v158 = 1;
        v159 = 0;
        v160 = 5126;
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v164 = 0;
        if (v9(v151)) {
          v152 = true;
          v153 = v1.createStream(34962, v151);
          v160 = v153.dtype;
        } else {
          v153 = v1.getBuffer(v151);
          if (v153) {
            v160 = v153.dtype;
          } else if ('constant' in v151) {
            v158 = 2;
            if (typeof v151.constant === 'number') {
              v162 = v151.constant;
              v163 = v164 = v161 = 0;
            } else {
              v162 = v151.constant.length > 0 ? v151.constant[0] : 0;
              v163 = v151.constant.length > 1 ? v151.constant[1] : 0;
              v164 = v151.constant.length > 2 ? v151.constant[2] : 0;
              v161 = v151.constant.length > 3 ? v151.constant[3] : 0;
            }
          } else {
            if (v9(v151.buffer)) {
              v153 = v1.createStream(34962, v151.buffer);
            } else {
              v153 = v1.getBuffer(v151.buffer);
            }
            v160 = 'type' in v151 ? v43[v151.type] : v153.dtype;
            v155 = !!v151.normalized;
            v157 = v151.size | 0;
            v156 = v151.offset | 0;
            v159 = v151.stride | 0;
            v154 = v151.divisor | 0;
          }
        }
        v165 = position.location;
        v166 = v0[v165];
        if (v158 === 1) {
          if (!v166.buffer) {
            v8.enableVertexAttribArray(v165);
          }
          v167 = v157 || 2;
          if (v166.type !== v160 || v166.size !== v167 || v166.buffer !== v153 || v166.normalized !== v155 || v166.offset !== v156 || v166.stride !== v159) {
            v8.bindBuffer(34962, v153.buffer);
            v8.vertexAttribPointer(v165, v167, v160, v155, v159, v156);
            v166.type = v160;
            v166.size = v167;
            v166.buffer = v153;
            v166.normalized = v155;
            v166.offset = v156;
            v166.stride = v159;
          }
          if (v166.divisor !== v154) {
            v99.vertexAttribDivisorANGLE(v165, v154);
            v166.divisor = v154;
          }
        } else {
          if (v166.buffer) {
            v8.disableVertexAttribArray(v165);
            v166.buffer = null;
          }
          if (v166.x !== v162 || v166.y !== v163 || v166.z !== v164 || v166.w !== v161) {
            v8.vertexAttrib4f(v165, v162, v163, v164, v161);
            v166.x = v162;
            v166.y = v163;
            v166.z = v164;
            v166.w = v161;
          }
        }
        v168 = $3.call(this, v2, a0, 0);
        v8.uniform1f(charStep.location, v168);
        v169 = $4.call(this, v2, a0, 0);
        v8.uniform1f(em.location, v169);
        v170 = a0['align'];
        v8.uniform1f(align.location, v170);
        v171 = a0['baseline'];
        v8.uniform1f(baseline.location, v171);
        v172 = this['viewportArray'];
        v173 = v172[0];
        v174 = v172[1];
        v175 = v172[2];
        v176 = v172[3];
        v8.uniform4f(viewport.location, v173, v174, v175, v176);
        v177 = a0['color'];
        v178 = v177[0];
        v179 = v177[1];
        v180 = v177[2];
        v181 = v177[3];
        v8.uniform4f(color.location, v178, v179, v180, v181);
        v182 = $5.call(this, v2, a0, 0);
        v183 = v182[0];
        v184 = v182[1];
        v8.uniform2f(atlasSize.location, v183, v184);
        v185 = $6.call(this, v2, a0, 0);
        v186 = v185[0];
        v187 = v185[1];
        v8.uniform2f(atlasDim.location, v186, v187);
        v188 = this['scale'];
        v189 = v188[0];
        v190 = v188[1];
        v8.uniform2f(scale.location, v189, v190);
        v191 = this['translate'];
        v192 = v191[0];
        v193 = v191[1];
        v8.uniform2f(translate.location, v192, v193);
        v194 = a0['positionOffset'];
        v195 = v194[0];
        v196 = v194[1];
        v8.uniform2f(positionOffset.location, v195, v196);
        v197 = a0['opacity'];
        v8.uniform1f(opacity.location, v197);
        v198 = $7.call(this, v2, a0, 0);
        if (v198 && v198._reglType === 'framebuffer') {
          v198 = v198.color[0];
        }
        v199 = v198._texture;
        v8.uniform1i(atlas.location, v199.bind());
        v200 = v4.elements;
        if (v200) {
          v8.bindBuffer(34963, v200.buffer.buffer);
        } else if (v15.currentVAO) {
          v200 = v5.getElements(v15.currentVAO.elements);
          if (v200) v8.bindBuffer(34963, v200.buffer.buffer);
        }
        v201 = a0['offset'];
        v202 = a0['count'];
        if (v202) {
          v203 = v4.instances;
          if (v203 > 0) {
            if (v200) {
              v99.drawElementsInstancedANGLE(0, v202, v200.type, v201 << (v200.type - 5121 >> 1), v203);
            } else {
              v99.drawArraysInstancedANGLE(0, v201, v202, v203);
            }
          } else if (v203 < 0) {
            if (v200) {
              v8.drawElements(0, v202, v200.type, v201 << (v200.type - 5121 >> 1));
            } else {
              v8.drawArrays(0, v201, v202);
            }
          }
          v3.dirty = true;
          v15.setVAO(null);
          v2.viewportWidth = v95;
          v2.viewportHeight = v96;
          if (v97) {
            $1.cpuTime += performance.now() - v98;
          }
          if (v101) {
            v1.destroyStream(v102);
          }
          if (v118) {
            v1.destroyStream(v119);
          }
          if (v135) {
            v1.destroyStream(v136);
          }
          if (v152) {
            v1.destroyStream(v153);
          }
          v199.unbind();
        }
      },
      'scope': function (a0, a1, a2) {
        var v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339, v340, v341, v342, v343, v344, v345, v346, v347, v348, v349, v350, v351, v352, v353, v354, v355, v356, v357, v358, v359, v360, v361, v362, v363, v364;
        v204 = this['viewport'];
        v205 = v204.x | 0;
        v206 = v204.y | 0;
        v207 = 'width' in v204 ? v204.width | 0 : v2.framebufferWidth - v205;
        v208 = 'height' in v204 ? v204.height | 0 : v2.framebufferHeight - v206;
        v209 = v2.viewportWidth;
        v2.viewportWidth = v207;
        v210 = v2.viewportHeight;
        v2.viewportHeight = v208;
        v211 = v38[0];
        v38[0] = v205;
        v212 = v38[1];
        v38[1] = v206;
        v213 = v38[2];
        v38[2] = v207;
        v214 = v38[3];
        v38[3] = v208;
        v215 = v16[0];
        v16[0] = 0;
        v216 = v16[1];
        v16[1] = 0;
        v217 = v16[2];
        v16[2] = 0;
        v218 = v16[3];
        v16[3] = 1;
        v219 = v10.blend_enable;
        v10.blend_enable = true;
        v220 = v20[0];
        v20[0] = 770;
        v221 = v20[1];
        v20[1] = 771;
        v222 = v20[2];
        v20[2] = 773;
        v223 = v20[3];
        v20[3] = 1;
        v224 = v10.depth_enable;
        v10.depth_enable = false;
        v225 = v10.stencil_enable;
        v10.stencil_enable = false;
        v226 = v3.profile;
        if (v226) {
          v227 = performance.now();
          $1.count++;
        }
        v228 = a0['offset'];
        v229 = v4.offset;
        v4.offset = v228;
        v230 = a0['count'];
        v231 = v4.count;
        v4.count = v230;
        v232 = v4.primitive;
        v4.primitive = 0;
        v233 = a0['align'];
        v234 = v14[64];
        v14[64] = v233;
        v235 = $8.call(this, v2, a0, a2);
        v236 = v14[69];
        v14[69] = v235;
        v237 = $9.call(this, v2, a0, a2);
        v238 = v14[67];
        v14[67] = v237;
        v239 = $10.call(this, v2, a0, a2);
        v240 = v14[66];
        v14[66] = v239;
        v241 = a0['baseline'];
        v242 = v14[65];
        v14[65] = v241;
        v243 = $11.call(this, v2, a0, a2);
        v244 = v14[62];
        v14[62] = v243;
        v245 = a0['color'];
        v246 = v14[14];
        v14[14] = v245;
        v247 = $12.call(this, v2, a0, a2);
        v248 = v14[63];
        v14[63] = v247;
        v249 = a0['opacity'];
        v250 = v14[10];
        v14[10] = v249;
        v251 = a0['positionOffset'];
        v252 = v14[68];
        v14[68] = v251;
        v253 = this['scale'];
        v254 = v14[6];
        v14[6] = v253;
        v255 = this['translate'];
        v256 = v14[8];
        v14[8] = v255;
        v257 = this['viewportArray'];
        v258 = v14[3];
        v14[3] = v257;
        v259 = this['charBuffer'];
        v260 = false;
        v261 = null;
        v262 = 0;
        v263 = false;
        v264 = 0;
        v265 = 0;
        v266 = 1;
        v267 = 0;
        v268 = 5126;
        v269 = 0;
        v270 = 0;
        v271 = 0;
        v272 = 0;
        if (v9(v259)) {
          v260 = true;
          v261 = v1.createStream(34962, v259);
          v268 = v261.dtype;
        } else {
          v261 = v1.getBuffer(v259);
          if (v261) {
            v268 = v261.dtype;
          } else if ('constant' in v259) {
            v266 = 2;
            if (typeof v259.constant === 'number') {
              v270 = v259.constant;
              v271 = v272 = v269 = 0;
            } else {
              v270 = v259.constant.length > 0 ? v259.constant[0] : 0;
              v271 = v259.constant.length > 1 ? v259.constant[1] : 0;
              v272 = v259.constant.length > 2 ? v259.constant[2] : 0;
              v269 = v259.constant.length > 3 ? v259.constant[3] : 0;
            }
          } else {
            if (v9(v259.buffer)) {
              v261 = v1.createStream(34962, v259.buffer);
            } else {
              v261 = v1.getBuffer(v259.buffer);
            }
            v268 = 'type' in v259 ? v43[v259.type] : v261.dtype;
            v263 = !!v259.normalized;
            v265 = v259.size | 0;
            v264 = v259.offset | 0;
            v267 = v259.stride | 0;
            v262 = v259.divisor | 0;
          }
        }
        v273 = $13.buffer;
        $13.buffer = v261;
        v274 = $13.divisor;
        $13.divisor = v262;
        v275 = $13.normalized;
        $13.normalized = v263;
        v276 = $13.offset;
        $13.offset = v264;
        v277 = $13.size;
        $13.size = v265;
        v278 = $13.state;
        $13.state = v266;
        v279 = $13.stride;
        $13.stride = v267;
        v280 = $13.type;
        $13.type = v268;
        v281 = $13.w;
        $13.w = v269;
        v282 = $13.x;
        $13.x = v270;
        v283 = $13.y;
        $13.y = v271;
        v284 = $13.z;
        $13.z = v272;
        v285 = this['sizeBuffer'];
        v47.buffer = v285;
        v286 = false;
        v287 = null;
        v288 = 0;
        v289 = false;
        v290 = 0;
        v291 = 0;
        v292 = 1;
        v293 = 0;
        v294 = 5126;
        v295 = 0;
        v296 = 0;
        v297 = 0;
        v298 = 0;
        if (v9(v47)) {
          v286 = true;
          v287 = v1.createStream(34962, v47);
          v294 = v287.dtype;
        } else {
          v287 = v1.getBuffer(v47);
          if (v287) {
            v294 = v287.dtype;
          } else if ('constant' in v47) {
            v292 = 2;
            if (typeof v47.constant === 'number') {
              v296 = v47.constant;
              v297 = v298 = v295 = 0;
            } else {
              v296 = v47.constant.length > 0 ? v47.constant[0] : 0;
              v297 = v47.constant.length > 1 ? v47.constant[1] : 0;
              v298 = v47.constant.length > 2 ? v47.constant[2] : 0;
              v295 = v47.constant.length > 3 ? v47.constant[3] : 0;
            }
          } else {
            if (v9(v47.buffer)) {
              v287 = v1.createStream(34962, v47.buffer);
            } else {
              v287 = v1.getBuffer(v47.buffer);
            }
            v294 = 'type' in v47 ? v43[v47.type] : v287.dtype;
            v289 = !!v47.normalized;
            v291 = v47.size | 0;
            v290 = v47.offset | 0;
            v293 = v47.stride | 0;
            v288 = v47.divisor | 0;
          }
        }
        v299 = $14.buffer;
        $14.buffer = v287;
        v300 = $14.divisor;
        $14.divisor = v288;
        v301 = $14.normalized;
        $14.normalized = v289;
        v302 = $14.offset;
        $14.offset = v290;
        v303 = $14.size;
        $14.size = v291;
        v304 = $14.state;
        $14.state = v292;
        v305 = $14.stride;
        $14.stride = v293;
        v306 = $14.type;
        $14.type = v294;
        v307 = $14.w;
        $14.w = v295;
        v308 = $14.x;
        $14.x = v296;
        v309 = $14.y;
        $14.y = v297;
        v310 = $14.z;
        $14.z = v298;
        v311 = this['position'];
        v312 = false;
        v313 = null;
        v314 = 0;
        v315 = false;
        v316 = 0;
        v317 = 0;
        v318 = 1;
        v319 = 0;
        v320 = 5126;
        v321 = 0;
        v322 = 0;
        v323 = 0;
        v324 = 0;
        if (v9(v311)) {
          v312 = true;
          v313 = v1.createStream(34962, v311);
          v320 = v313.dtype;
        } else {
          v313 = v1.getBuffer(v311);
          if (v313) {
            v320 = v313.dtype;
          } else if ('constant' in v311) {
            v318 = 2;
            if (typeof v311.constant === 'number') {
              v322 = v311.constant;
              v323 = v324 = v321 = 0;
            } else {
              v322 = v311.constant.length > 0 ? v311.constant[0] : 0;
              v323 = v311.constant.length > 1 ? v311.constant[1] : 0;
              v324 = v311.constant.length > 2 ? v311.constant[2] : 0;
              v321 = v311.constant.length > 3 ? v311.constant[3] : 0;
            }
          } else {
            if (v9(v311.buffer)) {
              v313 = v1.createStream(34962, v311.buffer);
            } else {
              v313 = v1.getBuffer(v311.buffer);
            }
            v320 = 'type' in v311 ? v43[v311.type] : v313.dtype;
            v315 = !!v311.normalized;
            v317 = v311.size | 0;
            v316 = v311.offset | 0;
            v319 = v311.stride | 0;
            v314 = v311.divisor | 0;
          }
        }
        v325 = $15.buffer;
        $15.buffer = v313;
        v326 = $15.divisor;
        $15.divisor = v314;
        v327 = $15.normalized;
        $15.normalized = v315;
        v328 = $15.offset;
        $15.offset = v316;
        v329 = $15.size;
        $15.size = v317;
        v330 = $15.state;
        $15.state = v318;
        v331 = $15.stride;
        $15.stride = v319;
        v332 = $15.type;
        $15.type = v320;
        v333 = $15.w;
        $15.w = v321;
        v334 = $15.x;
        $15.x = v322;
        v335 = $15.y;
        $15.y = v323;
        v336 = $15.z;
        $15.z = v324;
        v337 = this['sizeBuffer'];
        v48.buffer = v337;
        v338 = false;
        v339 = null;
        v340 = 0;
        v341 = false;
        v342 = 0;
        v343 = 0;
        v344 = 1;
        v345 = 0;
        v346 = 5126;
        v347 = 0;
        v348 = 0;
        v349 = 0;
        v350 = 0;
        if (v9(v48)) {
          v338 = true;
          v339 = v1.createStream(34962, v48);
          v346 = v339.dtype;
        } else {
          v339 = v1.getBuffer(v48);
          if (v339) {
            v346 = v339.dtype;
          } else if ('constant' in v48) {
            v344 = 2;
            if (typeof v48.constant === 'number') {
              v348 = v48.constant;
              v349 = v350 = v347 = 0;
            } else {
              v348 = v48.constant.length > 0 ? v48.constant[0] : 0;
              v349 = v48.constant.length > 1 ? v48.constant[1] : 0;
              v350 = v48.constant.length > 2 ? v48.constant[2] : 0;
              v347 = v48.constant.length > 3 ? v48.constant[3] : 0;
            }
          } else {
            if (v9(v48.buffer)) {
              v339 = v1.createStream(34962, v48.buffer);
            } else {
              v339 = v1.getBuffer(v48.buffer);
            }
            v346 = 'type' in v48 ? v43[v48.type] : v339.dtype;
            v341 = !!v48.normalized;
            v343 = v48.size | 0;
            v342 = v48.offset | 0;
            v345 = v48.stride | 0;
            v340 = v48.divisor | 0;
          }
        }
        v351 = $16.buffer;
        $16.buffer = v339;
        v352 = $16.divisor;
        $16.divisor = v340;
        v353 = $16.normalized;
        $16.normalized = v341;
        v354 = $16.offset;
        $16.offset = v342;
        v355 = $16.size;
        $16.size = v343;
        v356 = $16.state;
        $16.state = v344;
        v357 = $16.stride;
        $16.stride = v345;
        v358 = $16.type;
        $16.type = v346;
        v359 = $16.w;
        $16.w = v347;
        v360 = $16.x;
        $16.x = v348;
        v361 = $16.y;
        $16.y = v349;
        v362 = $16.z;
        $16.z = v350;
        v363 = v11.vert;
        v11.vert = 61;
        v364 = v11.frag;
        v11.frag = 60;
        v3.dirty = true;
        a1(v2, a0, a2);
        v2.viewportWidth = v209;
        v2.viewportHeight = v210;
        v38[0] = v211;
        v38[1] = v212;
        v38[2] = v213;
        v38[3] = v214;
        v16[0] = v215;
        v16[1] = v216;
        v16[2] = v217;
        v16[3] = v218;
        v10.blend_enable = v219;
        v20[0] = v220;
        v20[1] = v221;
        v20[2] = v222;
        v20[3] = v223;
        v10.depth_enable = v224;
        v10.stencil_enable = v225;
        if (v226) {
          $1.cpuTime += performance.now() - v227;
        }
        v4.offset = v229;
        v4.count = v231;
        v4.primitive = v232;
        v14[64] = v234;
        v14[69] = v236;
        v14[67] = v238;
        v14[66] = v240;
        v14[65] = v242;
        v14[62] = v244;
        v14[14] = v246;
        v14[63] = v248;
        v14[10] = v250;
        v14[68] = v252;
        v14[6] = v254;
        v14[8] = v256;
        v14[3] = v258;
        if (v260) {
          v1.destroyStream(v261);
        }
        $13.buffer = v273;
        $13.divisor = v274;
        $13.normalized = v275;
        $13.offset = v276;
        $13.size = v277;
        $13.state = v278;
        $13.stride = v279;
        $13.type = v280;
        $13.w = v281;
        $13.x = v282;
        $13.y = v283;
        $13.z = v284;
        if (v286) {
          v1.destroyStream(v287);
        }
        $14.buffer = v299;
        $14.divisor = v300;
        $14.normalized = v301;
        $14.offset = v302;
        $14.size = v303;
        $14.state = v304;
        $14.stride = v305;
        $14.type = v306;
        $14.w = v307;
        $14.x = v308;
        $14.y = v309;
        $14.z = v310;
        if (v312) {
          v1.destroyStream(v313);
        }
        $15.buffer = v325;
        $15.divisor = v326;
        $15.normalized = v327;
        $15.offset = v328;
        $15.size = v329;
        $15.state = v330;
        $15.stride = v331;
        $15.type = v332;
        $15.w = v333;
        $15.x = v334;
        $15.y = v335;
        $15.z = v336;
        if (v338) {
          v1.destroyStream(v339);
        }
        $16.buffer = v351;
        $16.divisor = v352;
        $16.normalized = v353;
        $16.offset = v354;
        $16.size = v355;
        $16.state = v356;
        $16.stride = v357;
        $16.type = v358;
        $16.w = v359;
        $16.x = v360;
        $16.y = v361;
        $16.z = v362;
        v11.vert = v363;
        v11.frag = v364;
        v3.dirty = true;
      }

    };
  }
};

},{}],25:[function(require,module,exports){
var sortedObjectKeys = require('./sorted-object-keys');
module.exports = function (base, opts) {
  var keys = sortedObjectKeys(opts);
  for (var i = 0; i < keys.length; ++i) {
    base[keys[i]] = opts[keys[i]];
  }
  return base;
};

},{"./sorted-object-keys":34}],26:[function(require,module,exports){
var pool = require('./pool');

module.exports = {
  shape: arrayShape,
  flatten: flattenArray
};

function flatten1D(array, nx, out) {
  for (var i = 0; i < nx; ++i) {
    out[i] = array[i];
  }
}

function flatten2D(array, nx, ny, out) {
  var ptr = 0;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      out[ptr++] = row[j];
    }
  }
}

function flatten3D(array, nx, ny, nz, out, ptr_) {
  var ptr = ptr_;
  for (var i = 0; i < nx; ++i) {
    var row = array[i];
    for (var j = 0; j < ny; ++j) {
      var col = row[j];
      for (var k = 0; k < nz; ++k) {
        out[ptr++] = col[k];
      }
    }
  }
}

function flattenRec(array, shape, level, out, ptr) {
  var stride = 1;
  for (var i = level + 1; i < shape.length; ++i) {
    stride *= shape[i];
  }
  var n = shape[level];
  if (shape.length - level === 4) {
    var nx = shape[level + 1];
    var ny = shape[level + 2];
    var nz = shape[level + 3];
    for (i = 0; i < n; ++i) {
      flatten3D(array[i], nx, ny, nz, out, ptr);
      ptr += stride;
    }
  } else {
    for (i = 0; i < n; ++i) {
      flattenRec(array[i], shape, level + 1, out, ptr);
      ptr += stride;
    }
  }
}

function flattenArray(array, shape, type, out_) {
  var sz = 1;
  if (shape.length) {
    for (var i = 0; i < shape.length; ++i) {
      sz *= shape[i];
    }
  } else {
    sz = 0;
  }
  var out = out_ || pool.allocType(type, sz);
  switch (shape.length) {
    case 0:
      break;
    case 1:
      flatten1D(array, shape[0], out);
      break;
    case 2:
      flatten2D(array, shape[0], shape[1], out);
      break;
    case 3:
      flatten3D(array, shape[0], shape[1], shape[2], out, 0);
      break;
    default:
      flattenRec(array, shape, 0, out, 0);
  }
  return out;
}

function arrayShape(array_) {
  var shape = [];
  for (var array = array_; array.length; array = array[0]) {
    shape.push(array.length);
  }
  return shape;
}

},{"./pool":32}],27:[function(require,module,exports){
var isTypedArray = require('./is-typed-array');
module.exports = function isArrayLike(s) {
  return Array.isArray(s) || isTypedArray(s);
};

},{"./is-typed-array":30}],28:[function(require,module,exports){
var isTypedArray = require('./is-typed-array');

module.exports = function isNDArrayLike(obj) {
  return !!obj && typeof obj === 'object' && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === 'number' && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));
};

},{"./is-typed-array":30}],29:[function(require,module,exports){
module.exports = function (v) {
  return !(v & v - 1) && !!v;
};

},{}],30:[function(require,module,exports){
module.exports = function (x) {
  return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;
};

},{}],31:[function(require,module,exports){
module.exports = function loop(n, f) {
  var result = Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = f(i);
  }
  return result;
};

},{}],32:[function(require,module,exports){
var loop = require('./loop');

var GL_BYTE = 5120;
var GL_UNSIGNED_BYTE = 5121;
var GL_SHORT = 5122;
var GL_UNSIGNED_SHORT = 5123;
var GL_INT = 5124;
var GL_UNSIGNED_INT = 5125;
var GL_FLOAT = 5126;

function nextPow16(v) {
  for (var i = 16; i <= 1 << 28; i *= 16) {
    if (v <= i) {
      return i;
    }
  }
  return 0;
}

function log2(v) {
  var r, shift;
  r = (v > 0xFFFF) << 4;
  v >>>= r;
  shift = (v > 0xFF) << 3;
  v >>>= shift;r |= shift;
  shift = (v > 0xF) << 2;
  v >>>= shift;r |= shift;
  shift = (v > 0x3) << 1;
  v >>>= shift;r |= shift;
  return r | v >> 1;
}

function createPool() {
  var bufferPool = loop(8, function () {
    return [];
  });

  function alloc(n) {
    var sz = nextPow16(n);
    var bin = bufferPool[log2(sz) >> 2];
    if (bin.length > 0) {
      return bin.pop();
    }
    return new ArrayBuffer(sz);
  }

  function free(buf) {
    bufferPool[log2(buf.byteLength) >> 2].push(buf);
  }

  function allocType(type, n) {
    var result = null;
    switch (type) {
      case GL_BYTE:
        result = new Int8Array(alloc(n), 0, n);
        break;
      case GL_UNSIGNED_BYTE:
        result = new Uint8Array(alloc(n), 0, n);
        break;
      case GL_SHORT:
        result = new Int16Array(alloc(2 * n), 0, n);
        break;
      case GL_UNSIGNED_SHORT:
        result = new Uint16Array(alloc(2 * n), 0, n);
        break;
      case GL_INT:
        result = new Int32Array(alloc(4 * n), 0, n);
        break;
      case GL_UNSIGNED_INT:
        result = new Uint32Array(alloc(4 * n), 0, n);
        break;
      case GL_FLOAT:
        result = new Float32Array(alloc(4 * n), 0, n);
        break;
      default:
        return null;
    }
    if (result.length !== n) {
      return result.subarray(0, n);
    }
    return result;
  }

  function freeType(array) {
    free(array.buffer);
  }

  return {
    alloc: alloc,
    free: free,
    allocType: allocType,
    freeType: freeType
  };
}

var pool = createPool();

// zero pool for initial zero data
pool.zero = createPool();

module.exports = pool;

},{"./loop":31}],33:[function(require,module,exports){
/* globals requestAnimationFrame, cancelAnimationFrame */
module.exports = {
  next: typeof requestAnimationFrame === 'function' ? function (cb) {
    return requestAnimationFrame(cb);
  } : function (cb) {
    return setTimeout(cb, 16);
  },
  cancel: typeof cancelAnimationFrame === 'function' ? function (raf) {
    return cancelAnimationFrame(raf);
  } : clearTimeout
};

},{}],34:[function(require,module,exports){
module.exports = function sortedObjectKeys(a) {
  return Object.keys(a).sort();
};

},{}],35:[function(require,module,exports){
var pool = require('./pool');

var FLOAT = new Float32Array(1);
var INT = new Uint32Array(FLOAT.buffer);

var GL_UNSIGNED_SHORT = 5123;

module.exports = function convertToHalfFloat(array) {
  var ushorts = pool.allocType(GL_UNSIGNED_SHORT, array.length);

  for (var i = 0; i < array.length; ++i) {
    if (isNaN(array[i])) {
      ushorts[i] = 0xffff;
    } else if (array[i] === Infinity) {
      ushorts[i] = 0x7c00;
    } else if (array[i] === -Infinity) {
      ushorts[i] = 0xfc00;
    } else {
      FLOAT[0] = array[i];
      var x = INT[0];

      var sgn = x >>> 31 << 15;
      var exp = (x << 1 >>> 24) - 127;
      var frac = x >> 13 & (1 << 10) - 1;

      if (exp < -24) {
        // round non-representable denormals to 0
        ushorts[i] = sgn;
      } else if (exp < -14) {
        // handle denormals
        var s = -14 - exp;
        ushorts[i] = sgn + (frac + (1 << 10) >> s);
      } else if (exp > 15) {
        // round overflow to +/- Infinity
        ushorts[i] = sgn + 0x7c00;
      } else {
        // otherwise convert directly
        ushorts[i] = sgn + (exp + 15 << 10) + frac;
      }
    }
  }

  return ushorts;
};

},{"./pool":32}],36:[function(require,module,exports){
var sortedObjectKeys = require('./sorted-object-keys');
module.exports = function (obj) {
  return sortedObjectKeys(obj).map(function (key) {
    return obj[key];
  });
};

},{"./sorted-object-keys":34}],37:[function(require,module,exports){
// Context and canvas creation helper functions
var check = require('./util/check');
var extend = require('./util/extend');

function createCanvas(element, onDone, pixelRatio) {
  var canvas = document.createElement('canvas');
  extend(canvas.style, {
    border: 0,
    margin: 0,
    padding: 0,
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  });
  element.appendChild(canvas);

  if (element === document.body) {
    canvas.style.position = 'absolute';
    extend(element.style, {
      margin: 0,
      padding: 0
    });
  }

  function resize() {
    var w = window.innerWidth;
    var h = window.innerHeight;
    if (element !== document.body) {
      var bounds = canvas.getBoundingClientRect();
      w = bounds.right - bounds.left;
      h = bounds.bottom - bounds.top;
    }
    canvas.width = pixelRatio * w;
    canvas.height = pixelRatio * h;
  }

  var resizeObserver;
  if (element !== document.body && typeof ResizeObserver === 'function') {
    // ignore 'ResizeObserver' is not defined
    // eslint-disable-next-line
    resizeObserver = new ResizeObserver(function () {
      // setTimeout to avoid flicker
      setTimeout(resize);
    });
    resizeObserver.observe(element);
  } else {
    window.addEventListener('resize', resize, false);
  }

  function onDestroy() {
    if (resizeObserver) {
      resizeObserver.disconnect();
    } else {
      window.removeEventListener('resize', resize);
    }
    element.removeChild(canvas);
  }

  resize();

  return {
    canvas: canvas,
    onDestroy: onDestroy
  };
}

function createContext(canvas, contextAttributes) {
  function get(name) {
    try {
      return canvas.getContext(name, contextAttributes);
    } catch (e) {
      return null;
    }
  }
  return get('webgl') || get('experimental-webgl') || get('webgl-experimental');
}

function isHTMLElement(obj) {
  return typeof obj.nodeName === 'string' && typeof obj.appendChild === 'function' && typeof obj.getBoundingClientRect === 'function';
}

function isWebGLContext(obj) {
  return typeof obj.drawArrays === 'function' || typeof obj.drawElements === 'function';
}

function parseExtensions(input) {
  if (typeof input === 'string') {
    return input.split();
  }
  check(Array.isArray(input), 'invalid extension array');
  return input;
}

function getElement(desc) {
  if (typeof desc === 'string') {
    check(typeof document !== 'undefined', 'not supported outside of DOM');
    return document.querySelector(desc);
  }
  return desc;
}

module.exports = function parseArgs(args_) {
  var args = args_ || {};
  var element, container, canvas, gl;
  var contextAttributes = {};
  var extensions = [];
  var optionalExtensions = [];
  var pixelRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio;
  var profile = false;
  var onDone = function (err) {
    if (err) {
      check.raise(err);
    }
  };
  var onDestroy = function () {};
  if (typeof args === 'string') {
    check(typeof document !== 'undefined', 'selector queries only supported in DOM environments');
    element = document.querySelector(args);
    check(element, 'invalid query string for element');
  } else if (typeof args === 'object') {
    if (isHTMLElement(args)) {
      element = args;
    } else if (isWebGLContext(args)) {
      gl = args;
      canvas = gl.canvas;
    } else {
      check.constructor(args);
      if ('gl' in args) {
        gl = args.gl;
      } else if ('canvas' in args) {
        canvas = getElement(args.canvas);
      } else if ('container' in args) {
        container = getElement(args.container);
      }
      if ('attributes' in args) {
        contextAttributes = args.attributes;
        check.type(contextAttributes, 'object', 'invalid context attributes');
      }
      if ('extensions' in args) {
        extensions = parseExtensions(args.extensions);
      }
      if ('optionalExtensions' in args) {
        optionalExtensions = parseExtensions(args.optionalExtensions);
      }
      if ('onDone' in args) {
        check.type(args.onDone, 'function', 'invalid or missing onDone callback');
        onDone = args.onDone;
      }
      if ('profile' in args) {
        profile = !!args.profile;
      }
      if ('pixelRatio' in args) {
        pixelRatio = +args.pixelRatio;
        check(pixelRatio > 0, 'invalid pixel ratio');
      }
    }
  } else {
    check.raise('invalid arguments to regl');
  }

  if (element) {
    if (element.nodeName.toLowerCase() === 'canvas') {
      canvas = element;
    } else {
      container = element;
    }
  }

  if (!gl) {
    if (!canvas) {
      check(typeof document !== 'undefined', 'must manually specify webgl context outside of DOM environments');
      var result = createCanvas(container || document.body, onDone, pixelRatio);
      if (!result) {
        return null;
      }
      canvas = result.canvas;
      onDestroy = result.onDestroy;
    }
    // workaround for chromium bug, premultiplied alpha value is platform dependent
    if (contextAttributes.premultipliedAlpha === undefined) contextAttributes.premultipliedAlpha = true;
    gl = createContext(canvas, contextAttributes);
  }

  if (!gl) {
    onDestroy();
    onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');
    return null;
  }

  return {
    gl: gl,
    canvas: canvas,
    container: container,
    extensions: extensions,
    optionalExtensions: optionalExtensions,
    pixelRatio: pixelRatio,
    profile: profile,
    onDone: onDone,
    onDestroy: onDestroy
  };
};

},{"./util/check":21,"./util/extend":25}],38:[function(require,module,exports){
'use strict'

module.exports = angleNormals

function hypot(x, y, z) {
  return Math.sqrt(Math.pow(x,2) + Math.pow(y,2) + Math.pow(z,2))
}

function weight(s, r, a) {
  return Math.atan2(r, (s - a))
}

function mulAdd(dest, s, x, y, z) {
  dest[0] += s * x
  dest[1] += s * y
  dest[2] += s * z
}

function angleNormals(cells, positions) {
  var numVerts = positions.length
  var numCells = cells.length

  //Allocate normal array
  var normals = new Array(numVerts)
  for(var i=0; i<numVerts; ++i) {
    normals[i] = [0,0,0]
  }

  //Scan cells, and
  for(var i=0; i<numCells; ++i) {
    var cell = cells[i]
    var a = positions[cell[0]]
    var b = positions[cell[1]]
    var c = positions[cell[2]]

    var abx = a[0] - b[0]
    var aby = a[1] - b[1]
    var abz = a[2] - b[2]
    var ab = hypot(abx, aby, abz)

    var bcx = b[0] - c[0]
    var bcy = b[1] - c[1]
    var bcz = b[2] - c[2]
    var bc = hypot(bcx, bcy, bcz)

    var cax = c[0] - a[0]
    var cay = c[1] - a[1]
    var caz = c[2] - a[2]
    var ca = hypot(cax, cay, caz)

    if(Math.min(ab, bc, ca) < 1e-6) {
      continue
    }

    var s = 0.5 * (ab + bc + ca)
    var r = Math.sqrt((s - ab)*(s - bc)*(s - ca)/s)

    var nx = aby * bcz - abz * bcy
    var ny = abz * bcx - abx * bcz
    var nz = abx * bcy - aby * bcx
    var nl = hypot(nx, ny, nz)
    nx /= nl
    ny /= nl
    nz /= nl

    mulAdd(normals[cell[0]], weight(s, r, bc), nx, ny, nz)
    mulAdd(normals[cell[1]], weight(s, r, ca), nx, ny, nz)
    mulAdd(normals[cell[2]], weight(s, r, ab), nx, ny, nz)
  }

  //Normalize all the normals
  for(var i=0; i<numVerts; ++i) {
    var n = normals[i]
    var l = Math.sqrt(
      Math.pow(n[0], 2) +
      Math.pow(n[1], 2) +
      Math.pow(n[2], 2))
    if(l < 1e-8) {
      n[0] = 1
      n[1] = 0
      n[2] = 0
      continue
    }
    n[0] /= l
    n[1] /= l
    n[2] /= l
  }

  return normals
}

},{}],39:[function(require,module,exports){
exports.positions=[[1.301895,0.122622,2.550061],[1.045326,0.139058,2.835156],[0.569251,0.155925,2.805125],[0.251886,0.144145,2.82928],[0.063033,0.131726,3.01408],[-0.277753,0.135892,3.10716],[-0.441048,0.277064,2.594331],[-1.010956,0.095285,2.668983],[-1.317639,0.069897,2.325448],[-0.751691,0.264681,2.381496],[0.684137,0.31134,2.364574],[1.347931,0.302882,2.201434],[-1.736903,0.029894,1.724111],[-1.319986,0.11998,0.912925],[1.538077,0.157372,0.481711],[1.951975,0.081742,1.1641],[1.834768,0.095832,1.602682],[2.446122,0.091817,1.37558],[2.617615,0.078644,0.742801],[-1.609748,0.04973,-0.238721],[-1.281973,0.230984,-0.180916],[-1.074501,0.248204,0.034007],[-1.201734,0.058499,0.402234],[-1.444454,0.054783,0.149579],[-4.694605,5.075882,1.043427],[-3.95963,7.767394,0.758447],[-4.753339,5.339817,0.665061],[-1.150325,9.133327,-0.368552],[-4.316107,2.893611,0.44399],[-0.809202,9.312575,-0.466061],[0.085626,5.963693,1.685666],[-1.314853,9.00142,-0.1339],[-4.364182,3.072556,1.436712],[-2.022074,7.323396,0.678657],[1.990887,6.13023,0.479643],[-3.295525,7.878917,1.409353],[0.571308,6.197569,0.670657],[0.89661,6.20018,0.337056],[0.331851,6.162372,1.186371],[-4.840066,5.599874,2.296069],[2.138989,6.031291,0.228335],[0.678923,6.026173,1.894052],[-0.781682,5.601573,1.836738],[1.181315,6.239007,0.393293],[-3.606308,7.376476,2.661452],[-0.579059,4.042511,-1.540883],[-3.064069,8.630253,-2.597539],[-2.157271,6.837012,0.300191],[-2.966013,7.821581,-1.13697],[-2.34426,8.122965,0.409043],[-0.951684,5.874251,1.415119],[-2.834853,7.748319,0.182406],[-3.242493,7.820096,0.373674],[-0.208532,5.992846,1.252084],[-3.048085,8.431527,-2.129795],[1.413245,5.806324,2.243906],[-0.051222,6.064901,0.696093],[-4.204306,2.700062,0.713875],[-4.610997,6.343405,0.344272],[-3.291336,9.30531,-3.340445],[-3.27211,7.559239,-2.324016],[-4.23882,6.498344,3.18452],[-3.945317,6.377804,3.38625],[-4.906378,5.472265,1.315193],[-3.580131,7.846717,0.709666],[-1.995504,6.645459,0.688487],[-2.595651,7.86054,0.793351],[-0.008849,0.305871,0.184484],[-0.029011,0.314116,-0.257312],[-2.522424,7.565392,1.804212],[-1.022993,8.650826,-0.855609],[-3.831265,6.595426,3.266783],[-4.042525,6.855724,3.060663],[-4.17126,7.404742,2.391387],[3.904526,3.767693,0.092179],[0.268076,6.086802,1.469223],[-3.320456,8.753222,-2.08969],[1.203048,6.26925,0.612407],[-4.406479,2.985974,0.853691],[-3.226889,6.615215,-0.404243],[0.346326,1.60211,3.509858],[-3.955476,7.253323,2.722392],[-1.23204,0.068935,1.68794],[0.625436,6.196455,1.333156],[4.469132,2.165298,1.70525],[0.950053,6.262899,0.922441],[-2.980404,5.25474,-0.663155],[-4.859043,6.28741,1.537081],[-3.077453,4.641475,-0.892167],[-0.44002,8.222503,-0.771454],[-4.034112,7.639786,0.389935],[-3.696045,6.242042,3.394679],[-1.221806,7.783617,0.196451],[0.71461,6.149895,1.656636],[-4.713539,6.163154,0.495369],[-1.509869,0.913044,-0.832413],[-1.547249,2.066753,-0.852669],[-3.757734,5.793742,3.455794],[-0.831911,0.199296,1.718536],[-3.062763,7.52718,-1.550559],[0.938688,6.103354,1.820958],[-4.037033,2.412311,0.988026],[-4.130746,2.571806,1.101689],[-0.693664,9.174283,-0.952323],[-1.286742,1.079679,-0.751219],[1.543185,1.408925,3.483132],[1.535973,2.047979,3.655029],[0.93844,5.84101,2.195219],[-0.684401,5.918492,1.20109],[1.28844,2.008676,3.710781],[-3.586722,7.435506,-1.454737],[-0.129975,4.384192,2.930593],[-1.030531,0.281374,3.214273],[-3.058751,8.137238,-3.227714],[3.649524,4.592226,1.340021],[-3.354828,7.322425,-1.412086],[0.936449,6.209237,1.512693],[-1.001832,3.590411,-1.545892],[-3.770486,4.593242,2.477056],[-0.971925,0.067797,0.921384],[-4.639832,6.865407,2.311791],[-0.441014,8.093595,-0.595999],[-2.004852,6.37142,1.635383],[4.759591,1.92818,0.328328],[3.748064,1.224074,2.140484],[-0.703601,5.285476,2.251988],[0.59532,6.21893,0.981004],[0.980799,6.257026,1.24223],[1.574697,6.204981,0.381628],[1.149594,6.173608,1.660763],[-3.501963,5.895989,3.456576],[1.071122,5.424198,2.588717],[-0.774693,8.473335,-0.276957],[3.849959,4.15542,0.396742],[-0.801715,4.973149,-1.068582],[-2.927676,0.625112,2.326393],[2.669682,4.045542,2.971184],[-4.391324,4.74086,0.343463],[1.520129,6.270031,0.775471],[1.837586,6.084731,0.109188],[1.271475,5.975024,2.032355],[-3.487968,4.513249,2.605871],[-1.32234,1.517264,-0.691879],[-1.080301,1.648226,-0.805526],[-3.365703,6.910166,-0.454902],[1.36034,0.432238,3.075004],[-3.305013,5.774685,3.39142],[3.88432,0.654141,0.12574],[3.57254,0.377934,0.302501],[4.196136,0.807999,0.212229],[3.932997,0.543123,0.380579],[4.023704,3.286125,0.537597],[1.864455,4.916544,2.691677],[-4.775427,6.499498,1.440153],[-3.464928,3.68234,2.766356],[3.648972,1.751262,2.157485],[1.179111,3.238846,3.774796],[-0.171164,0.299126,-0.592669],[-4.502912,3.316656,0.875188],[-0.948454,9.214025,-0.679508],[1.237665,6.288593,1.046],[1.523423,6.268963,1.139544],[1.436519,6.140608,1.739316],[3.723607,1.504355,2.136762],[2.009495,4.045514,3.22053],[-1.921944,7.249905,0.213973],[1.254068,1.205518,3.474709],[-0.317087,5.996269,0.525872],[-2.996914,3.934607,2.900178],[-3.316873,4.028154,2.785696],[-3.400267,4.280157,2.689268],[-3.134842,4.564875,2.697192],[1.480563,4.692567,2.834068],[0.873682,1.315452,3.541585],[1.599355,0.91622,3.246769],[-3.292102,7.125914,2.768515],[3.74296,4.511299,0.616539],[4.698935,1.55336,0.26921],[-3.274387,3.299421,2.823946],[-2.88809,3.410699,2.955248],[1.171407,1.76905,3.688472],[1.430276,3.92483,3.473666],[3.916941,2.553308,0.018941],[0.701632,2.442372,3.778639],[1.562657,2.302778,3.660957],[4.476622,1.152407,0.182131],[-0.61136,5.761367,1.598838],[-3.102154,3.691687,2.903738],[1.816012,5.546167,2.380308],[3.853928,4.25066,0.750017],[1.234681,3.581665,3.673723],[1.862271,1.361863,3.355209],[1.346844,4.146995,3.327877],[1.70672,4.080043,3.274307],[0.897242,1.908983,3.6969],[-0.587022,9.191132,-0.565301],[-0.217426,5.674606,2.019968],[0.278925,6.120777,0.485403],[1.463328,3.578742,-2.001464],[-3.072985,4.264581,2.789502],[3.62353,4.673843,0.383452],[-3.053491,8.752377,-2.908434],[-2.628687,4.505072,2.755601],[0.891047,5.113781,2.748272],[-2.923732,3.06515,2.866368],[0.848008,4.754252,2.896972],[-3.319184,8.811641,-2.327412],[0.12864,8.814781,-1.334456],[1.549501,4.549331,-1.28243],[1.647161,3.738973,3.507719],[1.250888,0.945599,3.348739],[3.809662,4.038822,0.053142],[1.483166,0.673327,3.09156],[0.829726,3.635921,3.713103],[1.352914,5.226651,2.668113],[2.237352,4.37414,3.016386],[4.507929,0.889447,0.744249],[4.57304,1.010981,0.496588],[3.931422,1.720989,2.088175],[-0.463177,5.989835,0.834346],[-2.811236,3.745023,2.969587],[-2.805135,4.219721,2.841108],[-2.836842,4.802543,2.60826],[1.776716,2.084611,3.568638],[4.046881,1.463478,2.106273],[0.316265,5.944313,1.892785],[-2.86347,2.776049,2.77242],[-2.673644,3.116508,2.907104],[-2.621149,4.018502,2.903409],[-2.573447,5.198013,2.477481],[1.104039,2.278985,3.722469],[-4.602743,4.306413,0.902296],[-2.684878,1.510731,0.535039],[0.092036,8.473269,-0.99413],[-1.280472,5.602393,1.928105],[-1.0279,4.121582,-1.403103],[-2.461081,3.304477,2.957317],[-2.375929,3.659383,2.953233],[1.417579,2.715389,3.718767],[0.819727,2.948823,3.810639],[1.329962,0.761779,3.203724],[1.73952,5.295229,2.537725],[0.952523,3.945016,3.548229],[-2.569498,0.633669,2.84818],[-2.276676,0.757013,2.780717],[-2.013147,7.354429,-0.003202],[0.93143,1.565913,3.600325],[1.249014,1.550556,3.585842],[2.287252,4.072353,3.124544],[-4.7349,7.006244,1.690653],[-3.500602,8.80386,-2.009196],[-0.582629,5.549138,2.000923],[-1.865297,6.356066,1.313593],[-3.212154,2.376143,-0.565593],[2.092889,3.493536,-1.727931],[-2.528501,2.784531,2.833758],[-2.565697,4.893154,2.559605],[-2.153366,5.04584,2.465215],[1.631311,2.568241,3.681445],[2.150193,4.699227,2.807505],[0.507599,5.01813,2.775892],[4.129862,1.863698,2.015101],[3.578279,4.50766,-0.009598],[3.491023,4.806749,1.549265],[0.619485,1.625336,3.605125],[1.107499,2.932557,3.790061],[-2.082292,6.99321,0.742601],[4.839909,1.379279,0.945274],[3.591328,4.322645,-0.259497],[1.055245,0.710686,3.16553],[-3.026494,7.842227,1.624553],[0.146569,6.119214,0.981673],[-2.043687,2.614509,2.785526],[-2.302242,3.047775,2.936355],[-2.245686,4.100424,2.87794],[2.116148,5.063507,2.572204],[-1.448406,7.64559,0.251692],[2.550717,4.9268,2.517526],[-2.955456,7.80293,-1.782407],[1.882995,4.637167,2.895436],[-2.014924,3.398262,2.954896],[-2.273654,4.771227,2.611418],[-2.162723,7.876761,0.702473],[-0.198659,5.823062,1.739272],[-1.280908,2.133189,-0.921241],[2.039932,4.251568,3.136579],[1.477815,4.354333,3.108325],[0.560504,3.744128,3.6913],[-2.234018,1.054373,2.352782],[-3.189156,7.686661,-2.514955],[-3.744736,7.69963,2.116973],[-2.283366,2.878365,2.87882],[-2.153786,4.457481,2.743529],[4.933978,1.677287,0.713773],[3.502146,0.535336,1.752511],[1.825169,4.419253,3.081198],[3.072331,0.280979,0.106534],[-0.508381,1.220392,2.878049],[-3.138824,8.445394,-1.659711],[-2.056425,2.954815,2.897241],[-2.035343,5.398477,2.215842],[-3.239915,7.126798,-0.712547],[-1.867923,7.989805,0.526518],[1.23405,6.248973,1.387189],[-0.216492,8.320933,-0.862495],[-2.079659,3.755709,2.928563],[-1.78595,4.300374,2.805295],[-1.856589,5.10678,2.386572],[-1.714362,5.544778,2.004623],[1.722403,4.200291,-1.408161],[0.195386,0.086928,-1.318006],[1.393693,3.013404,3.710686],[-0.415307,8.508471,-0.996883],[-1.853777,0.755635,2.757275],[-1.724057,3.64533,2.884251],[-1.884511,4.927802,2.530885],[-1.017174,7.783908,-0.227078],[-1.7798,2.342513,2.741749],[-1.841329,3.943996,2.88436],[1.430388,5.468067,2.503467],[-2.030296,0.940028,2.611088],[-1.677028,1.215666,2.607771],[-1.74092,2.832564,2.827295],[4.144673,0.631374,0.503358],[4.238811,0.653992,0.762436],[-1.847016,2.082815,2.642674],[4.045764,3.194073,0.852117],[-1.563989,8.112739,0.303102],[-1.781627,1.794836,2.602338],[-1.493749,2.533799,2.797251],[-1.934496,4.690689,2.658999],[-1.499174,5.777946,1.747498],[-2.387409,0.851291,1.500524],[-1.872211,8.269987,0.392533],[-4.647726,6.765771,0.833653],[-3.157482,0.341958,-0.20671],[-1.725766,3.24703,2.883579],[-1.458199,4.079031,2.836325],[-1.621548,4.515869,2.719266],[-1.607292,4.918914,2.505881],[-1.494661,5.556239,1.991599],[-1.727269,7.423769,0.012337],[-1.382497,1.161322,2.640222],[-1.52129,4.681714,2.615467],[-4.247127,2.792812,1.250843],[-1.576338,0.742947,2.769799],[-1.499257,2.172763,2.743142],[-1.480392,3.103261,2.862262],[1.049137,2.625836,3.775384],[-1.368063,1.791587,2.695516],[-1.307839,2.344534,2.767575],[-1.336758,5.092221,2.355225],[-1.5617,5.301749,2.21625],[-1.483362,8.537704,0.196752],[-1.517348,8.773614,0.074053],[-1.474302,1.492731,2.641433],[2.48718,0.644247,-0.920226],[0.818091,0.422682,3.171218],[-3.623398,6.930094,3.033045],[1.676333,3.531039,3.591591],[1.199939,5.683873,2.365623],[-1.223851,8.841201,0.025414],[-1.286307,3.847643,2.918044],[-1.25857,4.810831,2.543605],[2.603662,5.572146,1.991854],[0.138984,5.779724,2.077834],[-1.267039,3.175169,2.890889],[-1.293616,3.454612,2.911774],[-2.60112,1.277184,0.07724],[2.552779,3.649877,3.163643],[-1.038983,1.248011,2.605933],[-1.288709,4.390967,2.761214],[-1.034218,5.485963,2.011467],[-1.185576,1.464842,2.624335],[-1.045682,2.54896,2.761102],[4.259176,1.660627,2.018096],[-0.961707,1.717183,2.598342],[-1.044603,3.147464,2.855335],[-0.891998,4.685429,2.669696],[-1.027561,5.081672,2.377939],[4.386506,0.832434,0.510074],[-1.014225,9.064991,-0.175352],[-1.218752,2.895443,2.823785],[-0.972075,4.432669,2.788005],[-2.714986,0.52425,1.509798],[-0.699248,1.517219,2.645738],[-1.161581,2.078852,2.722795],[-0.845249,3.286247,2.996471],[1.068329,4.443444,2.993863],[3.98132,3.715557,1.027775],[1.658097,3.982428,-1.651688],[-4.053701,2.449888,0.734746],[-0.910935,2.214149,2.702393],[0.087824,3.96165,3.439344],[-0.779714,3.724134,2.993429],[-1.051093,3.810797,2.941957],[-0.644941,4.3859,2.870863],[-2.98403,8.666895,-3.691888],[-0.754304,2.508325,2.812999],[-4.635524,3.662891,0.913005],[-0.983299,4.125978,2.915378],[4.916497,1.905209,0.621315],[4.874983,1.728429,0.468521],[2.33127,5.181957,2.441697],[-0.653711,2.253387,2.7949],[-3.623744,8.978795,-2.46192],[-4.555927,6.160279,0.215755],[-4.940628,5.806712,1.18383],[3.308506,2.40326,-0.910776],[0.58835,5.251928,-0.992886],[2.152215,5.449733,2.331679],[-0.712755,0.766765,3.280375],[-0.741771,1.9716,2.657235],[-4.828957,5.566946,2.635623],[-3.474788,8.696771,-1.776121],[1.770417,6.205561,1.331627],[-0.620626,4.064721,2.968972],[-1.499187,2.307735,-0.978901],[4.098793,2.330245,1.667951],[1.940444,6.167057,0.935904],[-2.314436,1.104995,1.681277],[-2.733629,7.742793,1.7705],[-0.452248,4.719868,2.740834],[-0.649143,4.951713,2.541296],[-0.479417,9.43959,-0.676324],[-2.251853,6.559275,0.046819],[0.033531,8.316907,-0.789939],[-0.513125,0.995673,3.125462],[-2.637602,1.039747,0.602434],[1.527513,6.230089,1.430903],[4.036124,2.609846,1.506498],[-3.559828,7.877892,1.228076],[-4.570736,4.960193,0.838201],[-0.432121,5.157731,2.467518],[-1.206735,4.562511,-1.237054],[-0.823768,3.788746,-1.567481],[-3.095544,7.353613,-1.024577],[-4.056088,7.631119,2.062001],[-0.289385,5.382261,2.329421],[1.69752,6.136483,1.667037],[-0.168758,5.061138,2.617453],[2.853576,1.605528,-1.229958],[-4.514319,6.586675,0.352756],[-2.558081,7.741151,1.29295],[1.61116,5.92358,2.071534],[3.936921,3.354857,0.091755],[-0.1633,1.119272,3.147975],[0.067551,1.593475,3.38212],[-1.303239,2.328184,-1.011672],[-0.438093,0.73423,3.398384],[-4.62767,3.898187,0.849573],[0.286853,4.165281,3.284834],[-2.968052,8.492812,-3.493693],[-0.111896,3.696111,3.53791],[-3.808245,8.451731,-1.574742],[0.053416,5.558764,2.31107],[3.956269,3.012071,0.11121],[-0.710956,8.106561,-0.665154],[0.234725,2.717326,3.722379],[-0.031594,2.76411,3.657347],[-0.017371,4.700633,2.81911],[0.215064,5.034859,2.721426],[-0.111151,8.480333,-0.649399],[3.97942,3.575478,0.362219],[0.392962,4.735392,2.874321],[4.17015,2.085087,1.865999],[0.169054,1.244786,3.337709],[0.020049,3.165818,3.721736],[0.248212,3.595518,3.698376],[0.130706,5.295541,2.540034],[-4.541357,4.798332,1.026866],[-1.277485,1.289518,-0.667272],[3.892133,3.54263,-0.078056],[4.057379,3.03669,0.997913],[0.287719,0.884758,3.251787],[0.535771,1.144701,3.400096],[0.585303,1.399362,3.505353],[0.191551,2.076246,3.549355],[0.328656,2.394576,3.649623],[0.413124,3.240728,3.771515],[0.630361,4.501549,2.963623],[0.529441,5.854392,2.120225],[3.805796,3.769958,-0.162079],[3.447279,4.344846,-0.467276],[0.377618,5.551116,2.426017],[0.409355,1.821269,3.606333],[0.719959,2.194726,3.703851],[0.495922,3.501519,3.755661],[0.603408,5.354097,2.603088],[-4.605056,7.531978,1.19579],[0.907972,0.973128,3.356513],[0.750134,3.356137,3.765847],[0.4496,3.993244,3.504544],[-3.030738,7.48947,-1.259169],[0.707505,5.602005,2.43476],[0.668944,0.654891,3.213797],[0.593244,2.700978,3.791427],[1.467759,3.30327,3.71035],[3.316249,2.436388,2.581175],[3.26138,1.724425,2.539028],[-1.231292,7.968263,0.281414],[-0.108773,8.712307,-0.790607],[4.445684,1.819442,1.896988],[1.998959,2.281499,3.49447],[2.162269,2.113817,3.365449],[4.363397,1.406731,1.922714],[4.808,2.225842,0.611127],[2.735919,0.771812,-0.701142],[1.897735,2.878428,3.583482],[-3.31616,5.331985,3.212394],[-3.3314,6.018137,3.313018],[-3.503183,6.480103,3.222216],[-1.904453,5.750392,1.913324],[-1.339735,3.559592,-1.421817],[-1.044242,8.22539,0.037414],[1.643492,3.110676,3.647424],[3.992832,3.686244,0.710946],[1.774207,1.71842,3.475768],[-3.438842,5.5713,3.427818],[4.602447,1.2583,1.619528],[-0.925516,7.930042,0.072336],[-1.252093,3.846565,-1.420761],[-3.426857,5.072419,2.97806],[-3.160408,6.152629,3.061869],[3.739931,3.367082,2.041273],[1.027419,4.235891,3.251253],[4.777703,1.887452,1.560409],[-3.318528,6.733796,2.982968],[2.929265,4.962579,2.271079],[3.449761,2.838629,2.474576],[-3.280159,5.029875,2.787514],[4.068939,2.993629,0.741567],[0.303312,8.70927,-1.121972],[0.229852,8.981322,-1.186075],[-0.011045,9.148156,-1.047057],[-2.942683,5.579613,2.929297],[-3.145409,5.698727,3.205778],[-3.019089,6.30887,2.794323],[-3.217135,6.468191,2.970032],[-3.048298,6.993641,2.623378],[-3.07429,6.660982,2.702434],[3.612011,2.5574,2.25349],[2.54516,4.553967,2.75884],[-1.683759,7.400787,0.250868],[-1.756066,7.463557,0.448031],[-3.023761,5.149697,2.673539],[3.112376,2.677218,2.782378],[2.835327,4.581196,2.567146],[-2.973799,7.225458,2.506988],[-0.591645,8.740662,-0.505845],[3.782861,2.04337,2.03066],[3.331604,3.36343,2.605047],[2.966866,1.205497,2.537432],[0.002669,9.654748,-1.355559],[2.632801,0.58497,2.540311],[-2.819398,5.087372,2.521098],[2.616193,5.332961,2.194288],[-3.193973,4.925634,2.607924],[-3.12618,5.27524,2.944544],[-0.426003,8.516354,-0.501528],[2.802717,1.387643,2.751649],[-3.120597,7.889111,-2.75431],[2.636648,1.71702,2.991302],[-2.853151,6.711792,2.430276],[-2.843836,6.962865,2.400842],[1.9696,3.199023,3.504514],[-2.461751,0.386352,3.008994],[1.64127,0.495758,3.02958],[-4.330472,5.409831,0.025287],[-2.912387,5.980416,2.844261],[-2.490069,0.211078,2.985391],[3.581816,4.809118,0.733728],[2.693199,2.647213,3.126709],[-0.182964,8.184108,-0.638459],[-2.226855,0.444711,2.946552],[-0.720175,8.115055,0.017689],[2.645302,4.316212,2.850139],[-0.232764,9.329503,-0.918639],[4.852365,1.471901,0.65275],[2.76229,2.014994,2.957755],[-2.808374,5.354301,2.644695],[-2.790967,6.406963,2.547985],[-1.342684,0.418488,-1.669183],[2.690675,5.593587,-0.041236],[4.660146,1.6318,1.713314],[2.775667,3.007229,3.111332],[-0.396696,8.963432,-0.706202],[2.446707,2.740617,3.321433],[-4.803209,5.884634,2.603672],[-2.652003,1.6541,1.5078],[3.932327,3.972874,0.831924],[2.135906,0.955587,2.986608],[2.486131,2.053802,3.124115],[-0.386706,8.115753,-0.37565],[-2.720727,7.325044,2.224878],[-1.396946,7.638016,-0.16486],[-0.62083,7.989771,-0.144413],[-2.653272,5.729684,2.667679],[3.038188,4.65835,2.364142],[2.381721,0.739472,2.788992],[-2.345829,5.474929,2.380633],[-2.518983,6.080562,2.479383],[-2.615793,6.839622,2.186116],[-2.286566,0.143752,2.766848],[-4.771219,6.508766,1.070797],[3.717308,2.905019,2.097994],[2.50521,3.016743,3.295898],[2.208448,1.56029,3.216806],[3.346783,1.01254,2.119951],[2.653503,3.26122,3.175738],[-2.359636,5.827519,2.402297],[-1.952693,0.558102,2.853307],[-0.321562,9.414885,-1.187501],[3.138923,1.405072,2.520765],[1.493728,1.780051,3.621969],[3.01817,0.907291,2.336909],[3.183548,1.185297,2.352175],[1.608619,5.006753,2.695131],[-4.723919,6.836107,1.095288],[-1.017586,8.865429,-0.149328],[4.730762,1.214014,0.64008],[-2.135182,6.647907,1.495471],[-2.420382,6.546114,2.108209],[-2.458053,7.186346,1.896623],[3.437124,0.275798,1.138203],[0.095925,8.725832,-0.926481],[2.417376,2.429869,3.287659],[2.279951,1.200317,3.049994],[2.674753,2.326926,3.044059],[-2.328123,6.849164,1.75751],[-3.418616,7.853407,0.126248],[-3.151587,7.77543,-0.110889],[2.349144,5.653242,2.05869],[-2.273236,6.085631,2.242888],[-4.560601,4.525342,1.261241],[2.866334,3.796067,2.934717],[-2.17493,6.505518,1.791367],[3.12059,3.283157,2.818869],[3.037703,3.562356,2.866653],[0.066233,9.488418,-1.248237],[2.749941,0.975018,2.573371],[-2.155749,5.801033,2.204009],[-2.162778,6.261889,2.028596],[1.936874,0.459142,2.956718],[3.176249,4.335541,2.440447],[4.356599,1.029423,1.700589],[3.873502,3.082678,1.80431],[2.895489,4.243034,2.735259],[-0.095774,9.468195,-1.07451],[-1.124982,7.886808,-0.480851],[3.032304,3.065454,2.897927],[3.692687,4.5961,0.957858],[-3.013045,3.807235,-1.098381],[-0.790012,8.92912,-0.367572],[1.905793,0.73179,2.996728],[3.530396,3.426233,2.356583],[2.12299,0.624933,2.929167],[-2.069196,6.039284,2.01251],[-3.565623,7.182525,2.850039],[2.959264,2.376337,2.829242],[2.949071,1.822483,2.793933],[4.036142,0.763803,1.703744],[-1.993527,6.180318,1.804936],[-0.030987,0.766389,3.344766],[-0.549683,8.225193,-0.189341],[-0.765469,8.272246,-0.127174],[-2.947047,7.541648,-0.414113],[-3.050327,9.10114,-3.435619],[3.488566,2.231807,2.399836],[3.352283,4.727851,1.946438],[4.741011,2.162773,1.499574],[-1.815093,6.072079,1.580722],[-3.720969,8.267927,-0.984713],[1.932826,3.714052,3.427488],[3.323617,4.438961,2.20732],[0.254111,9.26364,-1.373244],[-1.493384,7.868585,-0.450051],[-0.841901,0.776135,-1.619467],[0.243537,6.027668,0.091687],[0.303057,0.313022,-0.531105],[-0.435273,0.474098,3.481552],[2.121507,2.622389,3.486293],[1.96194,1.101753,3.159584],[3.937991,3.407551,1.551392],[0.070906,0.295753,1.377185],[-1.93588,7.631764,0.651674],[-2.523531,0.744818,-0.30985],[2.891496,3.319875,2.983079],[4.781765,1.547061,1.523129],[-2.256064,7.571251,0.973716],[3.244861,3.058249,2.724392],[-0.145855,0.437775,3.433662],[1.586296,5.658538,2.358487],[3.658336,3.774921,2.071837],[2.840463,4.817098,2.46376],[-1.219464,8.122542,-0.672808],[-2.520906,2.664486,-1.034346],[-1.315417,8.471365,-0.709557],[3.429165,3.74686,2.446169],[3.074579,3.840758,2.767409],[3.569443,3.166337,2.333647],[2.294337,3.280051,3.359346],[2.21816,3.66578,3.269222],[2.158662,4.151444,-1.357919],[1.13862,4.380986,-1.404565],[3.388382,2.749931,-0.840949],[3.059892,5.084848,2.026066],[3.204739,2.075145,2.640706],[3.387065,1.42617,2.305275],[3.910398,2.670742,1.750179],[3.471512,1.945821,2.395881],[4.08082,1.070654,1.960171],[-1.057861,0.133036,2.146707],[-0.151749,5.53551,-0.624323],[3.233099,4.003778,2.571172],[2.611726,5.319199,-0.499388],[2.682909,1.094499,-1.206247],[-1.22823,7.656887,0.041409],[-2.293247,7.259189,0.013844],[0.081315,0.202174,3.286381],[-1.002038,5.794454,-0.187194],[3.448856,4.08091,2.258325],[0.287883,9.006888,-1.550641],[-3.851019,4.059839,-0.646922],[3.610966,4.205438,1.913129],[2.239042,2.950872,3.449959],[0.216305,0.442843,3.328052],[1.87141,2.470745,3.574559],[3.811378,2.768718,-0.228364],[2.511081,1.362724,2.969349],[-1.59813,7.866506,0.440184],[-3.307975,2.851072,-0.894978],[-0.107011,8.90573,-0.884399],[-3.855315,2.842597,-0.434541],[2.517853,1.090768,2.799687],[3.791709,2.36685,2.002703],[4.06294,2.773922,0.452723],[-2.973289,7.61703,-0.623653],[-2.95509,8.924462,-3.446319],[2.861402,0.562592,2.184397],[-1.109725,8.594206,-0.076812],[-0.725722,7.924485,-0.381133],[-1.485587,1.329994,-0.654405],[-4.342113,3.233735,1.752922],[-2.968049,7.955519,-2.09405],[-3.130948,0.446196,0.85287],[-4.958475,5.757329,1.447055],[-3.086547,7.615193,-1.953168],[-3.751923,5.412821,3.373373],[-4.599645,7.480953,1.677134],[1.133992,0.274871,0.032249],[-2.956512,8.126905,-1.785461],[-0.960645,4.73065,-1.191786],[-2.871064,0.875559,0.424881],[-4.932114,5.99614,1.483845],[-2.981761,8.124612,-1.387276],[0.362298,8.978545,-1.368024],[-4.408375,3.046271,0.602373],[2.865841,2.322263,-1.344625],[-4.7848,5.620895,0.594432],[-2.88322,0.338931,1.67231],[-4.688101,6.772931,1.872318],[-4.903948,6.164698,1.27135],[2.85663,1.005647,-0.906843],[2.691286,0.209811,0.050512],[-4.693636,6.477556,0.665796],[-4.472331,6.861067,0.477318],[0.883065,0.204907,3.073933],[-0.995867,8.048729,-0.653897],[-0.794663,5.670397,-0.390119],[3.313153,1.638006,-0.722289],[-4.856459,5.394758,1.032591],[-3.005448,7.783023,-0.819641],[3.11891,2.036974,-1.08689],[-2.364319,2.408419,2.63419],[-2.927132,8.75435,-3.537159],[-3.296222,7.964629,-3.134625],[-1.642041,4.13417,-1.301665],[2.030759,0.176372,-1.030923],[-4.559069,3.751053,0.548453],[3.438385,4.59454,-0.243215],[-2.561769,7.93935,0.177696],[2.990593,1.335314,-0.943177],[1.2808,0.276396,-0.49072],[-0.318889,0.290684,0.211143],[3.54614,3.342635,-0.767878],[-3.073372,7.780018,-2.357807],[-4.455388,4.387245,0.361038],[-4.659393,6.276064,2.767014],[0.636799,4.482223,-1.426284],[-2.987681,8.072969,-2.45245],[-2.610445,0.763554,1.792054],[3.358241,2.006707,-0.802973],[-0.498347,0.251594,0.962885],[3.1322,0.683312,2.038777],[-4.389801,7.493776,0.690247],[0.431467,4.22119,-1.614215],[-4.376181,3.213141,0.273255],[-4.872319,5.715645,0.829714],[-4.826893,6.195334,0.849912],[3.516562,2.23732,-0.677597],[3.131656,1.698841,-0.975761],[-4.754925,5.411666,1.989303],[-2.987299,7.320765,-0.629479],[-3.757635,3.274862,-0.744022],[3.487044,2.541999,-0.699933],[-4.53274,4.649505,0.77093],[-1.424192,0.099423,2.633327],[3.090867,2.476975,-1.146957],[-2.713256,0.815622,2.17311],[3.348121,3.254167,-0.984896],[-3.031379,0.16453,-0.309937],[-0.949757,4.518137,-1.309172],[-0.889509,0.095256,1.288803],[3.539594,1.966105,-0.553965],[-4.60612,7.127749,0.811958],[-2.332953,1.444713,1.624548],[3.136293,2.95805,-1.138272],[3.540808,3.069058,-0.735285],[3.678852,2.362375,-0.452543],[-4.648898,7.37438,0.954791],[-0.646871,0.19037,3.344746],[2.2825,0.29343,-0.826273],[-4.422291,7.183959,0.557517],[-4.694668,5.246103,2.541768],[-4.583691,4.145486,0.600207],[-2.934854,7.912513,-1.539269],[-3.067861,7.817472,-0.546501],[3.825095,3.229512,-0.237547],[2.532494,0.323059,2.387105],[-2.514583,0.692857,1.23597],[-4.736805,7.214384,1.259421],[-2.98071,8.409903,-2.468199],[2.621468,1.385844,-1.406355],[3.811447,3.560855,1.847828],[3.432925,1.497205,-0.489784],[3.746609,3.631538,-0.39067],[3.594909,2.832257,-0.576012],[-0.404192,5.300188,-0.856561],[-4.762996,6.483774,1.702648],[-4.756612,6.786223,1.43682],[-2.965309,8.437217,-2.785495],[2.863867,0.74087,-0.429684],[4.02503,2.968753,1.392419],[3.669036,1.833858,-0.304971],[-2.888864,0.720537,0.778057],[-2.36982,0.979443,1.054447],[-2.959259,8.222303,-2.659724],[-3.467825,7.545739,-2.333445],[2.153426,0.446256,-1.20523],[-3.229807,9.189699,-3.596609],[-3.72486,8.773707,-2.046671],[3.687218,3.297751,-0.523746],[1.381025,0.08815,-1.185668],[-2.796828,7.205622,-0.208783],[3.647194,4.066232,-0.291507],[-4.578376,3.885556,1.52546],[-2.840262,0.63094,1.89499],[-2.429514,0.922118,1.820781],[-4.675079,6.573925,2.423363],[2.806207,4.320188,-1.027372],[-1.289608,0.097241,1.321661],[-3.010731,8.141334,-2.866148],[3.202291,1.235617,-0.549025],[4.094792,2.477519,0.304581],[2.948403,0.966873,-0.664857],[-4.83297,5.920587,2.095461],[-2.169693,7.257277,0.946184],[-1.335807,3.057597,-1.303166],[-1.037877,0.64151,-1.685271],[2.627919,0.089814,0.439074],[3.815794,3.808102,1.730493],[-2.973455,8.433141,-3.08872],[-2.391558,7.331428,1.658264],[-4.333107,4.529978,1.850516],[-4.640293,3.767107,1.168841],[3.600716,4.46931,1.734024],[3.880803,1.730158,-0.172736],[3.814183,4.262372,1.167042],[4.37325,0.829542,1.413729],[2.490447,5.75111,0.011492],[3.460003,4.962436,1.188971],[3.918419,3.814234,1.358271],[-0.807595,8.840504,-0.953711],[3.752855,4.20577,1.57177],[-2.991085,8.816501,-3.244595],[-2.333196,7.128889,1.551985],[3.977718,3.570941,1.25937],[4.360071,0.755579,1.079916],[4.637579,1.027973,1.032567],[-2.317,7.421066,1.329589],[-1.013404,8.293662,-0.7823],[4.548023,1.020644,1.420462],[4.763258,1.266798,1.296203],[4.896,2.073084,1.255213],[4.015005,3.325226,1.093879],[4.94885,1.860936,0.894463],[-2.189645,6.954634,1.270077],[4.887442,1.720992,1.288526],[-3.184068,7.871802,0.956189],[-1.274318,0.839887,-1.224389],[-2.919521,7.84432,0.541629],[-2.994586,7.766102,1.96867],[-3.417504,9.241714,-3.093201],[-3.174563,7.466456,2.473617],[-3.263067,9.069412,-3.003459],[-2.841592,0.529833,2.693434],[-3.611069,9.158804,-2.829871],[-4.642828,5.927526,0.320549],[-3.809308,9.051035,-2.692749],[-2.837582,7.487987,-0.106206],[4.773025,2.330442,1.213899],[4.897435,2.209906,0.966657],[-3.067637,8.164062,-1.12661],[-3.122129,8.08074,-0.899194],[4.571019,2.358113,1.462054],[4.584884,2.454418,0.709466],[-3.661093,7.146581,-0.475948],[4.735131,2.415859,0.933939],[4.207556,2.540018,1.218293],[-3.607595,7.89161,-0.121172],[-1.527952,0.775564,-1.061903],[4.53874,2.503273,1.099583],[-3.938837,7.587988,0.082449],[-4.853582,6.152409,1.787943],[-4.752214,6.247234,2.296873],[4.602935,2.363955,0.488901],[-1.81638,6.365879,0.868272],[0.595467,4.744074,-1.32483],[1.87635,3.511986,-1.842924],[4.330947,2.534326,0.720503],[4.108736,2.750805,0.904552],[-1.890939,8.492628,-0.290768],[-3.504309,6.173058,-0.422804],[-1.611992,6.196732,0.648736],[-3.899149,7.826123,1.088845],[-3.078303,3.008813,-1.035784],[-2.798999,7.844899,1.340061],[-1.248839,5.959105,0.041761],[0.767779,4.337318,3.090817],[-3.831177,7.515605,2.432261],[-1.667528,6.156208,0.365267],[-1.726078,6.237384,1.100059],[-3.972037,4.520832,-0.370756],[-4.40449,7.636357,1.520425],[-1.34506,6.004054,1.293159],[-1.233556,6.049933,0.500651],[-3.696869,7.79732,0.37979],[-3.307798,8.949964,-2.698113],[-1.997295,6.615056,1.103691],[-3.219222,8.336394,-1.150614],[-3.452623,8.31866,-0.9417],[-3.94641,2.990494,2.212592],[-3.250025,8.030414,-0.596097],[-2.02375,1.571333,2.397939],[-3.190358,7.665013,2.268183],[-2.811918,7.618526,2.145587],[-1.005265,5.892303,0.072158],[-0.93721,5.974148,0.906669],[-4.646072,7.492193,1.45312],[-0.252931,1.797654,3.140638],[-1.076064,5.738433,1.695953],[-3.980534,7.744391,1.735791],[-0.721187,5.939396,0.526032],[-0.42818,5.919755,0.229001],[-1.43429,6.11622,0.93863],[-0.985638,5.939683,0.290636],[-4.433836,7.461372,1.966437],[-3.696398,7.844859,1.547325],[-3.390772,7.820186,1.812204],[-2.916787,7.864019,0.804341],[-3.715952,8.037269,-0.591341],[-4.204634,7.72919,1.119866],[-4.592233,5.592883,0.246264],[3.307299,5.061701,1.622917],[-3.515159,7.601467,2.368914],[-3.435742,8.533457,-1.37916],[-0.269421,4.545635,-1.366445],[-2.542124,3.768736,-1.258512],[-3.034003,7.873773,1.256854],[-2.801399,7.856028,1.080137],[3.29354,5.220894,1.081767],[-2.35109,1.299486,1.01206],[-3.232213,7.768136,2.047563],[3.290415,5.217525,0.68019],[-3.415109,7.731034,2.144326],[3.440357,4.962463,0.373387],[3.147346,5.352121,1.386923],[2.847252,5.469051,1.831981],[3.137682,5.410222,1.050188],[3.102694,5.310456,1.676434],[-3.044601,0.39515,1.994084],[2.903647,5.561338,1.518598],[-3.810148,8.093598,-0.889131],[4.234835,0.803054,1.593271],[3.240165,5.228747,0.325955],[3.037452,5.509825,0.817137],[2.635031,5.795187,1.439724],[3.071607,5.318303,0.080142],[2.909167,5.611751,1.155874],[3.044889,5.465928,0.486566],[2.502256,5.770673,1.740054],[-0.067497,0.086416,-1.190239],[2.33326,5.906051,0.138295],[0.65096,4.205423,3.308767],[-2.671137,7.936535,0.432731],[2.14463,5.879214,1.866047],[-4.776469,5.890689,0.561986],[2.72432,5.655145,0.211951],[2.730488,5.751455,0.695894],[2.572682,5.869295,1.152663],[1.906776,5.739123,2.196551],[2.344414,5.999961,0.772922],[-3.377905,7.448708,-1.863251],[2.285149,5.968156,1.459258],[2.385989,5.928974,0.3689],[2.192111,6.087516,0.959901],[2.36372,6.001101,1.074346],[1.972022,6.079603,1.591175],[1.87615,5.976698,1.91554],[-3.824761,9.05372,-2.928615],[2.044704,6.129704,1.263111],[-2.583046,0.849537,2.497344],[-0.078825,2.342205,3.520322],[-0.704686,0.537165,3.397194],[-0.257449,3.235334,3.647545],[-0.332064,1.448284,3.022583],[-2.200146,0.898284,-0.447212],[-2.497508,1.745446,1.829167],[0.30702,4.416315,2.978956],[-3.205197,3.479307,-1.040582],[0.110069,9.347725,-1.563686],[-0.82754,0.883886,3.065838],[-2.017103,1.244785,2.42512],[-0.421091,2.309929,3.153898],[-0.491604,3.796072,3.16245],[2.786955,3.501241,-1.340214],[-3.229055,4.380713,-0.899241],[3.730768,0.76845,1.90312],[-0.561079,2.652382,3.152463],[-3.461471,3.086496,2.662505],[-0.661405,3.446009,3.179939],[-0.915351,0.636755,3.243708],[-2.992964,8.915628,-3.729833],[-0.439627,3.502104,3.42665],[-1.154217,0.883181,2.800835],[-1.736193,1.465474,2.595489],[-0.423928,3.24435,3.548277],[-0.511153,2.871046,3.379749],[-0.675722,2.991756,3.143262],[-1.092602,0.599103,3.090639],[-0.89821,2.836952,2.840023],[-2.658412,0.781376,0.960575],[-2.271455,1.222857,1.330478],[-0.877861,1.111222,2.72263],[-0.306959,2.876987,3.556044],[-3.839274,7.84138,-0.918404],[-0.172094,4.083799,3.141708],[-1.548332,0.2529,2.864655],[-0.217353,4.873911,-1.223104],[-3.384242,3.181056,-0.95579],[-2.731704,0.382421,2.895502],[-1.285037,0.551267,2.947675],[0.077224,4.246579,3.066738],[-0.479979,1.77955,2.860011],[-0.716375,1.224694,2.666751],[-0.54622,3.138255,3.393457],[-2.33413,1.821222,2.124883],[-0.50653,2.037147,2.897465],[2.451291,1.211389,-1.466589],[-3.160047,2.894081,2.724286],[-4.137258,5.433431,3.21201],[0.462896,0.320456,-0.174837],[-0.37458,2.609447,3.379253],[-3.095244,0.256205,2.196446],[-4.197985,5.732991,3.262924],[-0.729747,0.246036,0.497036],[-2.356189,5.062,-0.965619],[-1.609036,0.25962,-1.487367],[-4.074381,6.074061,3.409459],[-3.619304,4.0022,2.65705],[-0.543393,8.742896,-1.056622],[-4.30356,6.858934,2.879642],[-0.716688,2.901831,-2.11202],[1.547362,0.083189,1.138764],[-0.250916,0.275268,1.201344],[-3.778035,3.13624,2.466177],[-4.594316,5.771342,3.01694],[-3.717706,3.442887,2.603344],[-4.311163,5.224669,3.019373],[-0.610389,2.095161,-1.923515],[-3.040086,6.196918,-0.429149],[-3.802695,3.768247,2.545523],[-0.159541,2.043362,3.328549],[-3.744329,4.31785,2.491889],[-3.047939,0.214155,1.873639],[-4.41685,6.113058,3.166774],[-1.165133,0.460692,-1.742134],[-1.371289,4.249996,-1.317935],[-3.447883,0.3521,0.466205],[-4.495555,6.465548,2.944147],[-3.455335,0.171653,0.390816],[-3.964028,4.017196,2.376009],[-1.323595,1.763126,-0.750772],[-3.971142,5.277524,-0.19496],[-3.222052,0.237723,0.872229],[-4.403784,3.89107,1.872077],[-3.333311,0.342997,0.661016],[-4.495871,4.29606,1.63608],[-3.636081,2.760711,2.361949],[-4.487235,3.559608,1.66737],[-4.719787,7.26888,1.658722],[-1.086143,9.035741,-0.707144],[-2.339693,1.600485,-0.404817],[-4.642011,7.123829,1.990987],[-1.498077,3.854035,-1.369787],[-4.188372,4.729363,2.02983],[-3.116344,5.882284,-0.468884],[-4.305236,4.246417,1.976991],[-3.022509,0.22819,1.065688],[-2.799916,0.52022,1.128319],[-4.262823,3.534409,2.020383],[-4.221533,3.947676,2.11735],[-3.744353,4.391712,-0.6193],[-1.272905,0.156694,-1.741753],[-3.62491,2.669825,-0.549664],[-4.180756,3.096179,1.987215],[-4.059276,4.305313,2.232924],[-2.812753,0.183226,1.370267],[-4.032437,3.512234,2.309985],[-0.03787,0.28188,0.530391],[-4.711562,5.468653,2.822838],[-4.500636,6.953314,2.564445],[-4.479433,7.216991,2.270682],[3.990562,0.50522,0.716309],[-2.512229,6.863447,-0.100658],[-2.968058,6.956639,-0.37061],[2.550375,3.142683,-1.54068],[-2.320059,3.521605,-1.279397],[-4.556319,6.64662,2.745363],[-4.281091,7.108116,2.667598],[-2.050095,8.411689,0.121353],[-2.44854,1.135487,0.851875],[3.121815,0.699943,-0.277167],[-4.69877,6.00376,2.843035],[-1.360599,8.824742,-0.595597],[1.128437,0.171611,0.301691],[-4.360146,6.289423,0.042233],[1.400795,4.088829,-1.620409],[-3.193462,8.460137,-3.559446],[-3.168771,8.878431,-3.635795],[-3.434275,9.304302,-3.460878],[-3.349993,8.808093,-3.38179],[-3.304823,8.323865,-3.325905],[-3.572607,9.308843,-3.207672],[-3.166393,8.201215,-3.43014],[-3.451638,9.05331,-3.351345],[-3.309591,8.549758,-3.375055],[-3.527992,8.793926,-3.100376],[-3.6287,8.981677,-3.076319],[-3.445505,8.001887,-2.8273],[-3.408011,8.221014,-3.039237],[-3.65928,8.740382,-2.808856],[-3.878019,8.797295,-2.462866],[-3.515132,8.232341,-2.747739],[-3.460331,8.51524,-3.06818],[-3.403703,7.658628,-2.648789],[-3.507113,8.00159,-2.582275],[-3.607373,8.174737,-2.401723],[-3.749043,8.378084,-2.226959],[-3.648514,8.502213,-2.6138],[-2.534199,0.904753,2.021148],[1.4083,5.744252,-0.571402],[-3.852536,8.571009,-2.352358],[2.868255,5.373126,-0.163705],[2.224363,4.669891,-1.061586],[-4.528281,4.885838,1.340274],[1.30817,4.609629,-1.28762],[-4.519698,3.422501,1.354826],[-3.549955,7.783228,-2.332859],[1.12313,6.120856,0.045115],[-3.620324,7.57716,-2.033423],[-0.798833,2.624133,-1.992682],[-3.617587,7.783148,-2.051383],[-3.669293,8.103776,-2.10227],[-3.892417,8.667436,-2.167288],[-0.537435,0.285345,-0.176267],[-0.841522,3.299866,-1.887861],[-0.761547,3.647082,-1.798953],[-3.661544,7.85708,-1.867924],[-3.886763,8.551783,-1.889171],[-0.591244,1.549749,-1.714784],[-0.775276,1.908218,-1.597609],[-0.961458,2.573273,-1.695549],[-2.215672,1.335009,2.143031],[-4.622674,4.130242,1.220683],[1.07344,0.290099,1.584734],[-0.976906,2.92171,-1.76667],[-1.13696,3.194401,-1.513455],[-3.743262,7.99949,-1.629286],[-2.876359,4.900986,-0.879556],[0.550835,3.905557,-2.031372],[0.777647,4.992314,-1.215703],[1.445881,4.266201,-1.414663],[1.274222,5.510543,-0.824495],[-0.864685,2.318581,-1.702389],[-0.627458,3.820722,-1.743153],[-3.867699,8.30866,-1.850066],[1.635287,5.45587,-0.83844],[-1.037876,2.538589,-1.513504],[-4.38993,4.73926,1.699639],[0.048709,4.765232,-1.279506],[-0.626548,1.339887,-1.595114],[-3.682827,7.643453,-1.723398],[-3.868783,8.180191,-1.511743],[-0.76988,1.508373,-1.419599],[-1.138374,2.766765,-1.448163],[1.699883,5.780752,-0.475361],[1.214305,0.308517,1.866405],[-1.713642,0.373461,-1.265204],[-1.582388,0.58294,-1.267977],[-0.879549,1.821581,-1.313787],[0.519057,5.858757,-0.381397],[-3.770989,2.449208,-0.132655],[0.087576,0.156713,-1.53616],[-0.942622,2.146534,-1.421494],[-1.026192,1.022164,-1.145423],[-0.964079,1.645473,-1.067631],[-1.109128,2.458789,-1.29106],[-1.037478,0.209489,-1.805424],[-3.724391,7.599686,-1.273458],[-3.787898,7.951792,-1.304794],[3.821677,2.165581,-0.181535],[-2.39467,0.304606,-0.570375],[-2.352928,1.0439,2.079369],[-0.288899,9.640684,-1.006079],[-3.472118,7.263001,-1.080326],[-1.240769,0.972352,-0.976446],[-1.845253,0.356801,-0.995574],[-2.32279,7.915361,-0.057477],[-1.08092,2.179315,-1.168821],[4.598833,2.156768,0.280264],[-4.725417,6.442373,2.056809],[-0.490347,9.46429,-0.981092],[-1.99652,0.09737,-0.765828],[-1.137793,1.888846,-0.894165],[-0.37247,4.29661,-1.465199],[-0.184631,5.692946,-0.421398],[-3.751694,7.742231,-1.086908],[-1.001416,1.298225,-0.904674],[-3.536884,7.190777,-0.788609],[-3.737597,7.511281,-0.940052],[-1.766651,0.669388,-0.873054],[3.112245,3.474345,-1.129672],[-0.175504,3.81298,-2.0479],[-3.766762,7.412514,-0.681569],[-0.63375,9.439424,-0.785128],[-0.518199,4.768982,-1.258625],[0.790619,4.212759,-1.610218],[-3.761951,3.742528,-0.756283],[0.897483,5.679808,-0.612423],[2.221126,4.427468,-1.252155],[-0.728577,5.846457,0.062702],[0.194451,9.503908,-1.482461],[-0.099243,9.385459,-1.39564],[0.643185,3.636855,-2.180247],[0.894522,5.900601,-0.356935],[2.595516,4.75731,-0.893245],[1.108497,3.936893,-1.905098],[1.989894,5.789726,-0.343268],[-3.802345,7.655508,-0.613817],[2.339353,4.96257,-0.90308],[0.12564,4.013324,-1.879236],[-4.078965,3.683254,-0.445439],[2.092899,5.256128,-0.831607],[0.427571,0.291769,1.272964],[2.335549,3.480056,-1.581949],[-0.15687,0.324827,-1.648922],[-0.536522,5.760786,-0.203535],[1.507082,0.078251,-0.923109],[-1.854742,0.134826,2.698774],[-3.939827,3.168498,-0.526144],[-3.98461,3.39869,-0.533212],[-3.961738,4.217132,-0.489147],[4.273789,2.181164,0.153786],[-0.470498,5.645664,-0.439079],[-0.414539,5.488017,-0.673379],[-0.097462,5.062739,-1.114863],[1.198092,5.882232,-0.391699],[2.855834,5.085022,-0.498678],[1.037998,4.129757,-1.701811],[1.728091,5.068444,-1.063761],[-3.832258,2.625141,-0.311384],[-4.078526,3.070256,-0.284362],[-4.080365,3.954243,-0.440471],[-0.152578,5.276267,-0.929815],[-1.489635,8.928082,-0.295891],[0.759294,5.15585,-1.087374],[-4.000338,2.801647,-0.235135],[-4.290801,3.823209,-0.19374],[-4.221493,4.25618,-0.189894],[-4.066195,4.71916,-0.201724],[-0.155386,4.076396,-1.662865],[3.054571,4.414305,-0.825985],[-1.652919,8.726499,-0.388504],[-3.042753,0.560068,-0.126425],[-2.434456,1.118088,-0.213563],[-2.623502,1.845062,-0.283697],[-4.233371,3.43941,-0.202918],[2.726702,3.82071,-1.280097],[0.184199,4.14639,-1.673653],[-1.289203,0.624562,-1.560929],[-3.823676,7.382458,-0.407223],[0.476667,5.064419,-1.143742],[-3.873651,4.955112,-0.269389],[1.349666,5.312227,-1.000274],[-2.043776,8.434488,-0.108891],[-2.763964,0.733395,-0.129294],[-4.380505,3.664409,-0.024546],[-0.71211,5.341811,-0.803281],[-3.960858,7.183112,-0.118407],[-3.822277,7.712853,-0.263221],[-2.346808,8.108588,0.063244],[-1.841731,8.642999,-0.142496],[-2.600055,0.985604,-0.043595],[-3.513057,2.213243,-0.044151],[-3.963492,2.603055,-0.080898],[-4.258066,3.14537,-0.027046],[-4.261572,5.00334,0.13004],[0.795464,3.99873,-1.905688],[-3.300873,0.384761,0.013271],[-2.770244,0.881942,0.077313],[-3.456227,1.993871,0.301054],[-4.441987,3.914144,0.177867],[-4.367075,6.611414,0.165312],[-3.201767,0.576292,0.105769],[-3.174354,0.645009,0.440373],[-2.996576,0.74262,0.161325],[-2.724979,1.656497,0.092983],[-3.261757,2.017742,-0.070763],[-4.280173,4.518235,-0.002999],[-4.471073,5.945358,0.05202],[-3.877137,2.40743,0.274928],[-4.371219,4.252758,0.078039],[-3.400914,0.40983,0.238599],[-4.44293,3.523242,0.146339],[-4.574528,5.279761,0.353923],[-4.226643,7.191282,0.269256],[-4.16361,2.843204,0.097727],[-4.528506,5.011661,0.536625],[0.35514,5.664802,-0.572814],[2.508711,5.580976,-0.266636],[2.556226,3.633779,-1.426362],[1.878456,4.533714,-1.223744],[2.460709,4.440241,-1.1395],[2.218589,5.514603,-0.560066],[2.263712,5.737023,-0.250694],[2.964981,3.814858,-1.139927],[0.991384,5.304131,-0.999867],[2.81187,4.547292,-0.916025],[2.918089,4.768382,-0.702808],[3.262403,4.414286,-0.657935],[0.652136,6.089113,0.069089],[3.361389,3.5052,-0.946123],[2.613042,5.037192,-0.697153],[0.094339,4.36858,-1.451238],[3.290862,4.155716,-0.732318],[2.658063,4.073614,-1.217455],[3.260349,3.753257,-0.946819],[1.124268,4.862463,-1.207855],[3.35158,4.899247,-0.027586],[3.194057,4.691257,-0.524566],[3.090119,5.116085,-0.23255],[2.418965,3.811753,-1.419399],[2.191789,3.877038,-1.47023],[4.043166,2.034188,0.015477],[-1.026966,0.86766,-1.410912],[1.937563,3.860005,-1.617465],[2.98904,4.101806,-0.998132],[-0.142611,5.865305,-0.100872],[3.972673,2.292069,0.089463],[3.23349,3.959925,-0.849829],[0.16304,5.857276,-0.216704],[4.122964,1.770061,-0.114906],[2.099057,4.978374,-0.98449],[3.502411,3.76181,-0.667502],[2.079484,5.939614,-0.036205],[-0.084568,3.525193,-2.253506],[0.423859,4.06095,-1.845327],[1.6013,6.006466,-0.153429],[0.271701,3.844964,-2.078748],[0.273577,5.218904,-0.994711],[-0.410578,3.92165,-1.773635],[1.941954,5.60041,-0.621569],[0.100825,5.462131,-0.774256],[-0.53016,3.619892,-2.027451],[-0.822371,5.517453,-0.605747],[-2.474925,7.670892,-0.020174],[4.01571,0.830194,-0.013793],[-0.400092,5.094112,-1.041992],[-2.887284,5.581246,-0.525324],[-1.559841,6.050972,0.079301],[-0.469317,3.291673,-2.235211],[0.337397,3.467926,-2.295458],[-2.632074,5.573701,-0.582717],[-0.030318,6.011395,0.276616],[-0.934373,0.388987,-1.780523],[-2.661263,5.844838,-0.425966],[0.549353,5.489646,-0.807268],[-2.194355,6.197491,-0.109322],[-2.289618,5.664813,-0.581098],[1.583583,3.796366,-1.844498],[0.855295,0.215979,-1.425557],[-2.627569,5.300236,-0.767174],[4.333347,2.384332,0.399129],[-1.880401,5.583843,-0.696561],[-2.172346,5.324859,-0.846246],[-2.27058,5.906265,-0.388373],[-1.960049,5.889346,-0.397593],[0.965756,3.67547,-2.105671],[-2.014066,6.431125,0.287254],[-1.776173,5.287097,-0.89091],[-2.025852,5.089562,-0.980218],[-1.886418,6.108358,-0.000667],[-1.600803,5.785347,-0.491069],[-1.66188,4.968053,-1.042535],[-1.600621,5.962818,-0.188044],[-1.588831,5.615418,-0.665456],[4.46901,1.880138,0.057248],[-1.978845,0.927399,-0.554856],[-1.408074,5.325266,-0.83967],[1.923123,4.843955,-1.101389],[-2.87378,0.117106,-0.412735],[-1.222193,5.62638,-0.539981],[-2.632537,0.166349,-0.489218],[-1.370865,5.838832,-0.341026],[-1.067742,5.448874,-0.692701],[-1.073798,5.220878,-0.908779],[-1.147562,4.950417,-1.079727],[-2.789115,4.531047,-1.042713],[-3.550826,4.170487,-0.806058],[-3.331694,4.798177,-0.69568],[-3.689404,4.688543,-0.534317],[-3.511509,5.106246,-0.483632],[1.796344,0.076137,0.080455],[-3.306354,5.473605,-0.478764],[-2.692503,3.346604,-1.20959],[-3.963056,5.187462,3.113156],[-3.901231,6.391477,-0.246984],[4.484234,1.518638,-0.001617],[4.308829,1.657716,-0.119275],[4.290045,1.339528,-0.110626],[-3.514938,3.524974,-0.909109],[-2.1943,2.12163,-0.71966],[4.108206,1.091087,-0.11416],[3.785312,1.392435,-0.28588],[4.092886,1.480476,-0.210655],[-2.965937,6.469006,-0.379085],[-3.708581,2.962974,-0.63979],[-3.297971,2.218917,-0.299872],[3.806949,0.804703,-0.11438],[3.747957,1.059258,-0.273069],[-3.101827,4.111444,-1.006255],[-1.536445,4.658913,-1.195049],[-3.549826,2.450555,-0.375694],[-3.676495,2.108366,0.534323],[-3.674738,5.925075,-0.400011],[-2.250115,2.848335,-1.121174],[-3.698062,5.667567,-0.381396],[3.468966,0.734643,-0.190624],[-3.97972,5.670078,-0.26874],[-3.002087,4.337837,-1.033421],[-3.356392,2.608308,-0.713323],[-1.833016,3.359983,-1.28775],[-1.989069,3.632416,-1.305607],[3.591254,0.542371,0.026146],[3.364927,1.082572,-0.342613],[-3.393759,3.866801,-0.937266],[-4.124865,5.549529,-0.161729],[-4.423423,5.687223,0.000103],[-1.496881,2.601785,-1.114328],[-2.642297,6.496932,-0.264175],[-3.684236,6.819423,-0.320233],[-2.286996,3.167067,-1.246651],[-1.624896,8.44848,-0.530014],[-3.666787,2.159266,0.268149],[-2.402625,2.011243,-0.56446],[-2.736166,2.259839,-0.6943],[-2.168611,3.89078,-1.292206],[-2.065956,3.345708,-1.281346],[-2.778147,2.675605,-0.995706],[-3.507431,4.513272,-0.71829],[-2.301184,4.293911,-1.238182],[3.205808,0.211078,0.394349],[-2.129936,4.870577,-1.080781],[-2.287977,2.496593,-0.934069],[-2.701833,2.931814,-1.114509],[3.294795,0.50631,-0.081062],[-2.552829,7.468771,-0.021541],[3.06721,0.944066,-0.43074],[-2.86086,1.973622,-0.303132],[-3.598818,5.419613,-0.401645],[-1.524381,0.080156,-1.61662],[-1.907291,2.646274,-1.039438],[2.950783,0.407562,-0.105407],[-1.663048,1.655038,-0.689787],[-1.728102,1.110064,-0.635963],[-2.085823,7.686296,-0.159745],[2.883518,3.157009,-1.30858],[-2.724116,0.417169,-0.389719],[-1.788636,7.862672,-0.346413],[-2.186418,1.249609,-0.434583],[-3.092434,2.606657,-0.860002],[-1.737314,3.874201,-1.330986],[2.564522,0.422967,-0.390903],[1.670782,3.538432,-1.924753],[-2.338131,4.02578,-1.286673],[-1.916516,4.054121,-1.301788],[2.87159,2.034949,-1.267139],[-1.931518,3.062883,-1.197227],[-0.816602,0.135682,3.104104],[0.469392,0.213916,-1.489608],[2.574055,1.950091,-1.514427],[2.733595,2.682546,-1.461213],[-1.915407,4.693647,-1.151721],[-3.412883,5.867094,-0.450528],[2.28822,0.120432,-0.04102],[2.244477,0.14424,-0.376933],[-1.676198,3.570698,-1.328031],[-1.821193,4.366982,-1.266271],[-1.552208,8.099221,-0.53262],[-1.727419,2.39097,-0.989456],[-2.468226,4.711663,-1.069766],[-2.451669,6.113319,-0.273788],[2.635447,2.295842,-1.518361],[-2.020809,8.150253,-0.246714],[2.292455,0.805596,-1.3042],[2.641556,1.65665,-1.466962],[2.409062,2.842538,-1.635025],[2.456682,1.459484,-1.57543],[-1.691047,3.173582,-1.247082],[-1.865642,1.957608,-0.768683],[-3.401579,0.20407,0.100932],[2.301981,1.7102,-1.650461],[2.342929,2.611944,-1.690713],[-1.676111,2.923894,-1.17835],[-2.992039,3.547631,-1.118945],[-3.571677,6.504634,-0.375455],[2.141764,1.460869,-1.702464],[-3.221958,5.146049,-0.615632],[2.19238,2.949367,-1.747242],[2.320791,2.232971,-1.706842],[2.088678,2.585235,-1.813159],[-2.196404,0.592218,-0.569709],[-2.120811,1.836483,-0.62338],[-1.949935,2.271249,-0.874128],[2.235901,1.110183,-1.510719],[2.020157,3.241128,-1.803917],[2.054336,1.949394,-1.792332],[-3.094117,4.996595,-0.740238],[2.038063,0.635949,-1.402041],[1.980644,1.684408,-1.76778],[1.587432,3.306542,-1.991131],[1.935322,0.976267,-1.602208],[1.922621,1.235522,-1.698813],[1.712495,1.911874,-1.903234],[1.912802,2.259273,-1.888698],[1.884367,0.355453,-1.312633],[1.676427,0.76283,-1.539455],[1.78453,2.83662,-1.943035],[1.697312,0.120281,-1.150324],[1.648318,2.484973,-1.999505],[-4.051804,5.958472,-0.231731],[-1.964823,1.464607,-0.58115],[1.55996,2.183486,-1.971378],[1.628125,1.045912,-1.707832],[1.701684,1.540428,-1.827156],[1.567475,4.869481,-1.184665],[1.432492,0.843779,-1.648083],[1.173837,2.978983,-2.156687],[1.235287,3.37975,-2.09515],[1.252589,1.525293,-1.949205],[1.159334,2.336379,-2.105361],[1.49061,2.695263,-2.083216],[-4.122486,6.782604,-0.02545],[1.173388,0.279193,-1.423418],[1.505684,0.380815,-1.414395],[1.391423,1.343031,-1.843557],[1.263449,2.73225,-2.144961],[1.295858,0.597122,-1.515628],[1.245851,3.729126,-1.993015],[-2.761439,6.23717,-0.365856],[0.978887,1.664888,-2.046633],[1.219542,0.982729,-1.785486],[1.315915,1.91748,-2.02788],[-3.052746,2.127222,-0.369082],[0.977656,1.36223,-1.944119],[0.936122,3.39447,-2.203007],[-2.740036,4.184702,-1.122849],[0.853581,2.864694,-2.260847],[0.719569,0.818762,-1.763618],[0.839115,1.159359,-1.907943],[0.932069,1.94559,-2.117962],[0.579321,3.326747,-2.299369],[0.86324,0.597822,-1.565106],[0.574567,1.158452,-1.943123],[0.525138,2.137252,-2.213867],[0.779941,2.342019,-2.206157],[0.915255,2.618102,-2.209041],[0.526426,3.02241,-2.321826],[0.495431,2.521396,-2.295905],[0.80799,3.156817,-2.286432],[0.273556,1.304936,-2.012509],[0.664326,1.530024,-2.048722],[0.219173,2.32907,-2.323212],[0.405324,0.695359,-1.704884],[0.398827,0.946649,-1.843899],[0.345109,1.608829,-2.100174],[-2.356743,0.062032,-0.4947],[-3.001084,0.27146,2.560034],[-2.064663,0.303055,-0.697324],[0.221271,3.174023,-2.374399],[0.195842,0.437865,-1.621473],[-0.385613,0.297763,1.960096],[1.999609,0.108928,-0.79125],[0.351698,9.227494,-1.57565],[0.021477,2.191913,-2.309353],[0.246381,2.836575,-2.356365],[1.543281,0.237539,1.901906],[0.031881,9.147022,-1.454203],[-0.001881,1.648503,-2.108044],[0.333423,1.907088,-2.204533],[0.044063,2.634032,-2.368412],[-0.028148,3.053684,-2.390082],[0.02413,3.34297,-2.36544],[-0.272645,9.02879,-1.238685],[-0.006348,0.832044,-1.758222],[-0.321105,1.458754,-1.886313],[-0.153948,8.618809,-1.105353],[-0.409303,1.137783,-1.720556],[-0.410054,1.742789,-1.957989],[-0.287905,2.380404,-2.294509],[-0.261375,2.646629,-2.356322],[-0.221986,3.215303,-2.345844],[-0.31608,0.687581,-1.71901],[-0.537705,0.855802,-1.648585],[-0.142834,1.193053,-1.87371],[-0.24371,2.044435,-2.176958],[-0.437999,2.959748,-2.299698],[-0.78895,0.176226,-1.729046],[-0.608509,0.546932,-1.734032],[-0.693698,4.478782,-1.369372],[-0.669153,8.469645,-0.911149],[-0.741857,1.082705,-1.458474],[-0.554059,2.440325,-2.141785],[2.09261,0.153182,2.57581],[1.792547,0.111794,2.563777],[1.855787,0.189541,2.835089],[1.492601,0.232246,2.987681],[-0.284918,0.236687,3.429738],[2.604841,0.11997,1.01506],[0.331271,0.168113,3.124031],[0.280606,0.308368,2.495937],[0.544591,0.325711,2.081274],[0.193145,0.19154,-0.977556],[3.810099,0.42324,1.032202],[3.54622,0.379245,1.392814],[0.61402,0.276328,0.849356],[-1.198628,0.144953,2.911457],[4.17199,0.68037,1.391526],[0.88279,0.321339,2.059129],[1.93035,0.109992,2.054154],[1.620331,0.121986,2.37203],[2.374812,0.10921,1.734876],[-0.031227,0.294412,2.593687],[4.075018,0.561914,1.038065],[-0.570366,0.126583,2.975558],[0.950052,0.318463,1.804012],[1.130034,0.117125,0.98385],[2.123049,0.08946,1.665911],[2.087572,0.068621,0.335013],[2.927337,0.167117,0.289611],[0.528876,0.313434,3.205969],[1.174911,0.162744,1.328262],[-4.88844,5.59535,1.661134],[-4.709607,5.165338,1.324082],[0.871199,0.277021,1.263831],[-3.910877,2.349318,1.272269],[1.56824,0.118605,2.768112],[1.179176,0.152617,-0.858003],[1.634629,0.247872,2.128625],[-4.627425,5.126935,1.617836],[3.845542,0.54907,1.45601],[2.654006,0.165508,1.637169],[-0.678324,0.26488,1.974741],[2.451139,0.100377,0.213768],[0.633199,0.286719,0.403357],[-0.533042,0.2524,1.373267],[0.99317,0.171106,0.624966],[-0.100063,0.306466,2.170225],[1.245943,0.092351,0.661031],[1.390414,0.198996,-0.0864],[-4.457265,5.030531,2.138242],[2.89776,0.146575,1.297468],[1.802703,0.088824,-0.490405],[1.055447,0.309261,2.392437],[2.300436,0.142429,2.104254],[2.33399,0.187756,2.416935],[2.325183,0.134349,0.574063],[2.410924,0.370971,2.637115],[1.132924,0.290511,3.061],[1.764028,0.070212,-0.80535],[2.156994,0.397657,2.844061],[0.920711,0.225527,-0.882456],[-4.552135,5.24096,2.85514],[0.210016,0.309396,2.064296],[0.612067,0.136815,-1.086002],[3.150236,0.426757,1.802703],[-0.24824,0.282258,1.470997],[0.974269,0.301311,-0.640898],[-4.401413,5.03966,2.535553],[0.644319,0.274006,-0.817806],[0.332922,0.309077,0.108474],[3.610001,0.317447,0.689353],[3.335681,0.358195,0.118477],[0.623544,0.318983,-0.4193],[-0.11012,0.307747,1.831331],[-0.407528,0.291044,2.282935],[0.069783,0.285095,0.950289],[0.970135,0.310392,-0.283742],[0.840564,0.306898,0.098854],[-0.541827,0.267753,1.683795],[-3.956082,4.55713,2.297164],[-4.161036,2.834481,1.64183],[-4.093952,4.977551,2.747747],[2.661819,0.261867,1.926145],[-3.749926,2.161875,0.895238],[-2.497776,1.3629,0.791855],[0.691482,0.304968,1.582939],[-4.013193,4.830963,2.4769],[-3.639585,2.091265,1.304415],[-3.9767,2.563053,1.6284],[-3.979915,2.788616,1.977977],[0.388782,0.312656,1.709168],[-3.40873,1.877324,0.851652],[-3.671637,5.136974,3.170734],[-3.12964,1.852012,0.157682],[-3.629687,4.852698,2.686837],[-3.196164,1.793459,0.452804],[-3.746338,2.31357,1.648551],[2.992192,0.125251,0.575976],[-3.254051,0.054431,0.314152],[-3.474644,1.925288,1.134116],[-3.418372,2.022882,1.578901],[-2.920955,1.705403,0.29842],[-3.57229,2.152022,1.607572],[-3.251259,0.09013,-0.106174],[-3.299952,1.877781,1.348623],[-3.666819,2.441459,2.004838],[-2.912646,1.824748,-0.045348],[-3.399511,2.479484,2.340393],[-3.009754,0.015286,0.075567],[-3.381443,2.316937,2.156923],[-3.352801,2.133341,1.857366],[-3.01788,1.687685,0.645867],[-2.931857,1.678712,1.158472],[-3.301008,0.08836,0.591001],[1.358025,0.19795,1.599144],[-2.999565,1.845016,1.618396],[-2.767957,0.028397,-0.196436],[-2.93962,2.078779,2.140593],[-3.346648,2.674056,2.518097],[3.324322,0.20822,0.628605],[3.091677,0.137202,0.9345],[-2.881807,0.009952,0.318439],[-2.764946,1.786619,1.693439],[-2.905542,1.932343,1.900002],[-3.140854,2.271384,2.274946],[-2.88995,2.487856,2.574759],[-2.367194,-0.000943,-0.15576],[-3.050738,0.068703,0.742988],[-2.759525,1.55679,0.877782],[-3.151775,2.48054,2.482749],[-2.578618,-0.002885,0.165716],[-2.651618,1.877246,1.981189],[-2.933973,0.133731,1.631023],[1.047628,0.100284,-1.085248],[-1.585123,0.062083,-1.394896],[-2.287917,-0.002671,0.214434],[-2.524899,0.007481,0.471788],[-2.815492,2.188198,2.343294],[-2.095142,-0.003149,-0.094574],[-2.172686,-0.000133,0.47963],[-2.732704,0.074306,1.742079],[-2.49653,2.145668,2.42691],[-1.343683,0.047721,-1.506391],[-2.581185,0.048703,0.975528],[-2.905101,0.083158,2.010052],[-2.601514,2.007801,2.223089],[-2.339464,0.02634,1.484304],[-2.907873,0.10367,2.378149],[-1.368796,0.062516,-1.049125],[-1.93244,0.02443,-0.427603],[-2.705081,0.060513,2.303802],[3.372155,0.206274,0.892293],[-1.761827,0.093202,-1.037404],[-1.700667,0.0397,-0.614221],[-1.872291,0.011979,-0.135753],[-1.929257,0.074005,0.728999],[-2.520128,0.049665,1.99054],[-2.699411,0.10092,2.603116],[3.211701,0.27302,1.423357],[-1.445362,0.1371,-0.626491],[2.921332,0.259112,1.645525],[-0.993242,0.058686,-1.408916],[-0.944986,0.157541,-1.097665],[-2.154301,0.032749,1.882001],[-2.108789,1.988557,2.442673],[-1.015659,0.25497,-0.416665],[-1.898411,0.015872,0.16715],[-1.585517,0.027121,0.453445],[-2.311105,0.061264,2.327061],[-2.637042,0.152224,2.832201],[-2.087515,2.292972,2.617585],[-0.750611,0.056697,-1.504516],[-0.472029,0.075654,-1.360203],[-0.710798,0.139244,-1.183863],[-0.97755,0.26052,-0.831167],[-0.655814,0.260843,-0.880068],[-0.897513,0.275537,-0.133042],[-2.049194,0.084947,2.455422],[-0.177837,0.076362,-1.449009],[-0.553393,0.279083,-0.59573],[-1.788636,0.06163,2.231198],[-0.34761,0.255578,-0.999614],[-1.398589,0.036482,0.65871],[-1.133918,0.05617,0.69473],[-1.43369,0.058226,1.977865],[-2.505459,1.492266,1.19295]]
exports.cells=[[2,1661,3],[1676,7,6],[712,1694,9],[3,1674,1662],[11,1672,0],[1705,0,1],[5,6,1674],[4,5,1674],[7,8,712],[2,1662,10],[1,10,1705],[11,1690,1672],[1705,11,0],[5,1676,6],[7,9,6],[7,712,9],[2,3,1662],[3,4,1674],[1,2,10],[12,82,1837],[1808,12,1799],[1808,1799,1796],[12,861,82],[861,1808,13],[1808,861,12],[1799,12,1816],[1680,14,1444],[15,17,16],[14,1678,1700],[16,17,1679],[15,1660,17],[14,1084,1678],[15,1708,18],[15,18,1660],[1680,1084,14],[1680,15,1084],[15,1680,1708],[793,813,119],[1076,793,119],[1076,1836,22],[23,19,20],[21,1076,22],[21,22,23],[23,20,21],[1076,119,1836],[806,634,470],[432,1349,806],[251,42,125],[809,1171,791],[953,631,827],[634,1210,1176],[157,1832,1834],[56,219,53],[126,38,83],[37,85,43],[59,1151,1154],[83,75,41],[77,85,138],[201,948,46],[1362,36,37],[452,775,885],[1237,95,104],[966,963,1262],[85,77,43],[36,85,37],[1018,439,1019],[41,225,481],[85,83,127],[93,83,41],[935,972,962],[116,93,100],[98,82,813],[41,75,225],[298,751,54],[1021,415,1018],[77,138,128],[766,823,1347],[593,121,573],[905,885,667],[786,744,747],[100,41,107],[604,334,765],[779,450,825],[968,962,969],[225,365,481],[365,283,196],[161,160,303],[875,399,158],[328,1817,954],[62,61,1079],[358,81,72],[74,211,133],[160,161,138],[91,62,1079],[167,56,1405],[56,167,219],[913,914,48],[344,57,102],[43,77,128],[1075,97,1079],[389,882,887],[219,108,53],[1242,859,120],[604,840,618],[754,87,762],[197,36,1362],[1439,88,1200],[1652,304,89],[81,44,940],[445,463,151],[717,520,92],[129,116,100],[1666,1811,624],[1079,97,91],[62,91,71],[688,898,526],[463,74,133],[278,826,99],[961,372,42],[799,94,1007],[100,93,41],[1314,943,1301],[184,230,109],[875,1195,231],[133,176,189],[751,755,826],[101,102,57],[1198,513,117],[748,518,97],[1145,1484,1304],[358,658,81],[971,672,993],[445,151,456],[252,621,122],[36,271,126],[85,36,126],[116,83,93],[141,171,1747],[1081,883,103],[1398,1454,149],[457,121,593],[127,116,303],[697,70,891],[457,891,1652],[1058,1668,112],[518,130,97],[214,319,131],[185,1451,1449],[463,133,516],[1428,123,177],[113,862,561],[215,248,136],[186,42,251],[127,83,116],[160,85,127],[162,129,140],[154,169,1080],[169,170,1080],[210,174,166],[1529,1492,1524],[450,875,231],[399,875,450],[171,141,170],[113,1155,452],[131,319,360],[44,175,904],[452,872,113],[746,754,407],[147,149,150],[309,390,1148],[53,186,283],[757,158,797],[303,129,162],[429,303,162],[154,168,169],[673,164,193],[38,271,75],[320,288,1022],[246,476,173],[175,548,904],[182,728,456],[199,170,169],[168,199,169],[199,171,170],[184,238,230],[246,247,180],[1496,1483,1467],[147,150,148],[828,472,445],[53,108,186],[56,53,271],[186,961,42],[1342,391,57],[1664,157,1834],[1070,204,178],[178,204,179],[285,215,295],[692,55,360],[192,193,286],[359,673,209],[586,195,653],[121,89,573],[202,171,199],[238,515,311],[174,210,240],[174,105,166],[717,276,595],[1155,1149,452],[1405,56,197],[53,283,30],[75,53,30],[45,235,1651],[210,166,490],[181,193,192],[185,620,217],[26,798,759],[1070,226,204],[220,187,179],[220,168,187],[202,222,171],[359,209,181],[182,456,736],[964,167,1405],[76,250,414],[807,1280,1833],[70,883,1652],[227,179,204],[221,199,168],[221,202,199],[360,494,131],[214,241,319],[105,247,166],[205,203,260],[388,480,939],[482,855,211],[8,807,1833],[226,255,204],[228,221,168],[166,173,490],[701,369,702],[211,855,262],[631,920,630],[1448,1147,1584],[255,227,204],[237,220,179],[228,168,220],[222,256,555],[215,259,279],[126,271,38],[108,50,186],[227,236,179],[236,237,179],[220,237,228],[228,202,221],[256,222,202],[555,256,229],[259,152,279],[27,1296,31],[186,50,961],[961,234,372],[1651,235,812],[1572,1147,1448],[255,226,1778],[255,236,227],[256,257,229],[106,184,109],[241,410,188],[177,578,620],[209,673,181],[1136,1457,79],[1507,245,718],[255,273,236],[275,410,241],[206,851,250],[1459,253,1595],[1406,677,1650],[228,274,202],[202,281,256],[348,239,496],[205,172,203],[369,248,702],[261,550,218],[261,465,550],[574,243,566],[921,900,1220],[291,273,255],[348,238,265],[109,230,194],[149,380,323],[443,270,421],[272,291,255],[274,228,237],[274,292,202],[281,257,256],[276,543,341],[152,259,275],[1111,831,249],[632,556,364],[299,273,291],[299,236,273],[280,237,236],[202,292,281],[247,246,173],[282,49,66],[1620,1233,1553],[299,280,236],[280,305,237],[237,305,274],[306,292,274],[330,257,281],[246,194,264],[166,247,173],[912,894,896],[611,320,244],[1154,1020,907],[969,962,290],[272,299,291],[305,318,274],[145,212,240],[164,248,285],[259,277,275],[193,164,295],[269,240,210],[1033,288,320],[46,948,206],[336,280,299],[330,281,292],[257,307,300],[369,136,248],[145,240,269],[502,84,465],[193,295,286],[164,285,295],[282,302,49],[161,303,429],[318,306,274],[306,330,292],[315,257,330],[315,307,257],[307,352,300],[300,352,308],[275,277,403],[353,1141,333],[1420,425,47],[611,313,320],[85,126,83],[128,1180,43],[303,116,129],[280,314,305],[314,318,305],[190,181,242],[203,214,131],[820,795,815],[322,299,272],[322,336,299],[315,339,307],[172,152,617],[172,214,203],[321,1033,320],[1401,941,946],[85,160,138],[976,454,951],[747,60,786],[317,322,272],[339,352,307],[266,33,867],[163,224,218],[247,614,180],[648,639,553],[388,172,205],[611,345,313],[313,345,320],[160,127,303],[454,672,951],[317,329,322],[314,280,336],[306,338,330],[330,339,315],[1236,115,436],[342,321,320],[1046,355,328],[328,346,325],[325,346,317],[367,314,336],[314,337,318],[337,306,318],[338,343,330],[342,320,345],[355,349,328],[346,329,317],[347,336,322],[314,362,337],[330,343,339],[340,308,352],[135,906,1022],[239,156,491],[194,230,486],[40,1015,1003],[321,355,1046],[329,382,322],[382,347,322],[347,367,336],[337,371,306],[306,371,338],[1681,296,1493],[286,172,388],[230,348,486],[348,183,486],[384,332,830],[328,349,346],[367,362,314],[371,343,338],[339,351,352],[57,344,78],[342,355,321],[386,346,349],[386,350,346],[346,350,329],[347,366,367],[343,363,339],[323,380,324],[152,275,241],[345,1045,342],[350,374,329],[339,363,351],[234,340,352],[353,361,354],[40,34,1015],[373,355,342],[373,349,355],[374,382,329],[366,347,382],[371,363,343],[351,379,352],[379,372,352],[372,234,352],[156,190,491],[319,241,692],[354,361,31],[366,377,367],[363,379,351],[133,590,516],[197,56,271],[1045,370,342],[370,373,342],[374,350,386],[377,366,382],[367,395,362],[400,337,362],[400,371,337],[378,363,371],[106,109,614],[181,673,193],[953,920,631],[376,349,373],[376,386,349],[378,379,363],[224,375,218],[279,152,172],[361,619,381],[1347,823,795],[760,857,384],[392,374,386],[394,395,367],[383,371,400],[383,378,371],[218,375,261],[197,271,36],[414,454,976],[385,376,373],[1051,382,374],[387,394,367],[377,387,367],[395,400,362],[279,172,295],[30,365,225],[450,231,825],[385,373,370],[398,374,392],[1051,377,382],[396,378,383],[348,496,183],[295,172,286],[357,269,495],[1148,390,1411],[75,30,225],[206,76,54],[412,386,376],[412,392,386],[396,383,400],[651,114,878],[123,1241,506],[238,311,265],[381,653,29],[618,815,334],[427,1032,411],[298,414,976],[791,332,384],[129,100,140],[412,404,392],[392,404,398],[140,107,360],[395,394,400],[423,379,378],[385,412,376],[406,94,58],[419,415,1021],[422,423,378],[423,125,379],[258,508,238],[311,156,265],[213,287,491],[449,411,1024],[412,1068,404],[55,140,360],[76,414,54],[394,416,400],[400,416,396],[422,378,396],[1258,796,789],[427,411,449],[427,297,1032],[1385,1366,483],[417,448,284],[1507,341,245],[162,140,444],[658,44,81],[433,125,423],[438,251,125],[429,162,439],[1342,57,1348],[765,766,442],[697,891,695],[1057,396,416],[440,423,422],[440,433,423],[433,438,125],[438,196,251],[74,482,211],[1136,79,144],[29,195,424],[242,1004,492],[57,757,28],[414,298,54],[238,348,230],[224,163,124],[295,215,279],[495,269,490],[449,446,427],[446,297,427],[1020,1163,909],[128,138,419],[66,980,443],[415,439,1018],[111,396,1057],[111,422,396],[840,249,831],[593,664,596],[218,550,155],[109,194,180],[483,268,855],[161,415,419],[1737,232,428],[360,107,494],[1006,1011,410],[444,140,55],[919,843,430],[190,242,213],[275,403,410],[131,494,488],[449,663,446],[138,161,419],[128,419,34],[439,162,444],[460,440,422],[440,438,433],[472,74,445],[491,190,213],[238,508,515],[46,206,54],[972,944,962],[1241,1428,1284],[111,460,422],[470,432,806],[248,164,702],[1025,467,453],[553,1235,648],[263,114,881],[267,293,896],[469,438,440],[455,196,438],[287,242,492],[239,265,156],[213,242,287],[1684,746,63],[663,474,446],[415,161,429],[140,100,107],[1055,459,467],[469,455,438],[259,542,277],[446,474,466],[446,466,447],[439,444,1019],[614,109,180],[190,359,181],[156,497,190],[726,474,663],[1023,458,459],[461,440,460],[269,210,490],[246,180,194],[590,133,189],[163,218,155],[467,468,453],[1063,1029,111],[111,1029,460],[1029,464,460],[461,469,440],[150,149,323],[828,445,456],[375,502,261],[474,475,466],[573,426,462],[478,1023,477],[478,458,1023],[458,479,467],[459,458,467],[468,393,453],[464,461,460],[484,365,455],[1232,182,1380],[172,617,214],[547,694,277],[542,547,277],[184,258,238],[261,502,465],[467,479,468],[484,455,469],[1380,182,864],[475,476,466],[80,447,476],[466,476,447],[415,429,439],[479,487,468],[487,287,468],[492,393,468],[260,469,461],[481,365,484],[531,473,931],[692,360,319],[726,495,474],[468,287,492],[480,464,1029],[260,461,464],[494,481,484],[74,472,482],[174,240,212],[223,106,614],[486,477,485],[478,496,458],[491,487,479],[123,402,177],[488,469,260],[488,484,469],[265,239,348],[248,215,285],[474,490,475],[477,486,478],[458,496,479],[239,491,479],[1584,1147,1334],[488,494,484],[401,123,506],[495,490,474],[490,173,475],[80,476,264],[491,287,487],[480,1029,1004],[480,205,464],[173,476,475],[485,194,486],[486,183,478],[478,183,496],[496,239,479],[848,1166,60],[268,262,855],[205,260,464],[260,203,488],[203,131,488],[246,264,476],[194,485,264],[1002,310,1664],[311,515,497],[515,359,497],[565,359,515],[1250,1236,301],[736,456,151],[654,174,567],[577,534,648],[519,505,645],[725,565,508],[150,1723,148],[584,502,505],[584,526,502],[502,526,84],[607,191,682],[560,499,660],[607,517,191],[1038,711,124],[951,672,971],[716,507,356],[868,513,1198],[615,794,608],[682,191,174],[1313,928,1211],[617,241,214],[511,71,91],[408,800,792],[192,286,525],[80,485,447],[91,97,130],[1675,324,888],[207,756,532],[582,1097,1124],[311,497,156],[510,130,146],[523,511,510],[608,708,616],[546,690,650],[511,527,358],[536,146,518],[465,418,550],[418,709,735],[520,514,500],[584,505,519],[536,518,509],[146,536,510],[538,527,511],[876,263,669],[646,524,605],[510,536,523],[527,175,358],[724,876,669],[721,724,674],[524,683,834],[558,509,522],[558,536,509],[523,538,511],[611,243,574],[528,706,556],[668,541,498],[523,537,538],[527,540,175],[532,756,533],[1013,60,747],[551,698,699],[92,520,500],[535,536,558],[536,569,523],[538,540,527],[539,548,175],[567,212,145],[401,896,293],[534,675,639],[1510,595,1507],[557,545,530],[569,536,535],[537,540,538],[540,539,175],[569,537,523],[1135,718,47],[587,681,626],[580,535,558],[99,747,278],[701,565,725],[665,132,514],[665,514,575],[132,549,653],[176,651,189],[65,47,266],[597,569,535],[569,581,537],[537,581,540],[563,539,540],[539,564,548],[1509,1233,1434],[132,653,740],[550,710,155],[714,721,644],[410,1011,188],[732,534,586],[560,562,729],[555,557,222],[580,558,545],[597,535,580],[581,563,540],[5,821,1676],[576,215,136],[649,457,741],[564,539,563],[124,711,224],[550,668,710],[550,541,668],[565,701,673],[560,613,499],[233,532,625],[545,555,580],[601,581,569],[594,904,548],[1463,1425,434],[185,149,1454],[721,674,644],[185,380,149],[577,424,586],[462,586,559],[597,601,569],[594,548,564],[566,603,574],[165,543,544],[457,89,121],[586,424,195],[725,587,606],[1078,582,1124],[588,925,866],[462,559,593],[189,878,590],[555,229,580],[602,563,581],[904,594,956],[434,1425,1438],[1024,112,821],[572,587,626],[600,597,580],[599,591,656],[600,580,229],[601,622,581],[581,622,602],[602,564,563],[602,594,564],[603,611,574],[498,529,546],[697,1145,70],[592,628,626],[610,597,600],[597,610,601],[222,557,171],[604,765,799],[573,462,593],[133,200,176],[729,607,627],[1011,692,188],[518,146,130],[585,687,609],[682,627,607],[1712,599,656],[562,592,607],[643,656,654],[257,600,229],[601,633,622],[623,594,602],[174,212,567],[725,606,701],[609,701,606],[610,633,601],[633,642,622],[380,216,324],[142,143,1249],[501,732,586],[534,577,586],[648,1235,577],[610,641,633],[310,1002,1831],[618,334,604],[1710,145,269],[707,498,659],[501,586,462],[625,501,462],[726,663,691],[300,600,257],[641,610,600],[622,629,602],[602,629,623],[55,692,444],[518,748,509],[929,1515,1411],[620,578,267],[71,511,358],[707,668,498],[650,687,585],[600,300,641],[641,657,633],[1675,888,1669],[622,636,629],[505,502,375],[541,529,498],[332,420,1053],[637,551,638],[534,639,648],[69,623,873],[300,512,641],[633,657,642],[562,660,579],[687,637,638],[709,646,605],[775,738,885],[559,549,132],[646,683,524],[641,512,657],[266,897,949],[1712,643,1657],[184,727,258],[674,724,669],[699,714,647],[628,659,572],[657,662,642],[571,881,651],[517,607,504],[598,706,528],[598,694,547],[640,552,560],[655,693,698],[698,693,721],[91,510,511],[144,301,1136],[324,216,888],[870,764,1681],[575,514,520],[276,544,543],[658,175,44],[645,505,711],[659,546,572],[700,524,655],[605,700,529],[266,867,897],[1695,1526,764],[579,659,628],[654,591,682],[586,549,559],[698,721,714],[896,401,506],[640,734,599],[664,665,575],[621,629,636],[1712,656,643],[547,644,598],[710,668,707],[640,560,734],[655,698,551],[694,528,277],[512,662,657],[504,592,626],[688,584,519],[152,241,617],[587,725,681],[598,669,706],[526,670,84],[598,528,694],[710,707,499],[579,592,562],[660,659,579],[323,324,1134],[326,895,473],[195,29,653],[84,670,915],[560,660,562],[504,626,681],[711,505,224],[651,881,114],[216,620,889],[1362,678,197],[493,99,48],[1659,691,680],[529,690,546],[430,843,709],[655,524,693],[174,191,105],[674,669,598],[98,712,82],[572,546,585],[72,61,71],[912,911,894],[106,223,184],[664,132,665],[843,646,709],[635,699,136],[699,698,714],[593,132,664],[688,526,584],[185,177,620],[533,675,534],[687,638,635],[1652,89,457],[896,506,912],[132,740,514],[689,685,282],[691,449,680],[48,436,493],[136,699,647],[739,640,554],[549,586,653],[532,533,625],[1530,695,649],[653,381,619],[736,151,531],[188,692,241],[177,402,578],[33,689,867],[689,33,685],[593,559,132],[949,65,266],[711,1038,661],[939,480,1004],[609,369,701],[616,552,615],[619,361,740],[151,463,516],[513,521,117],[691,663,449],[186,251,196],[333,302,327],[613,560,552],[616,613,552],[690,551,637],[660,707,659],[704,208,1203],[418,735,550],[163,708,124],[524,834,693],[554,640,599],[245,341,165],[565,673,359],[155,710,708],[105,191,517],[1515,198,1411],[1709,554,599],[60,289,786],[838,1295,1399],[533,534,625],[710,499,708],[556,632,410],[217,620,216],[591,627,682],[504,503,223],[643,654,567],[690,637,650],[545,557,555],[174,654,682],[719,691,1659],[727,681,508],[645,711,661],[794,615,739],[565,515,508],[282,685,302],[1150,397,1149],[638,699,635],[544,685,33],[719,726,691],[1742,1126,1733],[1724,1475,148],[556,410,403],[185,217,380],[503,504,681],[277,556,403],[32,1178,158],[1712,1709,599],[605,529,541],[635,136,369],[687,635,369],[529,700,690],[700,551,690],[89,304,573],[625,534,732],[730,302,685],[503,681,727],[702,673,701],[730,327,302],[327,353,333],[596,664,575],[660,499,707],[585,546,650],[560,729,734],[700,655,551],[176,571,651],[517,504,223],[730,685,544],[1661,1682,726],[1682,495,726],[1250,301,917],[605,524,700],[609,687,369],[516,389,895],[1553,686,1027],[673,702,164],[656,591,654],[520,596,575],[402,123,401],[828,456,728],[1645,677,1653],[528,556,277],[638,551,699],[190,497,359],[276,730,544],[1117,1525,933],[1027,686,1306],[155,708,163],[709,605,541],[647,644,547],[650,637,687],[599,734,591],[578,293,267],[1682,357,495],[510,91,130],[734,729,627],[576,542,215],[709,541,735],[735,541,550],[276,500,730],[500,327,730],[653,619,740],[414,851,454],[734,627,591],[729,562,607],[615,552,640],[525,181,192],[308,512,300],[223,503,727],[266,165,33],[92,500,276],[321,1046,1033],[585,609,606],[1200,1559,86],[628,572,626],[301,436,803],[714,644,647],[708,499,613],[721,693,724],[514,353,327],[353,740,361],[344,158,78],[708,613,616],[615,640,739],[500,514,327],[514,740,353],[1449,177,185],[462,233,625],[851,405,1163],[608,616,615],[647,542,576],[625,732,501],[1097,582,1311],[1235,424,577],[579,628,592],[607,592,504],[24,432,470],[105,614,247],[104,742,471],[542,259,215],[365,196,455],[1420,47,65],[223,727,184],[547,542,647],[572,585,606],[587,572,606],[262,780,1370],[647,576,136],[644,674,598],[271,53,75],[727,508,258],[471,742,142],[505,375,224],[357,1710,269],[725,508,681],[659,498,546],[743,1178,32],[1195,634,231],[1176,24,470],[743,1110,1178],[135,809,857],[63,746,407],[634,1176,470],[159,1112,27],[1176,1685,24],[399,450,779],[1178,856,875],[751,744,54],[436,48,772],[634,1108,1210],[769,1285,1286],[751,298,755],[746,1684,754],[754,924,87],[722,1625,756],[87,839,153],[489,795,820],[758,808,1518],[839,840,153],[831,1111,959],[1111,749,959],[810,1253,1363],[1247,1394,713],[1388,1329,1201],[1242,120,761],[857,791,384],[758,1523,808],[296,764,1504],[70,1652,891],[207,233,1638],[1348,57,28],[858,420,332],[964,1379,1278],[420,1194,816],[784,1076,1186],[1076,21,1186],[1710,767,1],[849,822,778],[806,137,787],[786,790,744],[790,54,744],[771,63,407],[785,852,818],[774,1823,272],[895,151,516],[135,1022,809],[99,826,48],[48,826,755],[808,705,408],[833,441,716],[1733,743,32],[1385,836,852],[772,827,737],[1005,49,781],[793,1697,813],[1518,441,1537],[1139,1132,859],[782,801,770],[1510,1530,676],[770,814,835],[231,787,825],[207,722,756],[26,771,798],[782,863,865],[832,54,790],[865,842,507],[799,765,94],[1175,1261,1353],[800,408,805],[262,986,200],[792,800,814],[801,792,770],[704,1203,1148],[356,1514,822],[165,544,33],[561,776,113],[1043,738,775],[815,831,820],[773,792,801],[772,48,914],[772,737,803],[436,772,803],[808,817,705],[1624,822,1527],[588,1144,788],[799,762,604],[821,1520,1676],[854,803,666],[828,482,472],[445,74,463],[831,489,820],[828,836,482],[716,782,763],[334,815,766],[815,823,766],[334,766,765],[819,805,837],[1716,1521,1412],[1684,924,754],[800,805,819],[1709,829,554],[806,1349,137],[99,1013,747],[341,595,276],[817,810,818],[1176,1691,1685],[763,782,865],[830,846,1052],[865,1499,842],[982,846,1053],[847,832,790],[1178,875,158],[817,818,705],[1302,1392,45],[96,417,284],[223,614,517],[356,507,1514],[1166,848,1179],[1349,432,26],[717,92,276],[770,835,863],[522,509,1745],[847,841,832],[832,841,46],[829,739,554],[802,824,39],[397,1043,775],[1567,849,778],[1385,483,855],[1349,26,1346],[441,801,782],[402,401,293],[1043,667,738],[759,798,1007],[819,837,728],[728,837,828],[837,852,828],[1537,441,833],[148,1475,147],[805,705,837],[716,441,782],[483,1371,780],[814,819,844],[845,753,1336],[1661,719,4],[862,847,790],[737,827,666],[201,46,841],[810,785,818],[408,705,805],[1560,1536,849],[1585,853,1786],[7,1668,807],[7,807,8],[822,1514,1527],[800,819,814],[847,862,841],[991,857,760],[705,818,837],[808,408,773],[402,293,578],[791,858,332],[1480,1228,1240],[814,844,835],[785,1385,852],[1132,120,859],[1743,1726,684],[1704,783,1279],[1623,1694,1731],[959,489,831],[1518,808,773],[862,872,841],[441,773,801],[331,512,308],[380,217,216],[841,872,201],[818,852,837],[448,1480,1240],[856,1108,1195],[1527,1514,1526],[819,182,1232],[871,724,693],[852,836,828],[770,792,814],[803,737,666],[751,826,278],[1674,1727,1699],[849,356,822],[871,693,834],[507,842,1514],[1406,1097,869],[1328,1349,1346],[823,815,795],[744,751,278],[1110,856,1178],[520,717,316],[871,834,683],[884,876,724],[165,266,47],[716,763,507],[216,889,888],[853,1585,1570],[1536,716,356],[886,873,623],[782,770,863],[432,24,26],[683,882,871],[884,724,871],[114,876,884],[516,590,389],[11,1218,1628],[862,113,872],[886,623,629],[830,1052,1120],[762,153,604],[773,408,792],[763,865,507],[153,840,604],[882,884,871],[531,151,326],[886,890,873],[133,262,200],[819,1232,844],[621,636,122],[645,892,519],[1130,1076,784],[114,263,876],[1670,10,1663],[911,670,894],[452,885,872],[872,885,201],[887,882,683],[878,884,882],[590,878,882],[890,867,689],[897,629,621],[897,886,629],[819,728,182],[519,893,688],[894,670,526],[898,894,526],[1536,356,849],[810,1363,785],[878,114,884],[879,888,892],[892,889,893],[893,898,688],[895,683,843],[895,887,683],[889,620,267],[590,882,389],[418,465,84],[949,897,621],[897,890,886],[889,267,893],[898,267,896],[531,326,473],[189,651,878],[843,683,646],[897,867,890],[888,889,892],[893,267,898],[896,894,898],[473,895,843],[895,389,887],[974,706,669],[513,1115,521],[326,151,895],[809,791,857],[211,262,133],[920,923,947],[923,90,947],[90,25,947],[25,972,935],[64,431,899],[52,899,901],[903,905,59],[437,967,73],[839,1242,761],[904,975,44],[917,301,144],[915,670,911],[905,201,885],[1684,63,1685],[1033,1194,288],[950,913,755],[912,918,911],[950,914,913],[506,918,912],[922,919,915],[911,922,915],[1004,451,492],[1263,553,639],[922,911,918],[630,920,947],[916,506,926],[916,918,506],[521,1115,1098],[916,922,918],[919,418,915],[83,38,75],[24,1685,771],[110,1230,1213],[712,8,1837],[922,930,919],[919,430,418],[1395,1402,1187],[930,922,916],[594,623,69],[35,431,968],[35,968,969],[866,924,1684],[1625,1263,675],[631,630,52],[930,931,919],[430,709,418],[302,333,49],[1446,978,1138],[799,1007,798],[931,843,919],[947,25,64],[885,738,667],[1262,963,964],[899,970,901],[1401,946,938],[1117,933,1091],[1685,63,771],[905,948,201],[979,937,980],[951,953,950],[937,270,443],[1154,903,59],[1194,954,1067],[909,405,907],[850,1151,59],[1769,811,1432],[76,206,250],[938,946,966],[965,927,942],[938,966,957],[955,975,904],[927,965,934],[52,51,631],[59,905,667],[431,935,968],[786,289,561],[252,122,671],[481,494,107],[954,1817,1067],[795,25,90],[958,965,945],[795,972,25],[902,983,955],[972,489,944],[1256,29,424],[671,331,945],[946,958,963],[956,955,904],[902,955,956],[671,512,331],[945,331,961],[662,671,122],[671,662,512],[934,65,927],[630,947,52],[666,631,910],[850,59,667],[961,331,234],[1024,411,1042],[890,69,873],[252,671,945],[975,290,940],[283,186,196],[30,283,365],[950,755,298],[946,965,958],[985,290,975],[969,290,985],[405,851,206],[935,431,64],[941,1423,1420],[964,963,167],[942,252,945],[78,757,57],[49,1005,66],[937,979,270],[631,666,827],[980,937,443],[66,689,282],[421,902,956],[947,64,52],[35,979,899],[951,971,953],[762,87,153],[27,31,381],[924,839,87],[946,963,966],[331,308,340],[957,966,1262],[473,843,931],[953,971,920],[270,969,902],[935,962,968],[51,1005,781],[969,983,902],[437,73,940],[69,421,956],[761,249,840],[263,974,669],[962,944,967],[962,437,290],[985,975,955],[907,405,948],[720,957,1262],[25,935,64],[176,200,571],[108,945,50],[250,851,414],[200,986,571],[881,974,263],[827,772,953],[970,899,980],[29,159,27],[234,331,340],[948,405,206],[980,899,979],[986,984,571],[571,984,881],[990,706,974],[946,934,965],[970,980,66],[1113,1486,1554],[984,981,881],[881,987,974],[689,66,443],[1005,901,66],[983,985,955],[165,47,718],[987,990,974],[1370,986,262],[901,970,66],[51,901,1005],[981,987,881],[988,706,990],[942,945,965],[290,437,940],[64,899,52],[988,556,706],[941,934,946],[431,35,899],[996,989,984],[984,989,981],[981,989,987],[35,969,270],[1370,995,986],[986,995,984],[989,999,987],[987,992,990],[992,988,990],[962,967,437],[951,950,976],[979,35,270],[421,270,902],[998,995,1370],[987,999,992],[988,364,556],[969,985,983],[689,443,890],[995,1000,984],[219,958,108],[998,1000,995],[999,997,992],[914,953,772],[845,1336,745],[806,787,231],[1000,996,984],[989,996,999],[50,945,961],[443,421,69],[797,158,779],[1098,1463,434],[996,1009,999],[1001,988,992],[1001,364,988],[903,907,905],[26,759,973],[997,1001,992],[632,364,1001],[1346,26,973],[998,1008,1000],[1000,1009,996],[531,931,736],[252,949,621],[286,388,525],[1174,1008,998],[1009,1010,999],[999,1010,997],[1014,1001,997],[614,105,517],[958,945,108],[525,1004,242],[963,958,219],[233,426,304],[1000,1008,1009],[1010,1014,997],[1001,1006,632],[824,413,39],[642,636,622],[480,388,205],[28,757,797],[1014,1006,1001],[1006,410,632],[975,940,44],[1234,420,858],[54,832,46],[1009,1012,1010],[167,963,219],[41,481,107],[1017,1010,1012],[122,636,662],[939,525,388],[525,939,1004],[950,953,914],[829,1735,739],[1008,880,1015],[1008,1015,1009],[1263,639,675],[956,594,69],[795,90,1347],[1179,848,1013],[759,1007,973],[1009,1015,1012],[1012,1016,1017],[1017,1014,1010],[1019,1011,1006],[927,65,949],[649,316,595],[913,48,755],[976,950,298],[1003,1015,880],[1018,1006,1014],[1021,1018,1014],[444,692,1011],[451,1029,1063],[1185,851,1163],[29,27,381],[181,525,242],[1021,1014,1017],[1016,1021,1017],[1018,1019,1006],[1019,444,1011],[927,949,942],[451,393,492],[903,1154,907],[391,101,57],[94,765,58],[419,1016,1012],[949,252,942],[907,1020,909],[765,442,58],[94,406,908],[1007,94,908],[34,1012,1015],[34,419,1012],[419,1021,1016],[451,1057,393],[907,948,905],[1034,1073,1039],[1061,906,1619],[1068,960,1034],[471,1249,104],[112,1024,1042],[372,379,125],[341,543,165],[141,1094,170],[566,243,1061],[398,1034,1039],[325,317,1823],[1493,296,1724],[850,667,1043],[1054,297,1065],[1619,135,1074],[1061,243,906],[680,1024,821],[1103,96,1245],[1440,1123,1491],[1047,1025,1044],[672,454,1231],[1484,697,1530],[993,672,1231],[178,154,1088],[1044,1041,1066],[112,1062,1058],[1530,649,676],[178,1088,1040],[1046,328,954],[243,244,1022],[954,1194,1033],[1042,411,1032],[971,993,1056],[960,1093,1034],[1754,1338,232],[385,1064,412],[1057,1063,111],[748,1071,1447],[1530,697,695],[971,1056,1270],[977,1059,1211],[649,741,316],[1060,1452,1030],[353,354,1323],[695,768,649],[398,404,1034],[596,316,741],[1836,119,13],[1513,1115,1528],[883,1081,1652],[1039,1073,1048],[462,426,233],[31,1296,354],[1055,1047,1066],[1032,1054,1045],[1521,310,1224],[119,861,13],[1194,1234,288],[1109,1771,1070],[1166,1160,776],[1044,1035,1041],[1026,960,1064],[1050,1032,1045],[1049,1041,387],[115,1013,99],[1046,954,1033],[1321,920,971],[611,1058,345],[1048,1066,1049],[1023,1055,1073],[1029,451,1004],[118,1094,141],[1094,1080,170],[1042,1032,1050],[1026,1064,385],[15,16,1084],[1096,1079,61],[1075,1071,748],[325,1817,328],[909,1163,405],[1022,1234,809],[374,398,1051],[1082,72,81],[1023,1034,1093],[1817,1794,1067],[86,1445,1400],[1507,1535,1510],[1079,1096,1075],[568,1478,1104],[1070,178,1040],[1034,1023,1073],[776,1155,113],[1103,143,142],[1140,81,73],[1082,81,1140],[1060,1030,936],[1040,1086,1109],[370,1065,385],[61,72,1082],[1087,1096,1144],[1040,1088,1086],[1651,812,752],[1062,1050,1045],[187,154,178],[179,187,178],[1099,1344,1101],[1668,1058,807],[1073,1055,1048],[1099,1336,1344],[1283,943,1123],[1049,387,1051],[1024,680,449],[61,1082,1100],[967,749,1111],[1439,1037,88],[742,1505,142],[398,1039,1051],[1107,1336,1099],[1344,1542,1101],[142,1505,1103],[477,1093,447],[477,1023,1093],[471,142,1249],[1041,1035,394],[1328,568,1104],[61,1100,1096],[154,1092,1088],[112,1042,1050],[154,187,168],[435,235,45],[1075,1096,1087],[97,1075,748],[1049,1066,1041],[816,1067,1028],[846,982,1142],[1245,96,284],[1092,154,1080],[1057,451,1063],[387,377,1051],[1055,1025,1047],[1075,1087,1089],[1106,1108,856],[1068,1034,404],[1480,1545,868],[906,135,1619],[1074,991,1095],[570,566,1061],[1025,453,1044],[745,1336,1107],[1035,1057,416],[1092,1102,1129],[1074,135,991],[1105,745,1107],[447,1026,446],[394,387,1041],[73,81,940],[1118,1108,1106],[1210,1108,874],[243,1022,906],[412,1064,1068],[1280,611,603],[960,447,1093],[1051,1039,1049],[1040,1109,1070],[1471,1037,1439],[69,890,443],[1377,703,1374],[1092,1080,1102],[1096,1100,788],[1096,788,1144],[1114,967,1111],[446,1026,297],[70,1112,883],[453,393,1057],[1118,874,1108],[1054,370,1045],[1080,1094,1102],[1039,1048,1049],[428,753,845],[1047,1044,1066],[1044,453,1035],[1472,731,1512],[1126,1121,743],[743,1121,1110],[1032,297,1054],[1480,868,1216],[71,358,72],[1133,967,1114],[1105,1119,745],[1035,453,1057],[1026,447,960],[454,851,1190],[1030,1477,652],[589,816,1028],[1110,1121,1106],[1122,1118,1106],[1116,874,1118],[1048,1055,1066],[1194,1067,816],[744,278,747],[745,1120,845],[845,1052,428],[1105,1780,1119],[1065,297,385],[1098,1529,1463],[731,1060,936],[235,434,812],[1445,1525,1117],[1106,1121,1122],[1122,1127,1118],[1127,1116,1118],[1094,118,1732],[1119,1120,745],[1406,1124,1097],[435,117,235],[1462,1440,1037],[1126,1129,1121],[1088,1092,1129],[1133,73,967],[1120,1052,845],[812,434,752],[1441,1559,1200],[1131,588,413],[1054,1065,370],[235,1098,434],[1052,1142,428],[1737,428,1142],[1496,1446,1483],[1182,1083,1654],[1121,1129,1122],[1732,1116,1127],[768,457,649],[761,1114,249],[1064,960,1068],[1135,1481,1136],[1126,952,1129],[1087,588,1131],[1087,1144,588],[859,788,1139],[1140,1133,1132],[1133,1140,73],[1822,570,1061],[394,1035,416],[1055,1023,459],[80,264,485],[1119,1128,1120],[145,1658,567],[695,891,768],[1129,1102,1122],[1122,1102,1127],[1416,1077,1413],[297,1026,385],[1052,846,1142],[1445,1117,1400],[952,1086,1129],[1714,1089,1131],[1131,1089,1087],[1100,1139,788],[112,1050,1062],[1323,354,1296],[49,333,1141],[1142,982,1737],[79,1457,1091],[1088,1129,1086],[1102,1094,1127],[1127,1094,1732],[1100,1082,1139],[1082,1132,1139],[1082,1140,1132],[1150,1043,397],[60,1166,289],[1696,1146,1698],[1297,1202,1313],[409,1297,1313],[1234,1194,420],[1408,1391,1394],[424,1235,1243],[1203,309,1148],[485,477,447],[1152,1156,850],[1153,1149,1155],[1153,1157,1149],[1149,1152,1150],[1156,1154,1151],[776,1153,1155],[1157,1152,1149],[1217,1393,1208],[1156,1159,1154],[1153,1165,1157],[1165,1152,1157],[1159,1020,1154],[1161,1153,776],[1161,1165,1153],[1165,1158,1152],[1152,1158,1156],[1158,1159,1156],[1166,776,561],[1160,1161,776],[1161,1164,1165],[1161,1160,1164],[1158,1162,1159],[1159,1162,1020],[1270,1321,971],[1164,1170,1165],[1165,1162,1158],[1162,1163,1020],[588,788,925],[1166,1167,1160],[1165,1170,1162],[1160,1167,1164],[1162,1170,1163],[1179,1167,1166],[1167,1168,1164],[1164,1168,1170],[1168,1169,1170],[1234,1022,288],[802,39,866],[1179,1168,1167],[1169,1173,1170],[1170,1173,1163],[1173,1185,1163],[1360,1267,1364],[1169,1185,1173],[611,244,243],[900,1226,1376],[1260,1408,1350],[618,840,831],[1181,1183,1179],[1179,1184,1168],[1208,1274,1291],[1183,1184,1179],[1168,1184,1169],[1387,1395,1254],[1208,1204,1172],[1182,1197,1083],[1187,1083,1197],[1213,1183,1181],[1169,1207,1185],[135,857,991],[1013,1213,1181],[1189,1183,1213],[1183,1189,1184],[1169,1184,1207],[1207,1190,1185],[1180,1389,1288],[1191,1192,1640],[1640,1192,1090],[1090,1205,1654],[1654,1205,1182],[1188,1395,1187],[1126,743,1733],[788,859,925],[809,1234,1171],[1193,1197,1182],[1189,1199,1184],[1639,1191,1637],[1639,1212,1191],[1205,1193,1182],[1198,1187,1197],[1199,1207,1184],[332,1053,846],[1090,1192,1205],[117,1188,1187],[435,1188,117],[435,1206,1188],[1199,1189,1213],[420,816,1053],[1212,1215,1191],[117,1187,1198],[45,1206,435],[120,1132,1133],[874,1116,1210],[1191,1215,1192],[1193,1216,1197],[1216,1198,1197],[1199,1214,1207],[117,521,235],[1220,1311,1078],[1220,900,1311],[1653,1215,1212],[1192,1225,1205],[1205,1209,1193],[1209,1216,1193],[1389,1217,1172],[1207,1214,454],[171,557,1747],[1805,1078,1787],[1805,1219,1078],[1198,1216,868],[666,910,854],[1230,1231,1213],[1213,1231,1199],[1199,1231,1214],[1219,1220,1078],[1215,1221,1192],[1192,1221,1225],[1225,1228,1205],[1205,1228,1209],[1209,1228,1216],[1464,1325,1223],[1215,1227,1221],[1228,1480,1216],[1226,1653,1376],[1653,1249,1215],[1221,1240,1225],[1225,1240,1228],[839,761,840],[1238,1219,1805],[1238,1220,1219],[1232,1380,1375],[1226,1249,1653],[1221,1227,1240],[233,207,532],[110,1236,1230],[1248,1231,1230],[1231,454,1214],[1249,1227,1215],[1248,1056,1231],[489,959,944],[448,1240,284],[925,859,1242],[1805,1244,1238],[1252,1220,1238],[1252,921,1220],[1236,1251,1230],[1230,1251,1248],[1056,993,1231],[1031,1264,1263],[68,1186,157],[1227,1245,1240],[1103,1245,143],[1243,1235,612],[1252,95,921],[1249,1226,1237],[1390,1387,1254],[1120,384,830],[830,332,846],[1227,143,1245],[1315,1369,1358],[1356,1269,1386],[972,795,489],[1831,1224,310],[1250,1255,1251],[1251,1056,1248],[1256,1243,103],[658,358,175],[1620,1238,1244],[1620,1252,1238],[1506,95,1252],[104,1249,1237],[1249,143,1227],[1268,1419,1329],[634,806,231],[618,831,815],[924,1242,839],[1255,1270,1251],[1251,1270,1056],[866,925,1242],[103,29,1256],[424,1243,1256],[134,1651,752],[1250,917,1255],[1172,1204,1260],[1352,1036,1276],[1265,1201,1329],[804,1282,1259],[1259,1294,723],[335,1330,1305],[407,762,799],[875,856,1195],[32,158,344],[967,944,749],[372,125,42],[1175,1354,1261],[553,612,1235],[1259,1273,1294],[1294,1283,723],[757,78,158],[407,799,798],[901,51,52],[139,1386,1389],[1386,1269,1389],[1389,1269,1217],[1148,1590,1268],[1428,1449,1450],[804,1281,1282],[1273,1259,1282],[158,399,779],[771,407,798],[521,1098,235],[917,1312,1255],[1312,1270,1255],[1217,1269,1393],[1195,1108,634],[1110,1106,856],[1210,1691,1176],[27,1112,1145],[1296,27,1145],[1171,858,791],[704,1148,1290],[1430,1436,1437],[1282,1308,1273],[1300,943,1283],[1393,1355,1274],[720,1278,769],[1287,1059,1399],[1310,1388,1272],[1312,1321,1270],[851,1185,1190],[1296,1145,1304],[26,24,771],[51,910,631],[1329,1290,1268],[1290,1148,1268],[1298,1293,733],[1281,1293,1282],[1282,1293,1308],[1308,1299,1273],[1300,1283,1294],[1340,943,1300],[1340,1301,943],[407,754,762],[1287,1399,1295],[34,139,128],[1288,1172,1260],[120,1133,1114],[1306,1113,1511],[1464,1223,1292],[1299,1294,1273],[1299,1300,1294],[1286,1295,838],[1285,1247,1286],[1247,713,1286],[1201,1265,1390],[1378,1368,1357],[1482,1320,917],[917,1320,1312],[850,1156,1151],[588,39,413],[1324,1306,686],[789,1365,928],[1223,1326,1292],[1292,1326,1298],[869,1097,1311],[790,786,561],[1323,1304,932],[1323,1296,1304],[1317,1324,686],[1306,368,1113],[1325,1342,1223],[1326,1348,1298],[1293,1327,1308],[1308,1318,1299],[704,1290,1258],[1320,1321,1312],[761,120,1114],[1684,802,866],[1674,6,1727],[1316,1323,932],[1335,1337,1305],[1348,1327,1293],[1298,1348,1293],[1333,1300,1299],[1333,1343,1300],[1328,1301,1340],[1328,1314,1301],[838,1399,1319],[921,1237,900],[409,1391,1408],[1376,1653,677],[1281,804,1458],[1331,1324,1317],[1324,368,1306],[368,1338,1307],[1327,797,1308],[797,1345,1308],[1308,1345,1318],[1318,1333,1299],[1341,1147,1572],[923,1321,1320],[923,920,1321],[39,588,866],[1141,1323,1316],[1330,1335,1305],[1337,1335,1336],[1339,1332,1325],[1223,1342,1326],[1342,1348,1326],[1348,797,1327],[1345,1333,1318],[1343,1340,1300],[1419,1265,1329],[1347,1320,1584],[1535,1141,1316],[1078,1311,582],[1344,1335,1330],[753,1331,1337],[368,1324,1331],[753,368,1331],[1332,1485,1325],[1325,1485,1342],[787,1343,1333],[137,1328,1340],[973,1341,1479],[406,1147,1341],[1171,1234,858],[1141,1535,1322],[49,1141,1322],[1344,1336,1335],[973,908,1341],[766,1347,1584],[1347,923,1320],[781,49,1322],[368,232,1338],[787,1340,1343],[787,137,1340],[568,1346,973],[58,1147,406],[442,1334,1147],[58,442,1147],[442,766,1334],[90,923,1347],[428,368,753],[779,1333,1345],[825,787,1333],[137,1349,1328],[1328,1346,568],[908,406,1341],[924,866,1242],[1336,753,1337],[428,232,368],[1115,777,1098],[1348,28,797],[797,779,1345],[779,825,1333],[1007,908,973],[583,1351,880],[1365,1246,977],[1658,145,1710],[1310,796,1388],[718,245,165],[1302,1272,1254],[1174,1351,583],[1174,715,1351],[1358,1260,1204],[1374,1373,1276],[1377,1374,1276],[678,1362,1382],[1377,1276,254],[139,34,40],[1008,1174,583],[1396,1286,1319],[768,891,457],[1316,932,1535],[1289,1371,1360],[182,736,864],[1355,1364,1274],[860,1367,1354],[1362,1222,1382],[1376,869,1311],[1590,1411,198],[1232,1375,877],[1394,1295,1286],[880,1356,1386],[880,1351,1356],[1211,1059,1287],[197,678,1405],[880,1386,1003],[1368,1253,1357],[1357,1253,1036],[715,1289,1364],[1354,1367,703],[1383,877,1375],[1266,1288,1260],[1373,1374,703],[1372,1289,1174],[1303,1366,1378],[1351,715,1355],[1665,1666,624],[1309,1357,1036],[900,1237,1226],[1174,1289,715],[1337,1331,1317],[1360,1303,1359],[1267,1354,1175],[1241,1284,1414],[1377,254,929],[1385,855,836],[1396,1319,1436],[1361,1366,1303],[1381,1368,1378],[1313,1211,1391],[1368,1385,1363],[813,82,861],[1058,1280,807],[893,519,892],[1359,1303,860],[1382,1350,1247],[1371,1303,1360],[1267,1175,1271],[769,1286,1396],[712,1837,82],[1366,1385,1381],[1365,796,1310],[1003,1386,40],[780,1371,1370],[561,862,790],[1284,1380,864],[1449,1428,177],[611,1280,1058],[1284,1375,1380],[926,506,1241],[1305,1337,1317],[309,1203,208],[1388,1201,1390],[1309,1036,1352],[1377,929,1411],[1399,1059,1257],[1112,70,1145],[289,1166,561],[1288,1389,1172],[1362,37,1180],[713,1394,1286],[1355,1393,1269],[1401,1423,941],[1274,1271,1384],[860,1378,1367],[715,1364,1355],[677,1406,869],[1297,1358,1202],[1388,1258,1329],[1180,1288,1266],[1008,583,880],[1524,1425,1463],[1390,1403,1387],[1278,1379,1247],[1278,1247,1285],[964,1278,1262],[1358,1369,1202],[1715,1699,1726],[926,1241,1414],[1341,1572,1479],[926,930,916],[1397,51,781],[409,1358,1297],[1236,436,301],[1376,677,869],[1351,1355,1356],[758,1534,1523],[1378,1357,1367],[977,1211,1365],[1135,1136,854],[1394,1391,1295],[1266,1260,1222],[1365,1302,1246],[1232,877,844],[736,930,864],[1408,1358,409],[1508,817,1523],[1381,1385,1368],[718,854,910],[854,718,1135],[1382,1222,1350],[1391,1211,1287],[1391,1287,1295],[1257,1651,134],[1414,1284,864],[1291,1369,1315],[1202,928,1313],[86,1400,1413],[1413,1200,86],[1263,1625,1031],[1413,1400,1404],[1002,1664,1834],[930,926,1414],[1399,1257,134],[520,316,596],[1393,1274,1208],[1657,1655,1712],[1407,1404,1400],[1404,1410,1413],[1649,1229,1406],[1362,1266,1222],[1384,1271,1175],[900,1376,1311],[1274,1384,1291],[1291,1384,1431],[1433,1396,1436],[1267,1359,1354],[309,1353,703],[838,1319,1286],[1407,1410,1404],[441,1518,773],[1241,123,1428],[1622,1521,1224],[1217,1208,1172],[1130,793,1076],[425,1409,1481],[1481,1409,1533],[1303,1378,860],[1350,1408,1394],[1246,1651,977],[1289,1360,1364],[1727,1694,1623],[1417,1407,1533],[1417,1410,1407],[1406,1650,1649],[1319,134,1437],[1414,864,930],[1406,1229,1124],[1354,1359,860],[1433,769,1396],[1417,1533,1409],[1416,1413,1410],[1415,1416,1410],[95,1237,921],[1392,1254,1395],[1360,1359,1267],[1258,1290,1329],[1180,128,1389],[1420,1409,425],[1417,1418,1410],[1418,1415,1410],[1422,1077,1416],[1247,1350,1394],[37,43,1180],[1204,1315,1358],[1428,1383,1375],[1356,1355,1269],[1409,1418,1417],[1302,45,1246],[1421,1416,1415],[1421,1422,1416],[1422,1494,1077],[957,720,938],[1423,1409,1420],[1423,1418,1409],[752,434,1438],[1260,1358,1408],[1363,1385,785],[1423,1426,1418],[1426,1424,1418],[1229,1649,1124],[1222,1260,1350],[1508,1523,1137],[1278,1285,769],[1482,917,144],[1418,1424,1415],[1425,1422,1421],[1425,1524,1422],[1272,1388,1390],[1391,409,1313],[1378,1366,1381],[1371,483,1361],[720,1262,1278],[29,103,159],[1271,1364,1267],[1424,1427,1415],[1537,1522,1518],[134,752,1438],[1420,934,941],[1428,1375,1284],[1277,1224,1831],[1362,1180,1266],[1401,1426,1423],[1577,1369,1291],[268,483,262],[1383,1450,1456],[1384,1175,1431],[1430,1415,1427],[1430,1421,1415],[1430,1425,1421],[1379,1382,1247],[1252,1553,1429],[1206,1392,1395],[1433,1430,1427],[309,208,1353],[1272,1390,1254],[1361,483,1366],[1523,817,808],[1302,1254,1392],[1371,1361,1303],[1426,1435,1424],[1435,1433,1424],[1433,1427,1424],[720,769,1433],[796,1258,1388],[1590,1419,1268],[1289,1372,1371],[1305,1317,1509],[998,1372,1174],[40,1386,139],[1261,1354,703],[1364,1271,1274],[134,1438,1437],[1436,1319,1437],[1317,686,1509],[1484,932,1304],[1434,1432,1509],[1420,65,934],[931,930,736],[1367,1357,1309],[1372,1370,1371],[1204,1208,1315],[1426,938,1435],[1368,1363,1253],[1207,454,1190],[1302,1310,1272],[309,1377,390],[390,1377,1411],[1370,1372,998],[1411,1590,1148],[720,1433,1435],[1450,1383,1428],[1379,678,1382],[1405,678,1379],[1208,1291,1315],[1399,134,1319],[1367,1309,1373],[1373,1352,1276],[596,741,593],[553,1264,612],[1433,1436,1430],[1437,1438,1430],[964,1405,1379],[1373,1309,1352],[1265,1403,1390],[1233,1618,1434],[1365,1310,1302],[789,796,1365],[720,1435,938],[128,139,1389],[1466,933,1525],[1191,1640,1637],[1314,1442,943],[1141,353,1323],[1489,1138,1474],[1462,1477,1440],[1474,1138,1488],[1442,1314,1443],[1446,1030,1546],[1484,1145,697],[1549,1443,1445],[1470,1572,1468],[1397,1239,1507],[1649,1825,1824],[1259,1440,1477],[1451,1450,1449],[978,1446,652],[1454,1456,1451],[1451,1456,1450],[341,1507,595],[933,1547,79],[804,1452,1060],[1454,1455,1456],[1398,1460,1454],[1455,877,1456],[1277,1831,1825],[804,1060,1458],[1339,1459,1595],[1314,1104,1443],[933,1448,1547],[147,1460,1398],[1460,1461,1454],[1454,1461,1455],[1292,1125,1464],[417,1531,1480],[1459,1339,1325],[811,1756,335],[1512,936,1490],[777,1529,1098],[147,1475,1460],[1464,253,1459],[836,855,482],[1487,1486,1307],[1104,1501,1443],[1439,1200,1532],[1475,1469,1460],[1460,1469,1461],[1325,1464,1459],[1277,1825,1649],[1532,1200,1077],[844,877,1455],[1572,933,1466],[1479,568,973],[1509,335,1305],[1339,1595,1759],[1469,1476,1461],[1461,1476,1455],[1104,1470,1468],[1464,1472,253],[1117,1091,1407],[1756,1542,335],[1206,1395,1188],[335,1542,1330],[835,844,1455],[1471,1598,1462],[1491,1442,1441],[835,1455,1476],[1441,1442,1443],[1489,1474,1473],[1251,1236,1250],[1030,1452,1477],[1598,1439,1532],[978,1598,1492],[1426,1401,938],[1448,1584,1482],[1724,1497,1475],[1475,1497,1469],[1484,1535,932],[1307,1486,1113],[1487,696,1495],[1037,1491,1441],[1030,1446,936],[1453,1487,1495],[696,1467,1495],[1138,1489,1483],[1497,1143,1469],[1469,1143,1476],[652,1598,978],[850,1043,1150],[1482,1584,1320],[1731,98,1697],[1113,1554,1573],[1524,1532,1494],[1496,1467,696],[1452,1259,1477],[296,1504,1497],[1504,1143,1497],[1143,1499,1476],[718,910,1498],[868,1540,1528],[817,1253,810],[1490,696,1487],[1440,1491,1037],[1510,676,595],[1488,1492,1517],[781,1239,1397],[1467,1519,1503],[1500,1307,1759],[1149,397,452],[1504,1514,1143],[1514,842,1143],[1125,733,1458],[1503,1531,1555],[1276,1036,1137],[1440,723,1123],[1036,1508,1137],[817,1508,1253],[103,883,1112],[1458,731,1472],[1512,1490,1487],[1487,1453,1486],[1138,978,1488],[1036,1253,1508],[1398,149,147],[1474,1517,1513],[1125,1458,1472],[1486,1453,1554],[1518,1534,758],[345,1058,1062],[928,1202,1369],[1554,1541,1505],[1464,1125,1472],[1504,764,1514],[304,426,573],[1505,742,1506],[1479,1572,1478],[1519,1483,1489],[833,716,1069],[1522,1534,1518],[1115,1513,777],[811,335,1432],[1591,1533,1407],[777,1517,1529],[1513,1517,777],[1498,910,1397],[1069,1539,833],[833,1539,1537],[1522,1551,1534],[1534,1551,1523],[1538,1137,1523],[910,51,1397],[1367,1373,703],[1466,1525,1468],[157,1186,1832],[1429,1511,1506],[1573,1505,1506],[1259,1452,804],[1503,1495,1467],[262,483,780],[1572,1466,1468],[1536,1556,716],[716,1556,1069],[1544,1523,1551],[1544,1538,1523],[1511,1573,1506],[933,1572,1448],[1543,1537,1539],[1537,1543,1522],[1091,933,79],[1519,1540,1545],[1549,1445,86],[1069,1548,1539],[1548,1543,1539],[1543,1551,1522],[1500,1487,1307],[68,784,1186],[1552,1544,1551],[1550,1538,1544],[1538,1550,1137],[1519,1473,1540],[1547,1448,1482],[1560,1563,1536],[1536,1563,1556],[1556,1548,1069],[1543,1558,1551],[1137,1550,1276],[1453,1495,1555],[1561,1543,1548],[1543,1561,1558],[1558,1566,1551],[1552,1550,1544],[1569,1557,1550],[1557,1276,1550],[1276,1557,254],[1531,1503,1480],[1535,1530,1510],[1545,1503,1519],[1547,1482,79],[1566,1552,1551],[1552,1569,1550],[1503,1545,1480],[703,1377,309],[1625,675,756],[1037,1441,88],[929,254,1557],[849,1567,1560],[1556,1564,1548],[1492,1529,1517],[1252,1429,1506],[1553,1027,1429],[1453,1555,1541],[1554,1453,1541],[1233,686,1553],[1328,1104,1314],[1564,1576,1548],[1548,1576,1561],[1557,1562,929],[1520,112,1668],[1483,1446,1138],[778,1570,1567],[1563,1564,1556],[1561,1565,1558],[1565,1566,1558],[1569,1552,1566],[1562,1557,1569],[1530,1535,1484],[1387,1402,1395],[1621,1634,1387],[1567,1568,1560],[1560,1568,1563],[1571,1569,1566],[1344,1330,1542],[1577,1431,1353],[1638,233,304],[1524,1463,1529],[1353,1431,1175],[1077,1200,1413],[1478,1470,1104],[1568,1575,1563],[1563,1575,1564],[1575,1576,1564],[1561,1576,1565],[1565,1574,1566],[1562,1515,929],[1555,96,1541],[1531,417,96],[1555,1531,96],[1246,45,1651],[208,1577,1353],[1586,1568,1567],[1574,1571,1566],[1571,1583,1569],[1474,1513,1528],[1239,1322,1535],[1478,1572,1470],[1570,1586,1567],[1488,1517,1474],[8,1833,1837],[1123,1442,1491],[1589,1568,1586],[1576,1594,1565],[1565,1594,1574],[1562,198,1515],[1559,1441,1549],[1441,1443,1549],[1135,425,1481],[1239,1535,1507],[1595,1487,1500],[1570,1585,1586],[1589,1578,1568],[1568,1578,1575],[1579,1569,1583],[1177,1577,208],[115,1236,110],[1578,1593,1575],[1587,1576,1575],[1576,1581,1594],[1571,1582,1583],[1588,1579,1583],[1579,1580,1562],[1569,1579,1562],[1562,1580,198],[1027,1511,1429],[1589,1593,1578],[1587,1581,1576],[1582,1574,1594],[1574,1582,1571],[1575,1593,1587],[1583,1582,1588],[1580,1590,198],[1587,1593,1581],[1505,1541,96],[1369,1577,1177],[1573,1554,1505],[1479,1478,568],[1585,1589,1586],[1369,1177,704],[766,1584,1334],[977,1257,1059],[1091,1591,1407],[1591,1091,1457],[1585,1604,1589],[1581,1592,1594],[1602,1582,1594],[1582,1608,1588],[1608,1579,1588],[1579,1597,1580],[1419,1590,1580],[1597,1419,1580],[1431,1577,1291],[1589,1604,1593],[1601,1596,1593],[1593,1596,1581],[1306,1511,1027],[1511,1113,1573],[1786,1412,1585],[1412,1604,1585],[1581,1596,1592],[1592,1602,1594],[1608,1599,1579],[1599,1611,1579],[1579,1611,1597],[1512,1487,253],[1519,1489,1473],[1545,1540,868],[1083,1187,1402],[1117,1407,1400],[1292,733,1125],[284,1240,1245],[1604,1600,1593],[1600,1601,1593],[1582,1607,1608],[789,1369,704],[1467,1483,1519],[1601,1613,1596],[1596,1613,1592],[1602,1607,1582],[1620,1553,1252],[1601,1605,1613],[1592,1613,1602],[1602,1606,1607],[1608,1609,1599],[1599,1609,1611],[1603,1597,1611],[1265,1419,1597],[1603,1265,1597],[1392,1206,45],[928,1369,789],[1474,1528,1473],[1104,1468,1501],[1412,1521,1604],[1613,1631,1602],[1607,1610,1608],[1608,1610,1609],[1476,863,835],[1495,1503,1555],[1498,1397,718],[1520,1668,7],[1604,1615,1600],[1605,1601,1600],[1602,1631,1606],[1606,1610,1607],[1759,1595,1500],[1292,1298,733],[1615,1604,1521],[1609,1603,1611],[652,1462,1598],[1468,1525,1445],[1443,1501,1445],[1134,1723,150],[1521,1622,1615],[1615,1616,1600],[1616,1605,1600],[1605,1616,1612],[1605,1612,1613],[1612,1617,1613],[1613,1617,1631],[1606,1614,1610],[1265,1603,1403],[448,417,1480],[1595,253,1487],[1501,1468,1445],[1383,1456,877],[1490,1496,696],[1610,1627,1609],[1627,1621,1609],[1591,1481,1533],[1598,1471,1439],[1353,1261,703],[1606,1631,1614],[1609,1621,1403],[1532,1077,1494],[1528,1115,513],[1546,652,1446],[1211,928,1365],[1540,1473,1528],[1078,1502,1787],[1425,1430,1438],[1617,1630,1631],[959,749,944],[566,570,603],[1716,310,1521],[775,452,397],[1615,1636,1616],[1616,1636,1612],[1610,1632,1627],[789,704,1258],[1457,1481,1591],[1769,1756,811],[207,1629,722],[1629,1625,722],[1224,1277,1622],[1622,1636,1615],[1636,1646,1612],[1612,1630,1617],[1631,1626,1614],[1614,1632,1610],[1506,104,95],[1481,1457,1136],[1123,943,1442],[936,1446,1496],[1499,863,1476],[1629,1031,1625],[1233,1509,686],[1633,1634,1621],[1621,1387,1403],[1472,1512,253],[1177,208,704],[1277,1636,1622],[1626,1632,1614],[1627,1633,1621],[936,1496,1490],[185,1454,1451],[731,936,1512],[1638,1635,207],[553,1263,1264],[1653,1212,1639],[1633,1627,1632],[1633,1387,1634],[1458,1060,731],[368,1307,1113],[1264,1031,1629],[1152,850,1150],[1277,1644,1636],[1646,1637,1612],[1637,1630,1612],[1647,1631,1630],[1647,1626,1631],[1422,1524,1494],[1030,652,1546],[1635,1629,207],[1635,1264,1629],[1639,1646,1636],[1637,1640,1630],[1641,1632,1626],[1632,1642,1633],[1633,1643,1387],[842,1499,1143],[865,863,1499],[1516,978,1492],[67,1130,784],[1103,1505,96],[88,1441,1200],[1644,1639,1636],[1640,1647,1630],[1647,1641,1626],[1633,1648,1643],[1492,1532,1524],[1488,1516,1492],[1037,1471,1462],[612,1264,1635],[1502,1078,1124],[1641,1642,1632],[1648,1633,1642],[1528,513,868],[1492,1598,1532],[1095,991,760],[679,157,1664],[760,1128,1785],[1277,1650,1644],[320,1022,244],[1559,1549,86],[1676,1520,7],[1488,978,1516],[1095,760,1785],[1128,384,1120],[304,312,1638],[1081,1638,312],[1081,1635,1638],[103,612,1635],[652,1477,1462],[1650,1645,1644],[1645,1639,1644],[1639,1637,1646],[1640,1090,1647],[1654,1641,1647],[1654,1642,1641],[1654,1648,1642],[1643,1402,1387],[1432,335,1509],[384,1128,760],[1652,312,304],[103,1243,612],[1277,1649,1650],[1090,1654,1647],[1643,1648,1402],[1134,324,1675],[679,68,157],[1652,1081,312],[1136,301,803],[1653,1639,1645],[723,1440,1259],[803,854,1136],[104,1506,742],[1112,159,103],[1654,1083,1648],[977,1651,1257],[1397,1507,718],[1081,103,1635],[1650,677,1645],[1083,1402,1648],[1706,1655,1671],[1624,1704,1711],[767,2,1],[608,794,294],[1678,1683,1686],[767,1682,2],[1669,1692,1675],[296,1681,764],[1671,1656,1672],[17,1673,1679],[1706,1671,1673],[1662,1674,1699],[1655,1657,1656],[418,84,915],[1526,1514,764],[1658,1657,567],[870,1695,764],[813,1697,98],[1659,821,5],[60,1013,848],[1013,110,1213],[661,1038,1692],[1660,1703,17],[1693,1673,17],[1663,1715,1743],[1013,115,110],[344,1733,32],[1670,1663,1743],[1670,1743,1738],[1677,1670,1738],[1661,4,3],[1084,1683,1678],[1728,793,1130],[1683,1767,1196],[1677,1738,1196],[1279,1786,853],[294,1038,608],[1279,1689,1786],[870,18,1708],[870,1680,1695],[1705,10,1670],[1084,1767,1683],[1196,1738,1686],[1750,870,1681],[1750,18,870],[1773,1703,1660],[1135,47,425],[150,323,1134],[1707,1655,1706],[1741,344,1687],[1685,1691,1684],[1684,1691,802],[1672,1656,0],[1038,124,608],[1671,1672,1690],[1628,1218,1767],[1686,1275,1667],[1493,1750,1681],[1773,18,1750],[1773,1660,18],[1679,1671,16],[1735,1706,1673],[1667,1678,1686],[1688,1658,1],[1656,1688,0],[1293,1281,1458],[1698,1678,1667],[1696,1130,1722],[1698,1667,1696],[1715,1662,1699],[1692,1038,294],[1682,767,357],[1669,661,1692],[802,1702,824],[1028,1067,1784],[822,1624,778],[119,813,861],[1218,1670,1677],[1703,1693,17],[1658,1710,1],[750,1730,1729],[1701,750,1729],[1693,1735,1673],[1731,1694,98],[1691,1702,802],[783,1729,1719],[1680,870,1708],[1707,1709,1655],[533,756,675],[1691,1210,1702],[11,1705,1670],[1767,1218,1196],[1218,1677,1196],[1664,1716,1721],[1729,1725,1719],[1729,1072,1725],[1210,1116,1702],[1702,1720,824],[1682,1661,2],[1713,1719,1721],[1716,1786,1713],[1730,1722,1072],[294,1717,1811],[1692,294,1666],[1659,680,821],[824,1720,1714],[1726,1731,1718],[345,1062,1045],[1738,1743,1275],[1075,1089,1071],[783,1719,1689],[1275,684,1728],[1692,1666,1665],[1675,1692,1665],[294,1811,1666],[1716,1664,310],[1678,1698,1700],[6,9,1727],[676,649,595],[381,31,361],[1723,1804,1772],[1727,9,1694],[1720,1089,1714],[1786,1716,1412],[1683,1196,1686],[1718,1697,1085],[1116,1739,1702],[1739,1734,1720],[1702,1739,1720],[1089,1720,1734],[509,748,1745],[1743,1715,1726],[1717,294,794],[1116,1732,1739],[1718,1731,1697],[1696,1667,1130],[1134,1665,1723],[1694,712,98],[101,1687,102],[391,1736,101],[662,636,642],[1734,1447,1089],[1089,1447,1071],[436,99,493],[1689,1279,783],[1485,1465,1342],[1736,1687,101],[344,1741,1733],[1741,1742,1733],[1735,829,1706],[829,1707,1706],[1485,1332,1465],[952,1126,1742],[1747,1447,1734],[879,892,645],[1730,1146,1696],[829,1709,1707],[1709,1712,1655],[118,1739,1732],[1332,1744,1465],[1687,1749,1741],[1741,1758,1742],[679,1072,68],[1072,1722,68],[118,1747,1739],[1747,1734,1739],[1465,1744,1736],[1736,1740,1687],[1704,1701,783],[1665,624,1723],[1722,1130,67],[1025,1055,467],[1444,14,1701],[558,522,530],[1657,1658,1688],[1339,1746,1332],[1332,1748,1744],[1687,1740,1749],[1741,1749,1758],[1109,952,1742],[1747,118,141],[1671,1690,1628],[1671,1628,16],[1657,1688,1656],[1745,748,1447],[357,767,1710],[1746,1748,1332],[1146,1700,1698],[1759,1307,1338],[1239,781,1322],[1745,1447,1747],[522,1745,1747],[316,717,595],[148,1493,1724],[1758,1109,1742],[1725,1072,679],[726,719,1661],[1695,1680,1526],[1772,1750,1493],[148,1772,1493],[1542,1751,1101],[952,1109,1086],[1744,1752,1736],[1736,1752,1740],[1753,1755,1740],[391,1342,1736],[821,112,1520],[557,530,1747],[530,522,1747],[994,879,645],[1542,1756,1751],[1813,1693,1703],[1746,1754,1748],[1748,1764,1744],[1752,1757,1740],[1740,1757,1753],[1749,1740,1755],[1755,1763,1749],[1763,1758,1749],[1275,1743,684],[1813,1735,1693],[1107,1099,1101],[1723,624,1804],[1403,1603,1609],[1748,1754,1764],[1744,1757,1752],[1760,1109,1758],[1465,1736,1342],[436,115,99],[1686,1738,1275],[1751,1766,1101],[1759,1754,1746],[1755,1753,1763],[1570,1279,853],[1701,1146,750],[1655,1656,1671],[11,1670,1218],[1761,1751,1756],[1766,1107,1101],[1726,1623,1731],[1711,1704,1279],[67,784,68],[558,530,545],[1620,1618,1233],[1769,1761,1756],[102,1687,344],[1338,1754,1759],[1754,232,1764],[1744,1765,1757],[1757,1763,1753],[1762,1760,1758],[1760,1771,1109],[1339,1759,1746],[1675,1665,1134],[1730,1696,1722],[1774,1751,1761],[1766,1780,1107],[1780,1105,1107],[1764,1765,1744],[1763,1762,1758],[1772,1773,1750],[1811,1813,1703],[1434,1769,1432],[1780,1766,1751],[232,1781,1764],[1711,1279,1570],[1688,1,0],[1774,1780,1751],[1764,1781,1765],[1765,1768,1757],[1757,1768,1763],[1777,1782,1760],[1762,1777,1760],[1769,1774,1761],[1763,1777,1762],[1760,1782,1771],[232,1737,1781],[1768,1776,1763],[272,255,774],[1669,994,661],[1618,1769,1434],[1765,589,1768],[1770,1777,1763],[1701,1729,783],[1783,1774,1769],[1789,1780,1774],[589,1775,1768],[1776,1770,1763],[1782,1778,1771],[1771,1778,1070],[624,1703,1773],[624,1811,1703],[1620,1244,1618],[1779,1769,1618],[1779,1783,1769],[739,1735,1813],[1775,1776,1768],[1790,1777,1770],[1777,1778,1782],[1725,679,1721],[733,1293,1458],[1802,1618,1244],[1802,1779,1618],[1788,1783,1779],[1789,1774,1783],[1796,1780,1789],[1796,1119,1780],[1823,1817,325],[1699,1727,1623],[750,1146,1730],[1497,1724,296],[1128,1119,1796],[61,62,71],[1131,413,824],[1114,1111,249],[1784,1776,1775],[1123,723,1283],[1791,1788,1779],[1788,1789,1783],[1095,1797,1074],[1028,1784,1775],[1784,1770,1776],[1777,1790,1778],[1793,1797,1095],[1797,1800,1074],[1798,1790,1770],[1805,1802,1244],[1802,1791,1779],[1792,1789,1788],[1793,1785,1128],[1793,1095,1785],[1074,1800,1619],[741,457,593],[1798,1770,1784],[1798,1794,1790],[1786,1689,1713],[684,1726,1718],[1728,1085,793],[1795,1787,1502],[1806,1802,1805],[1819,1788,1791],[1067,1798,1784],[1790,1794,1778],[1795,1502,1124],[1801,1805,1787],[1807,1791,1802],[1807,1819,1791],[1819,1792,1788],[1799,1128,1796],[994,645,661],[684,1085,1728],[684,1718,1085],[1699,1623,1726],[1801,1787,1795],[1808,1789,1792],[1808,1796,1789],[1799,1793,1128],[1809,1797,1793],[1809,1803,1797],[1803,1800,1797],[1067,1794,1798],[774,255,1778],[1673,1671,1679],[879,1669,888],[19,1807,1802],[1810,1619,1800],[879,994,1669],[1794,774,1778],[1723,1772,148],[1804,1773,1772],[1814,1795,1124],[1649,1814,1124],[1814,1801,1795],[1812,1806,1805],[19,1802,1806],[19,1819,1807],[1810,1800,1803],[1804,624,1773],[1714,1131,824],[1801,1812,1805],[1812,19,1806],[1808,1792,1819],[1799,1809,1793],[1821,1810,1803],[1717,739,1813],[1061,1619,1822],[1794,1817,774],[79,1482,144],[1815,1801,1814],[23,1819,19],[589,1028,1775],[1817,1823,774],[1689,1719,1713],[1824,1814,1649],[1827,1818,1801],[1818,1812,1801],[1818,19,1812],[1818,20,19],[1816,1809,1799],[1821,1803,1809],[1822,1619,1810],[124,708,608],[1663,10,1715],[1815,1827,1801],[1820,1808,1819],[23,1820,1819],[603,1810,1821],[603,1822,1810],[1085,1697,793],[1628,1690,11],[1527,1704,1624],[1730,1072,1729],[1526,1444,1704],[1526,1680,1444],[1704,1444,1701],[1816,1821,1809],[1722,67,68],[317,272,1823],[1716,1713,1721],[16,1628,1767],[1527,1526,1704],[1824,1826,1814],[1814,1826,1815],[1818,21,20],[1835,1808,1820],[603,570,1822],[226,1070,1778],[1013,1181,1179],[1721,679,1664],[1717,1813,1811],[1828,1827,1815],[22,1820,23],[22,1835,1820],[1830,603,1821],[719,1659,5],[643,567,1657],[1717,794,739],[1825,1826,1824],[1828,1815,1826],[1829,21,1818],[1808,1835,13],[4,719,5],[10,1662,1715],[1828,1832,1827],[1832,1818,1827],[12,1833,1816],[1833,1821,1816],[1833,1830,1821],[14,1146,1701],[1186,1829,1818],[1280,603,1830],[14,1700,1146],[1667,1728,1130],[1825,1834,1826],[1834,1828,1826],[1832,1186,1818],[1836,13,1835],[1624,1711,1570],[778,1624,1570],[1719,1725,1721],[1002,1825,1831],[1002,1834,1825],[1834,1832,1828],[1186,21,1829],[1836,1835,22],[1837,1833,12],[1280,1830,1833],[1667,1275,1728],[16,1767,1084],[589,1765,1838],[1765,1781,1838],[1781,1737,1838],[1737,982,1838],[982,1053,1838],[1053,816,1838],[816,589,1838]]

},{}],40:[function(require,module,exports){
var size = require('element-size')

module.exports = fit

var scratch = new Float32Array(2)

function fit(canvas, parent, scale) {
  var isSVG = canvas.nodeName.toUpperCase() === 'SVG'

  canvas.style.position = canvas.style.position || 'absolute'
  canvas.style.top = 0
  canvas.style.left = 0

  resize.scale  = parseFloat(scale || 1)
  resize.parent = parent

  return resize()

  function resize() {
    var p = resize.parent || canvas.parentNode
    if (typeof p === 'function') {
      var dims   = p(scratch) || scratch
      var width  = dims[0]
      var height = dims[1]
    } else
    if (p && p !== document.body) {
      var psize  = size(p)
      var width  = psize[0]|0
      var height = psize[1]|0
    } else {
      var width  = window.innerWidth
      var height = window.innerHeight
    }

    if (isSVG) {
      canvas.setAttribute('width', width * resize.scale + 'px')
      canvas.setAttribute('height', height * resize.scale + 'px')
    } else {
      canvas.width = width * resize.scale
      canvas.height = height * resize.scale
    }

    canvas.style.width = width + 'px'
    canvas.style.height = height + 'px'

    return resize
  }
}

},{"element-size":41}],41:[function(require,module,exports){
module.exports = getSize

function getSize(element) {
  // Handle cases where the element is not already
  // attached to the DOM by briefly appending it
  // to document.body, and removing it again later.
  if (element === window || element === document.body) {
    return [window.innerWidth, window.innerHeight]
  }

  if (!element.parentNode) {
    var temporary = true
    document.body.appendChild(element)
  }

  var bounds = element.getBoundingClientRect()
  var styles = getComputedStyle(element)
  var height = (bounds.height|0)
    + parse(styles.getPropertyValue('margin-top'))
    + parse(styles.getPropertyValue('margin-bottom'))
  var width  = (bounds.width|0)
    + parse(styles.getPropertyValue('margin-left'))
    + parse(styles.getPropertyValue('margin-right'))

  if (temporary) {
    document.body.removeChild(element)
  }

  return [width, height]
}

function parse(prop) {
  return parseFloat(prop) || 0
}

},{}],42:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],43:[function(require,module,exports){
module.exports = adjoint;

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};
},{}],44:[function(require,module,exports){
module.exports = clone;

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],45:[function(require,module,exports){
module.exports = copy;

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],46:[function(require,module,exports){
module.exports = create;

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
    var out = new Float32Array(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],47:[function(require,module,exports){
module.exports = determinant;

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};
},{}],48:[function(require,module,exports){
module.exports = fromQuat;

/**
 * Creates a matrix from a quaternion rotation.
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @returns {mat4} out
 */
function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};
},{}],49:[function(require,module,exports){
module.exports = fromRotation

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotate(dest, dest, rad, axis)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
  var s, c, t
  var x = axis[0]
  var y = axis[1]
  var z = axis[2]
  var len = Math.sqrt(x * x + y * y + z * z)

  if (Math.abs(len) < 0.000001) {
    return null
  }

  len = 1 / len
  x *= len
  y *= len
  z *= len

  s = Math.sin(rad)
  c = Math.cos(rad)
  t = 1 - c

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c
  out[1] = y * x * t + z * s
  out[2] = z * x * t - y * s
  out[3] = 0
  out[4] = x * y * t - z * s
  out[5] = y * y * t + c
  out[6] = z * y * t + x * s
  out[7] = 0
  out[8] = x * z * t + y * s
  out[9] = y * z * t - x * s
  out[10] = z * z * t + c
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

},{}],50:[function(require,module,exports){
module.exports = fromRotationTranslation;

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};
},{}],51:[function(require,module,exports){
module.exports = fromScaling

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.scale(dest, dest, vec)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
  out[0] = v[0]
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = v[1]
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = v[2]
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

},{}],52:[function(require,module,exports){
module.exports = fromTranslation

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.translate(dest, dest, vec)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
  out[0] = 1
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = 1
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = 1
  out[11] = 0
  out[12] = v[0]
  out[13] = v[1]
  out[14] = v[2]
  out[15] = 1
  return out
}

},{}],53:[function(require,module,exports){
module.exports = fromXRotation

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateX(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad)

    // Perform axis-specific matrix multiplication
    out[0] = 1
    out[1] = 0
    out[2] = 0
    out[3] = 0
    out[4] = 0
    out[5] = c
    out[6] = s
    out[7] = 0
    out[8] = 0
    out[9] = -s
    out[10] = c
    out[11] = 0
    out[12] = 0
    out[13] = 0
    out[14] = 0
    out[15] = 1
    return out
}
},{}],54:[function(require,module,exports){
module.exports = fromYRotation

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateY(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad)

    // Perform axis-specific matrix multiplication
    out[0] = c
    out[1] = 0
    out[2] = -s
    out[3] = 0
    out[4] = 0
    out[5] = 1
    out[6] = 0
    out[7] = 0
    out[8] = s
    out[9] = 0
    out[10] = c
    out[11] = 0
    out[12] = 0
    out[13] = 0
    out[14] = 0
    out[15] = 1
    return out
}
},{}],55:[function(require,module,exports){
module.exports = fromZRotation

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateZ(dest, dest, rad)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad)

    // Perform axis-specific matrix multiplication
    out[0] = c
    out[1] = s
    out[2] = 0
    out[3] = 0
    out[4] = -s
    out[5] = c
    out[6] = 0
    out[7] = 0
    out[8] = 0
    out[9] = 0
    out[10] = 1
    out[11] = 0
    out[12] = 0
    out[13] = 0
    out[14] = 0
    out[15] = 1
    return out
}
},{}],56:[function(require,module,exports){
module.exports = frustum;

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};
},{}],57:[function(require,module,exports){
module.exports = identity;

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};
},{}],58:[function(require,module,exports){
module.exports = {
  create: require('./create')
  , clone: require('./clone')
  , copy: require('./copy')
  , identity: require('./identity')
  , transpose: require('./transpose')
  , invert: require('./invert')
  , adjoint: require('./adjoint')
  , determinant: require('./determinant')
  , multiply: require('./multiply')
  , translate: require('./translate')
  , scale: require('./scale')
  , rotate: require('./rotate')
  , rotateX: require('./rotateX')
  , rotateY: require('./rotateY')
  , rotateZ: require('./rotateZ')
  , fromRotation: require('./fromRotation')
  , fromRotationTranslation: require('./fromRotationTranslation')
  , fromScaling: require('./fromScaling')
  , fromTranslation: require('./fromTranslation')
  , fromXRotation: require('./fromXRotation')
  , fromYRotation: require('./fromYRotation')
  , fromZRotation: require('./fromZRotation')
  , fromQuat: require('./fromQuat')
  , frustum: require('./frustum')
  , perspective: require('./perspective')
  , perspectiveFromFieldOfView: require('./perspectiveFromFieldOfView')
  , ortho: require('./ortho')
  , lookAt: require('./lookAt')
  , str: require('./str')
}

},{"./adjoint":43,"./clone":44,"./copy":45,"./create":46,"./determinant":47,"./fromQuat":48,"./fromRotation":49,"./fromRotationTranslation":50,"./fromScaling":51,"./fromTranslation":52,"./fromXRotation":53,"./fromYRotation":54,"./fromZRotation":55,"./frustum":56,"./identity":57,"./invert":59,"./lookAt":60,"./multiply":61,"./ortho":62,"./perspective":63,"./perspectiveFromFieldOfView":64,"./rotate":65,"./rotateX":66,"./rotateY":67,"./rotateZ":68,"./scale":69,"./str":70,"./translate":71,"./transpose":72}],59:[function(require,module,exports){
module.exports = invert;

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};
},{}],60:[function(require,module,exports){
var identity = require('./identity');

module.exports = lookAt;

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < 0.000001 &&
        Math.abs(eyey - centery) < 0.000001 &&
        Math.abs(eyez - centerz) < 0.000001) {
        return identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};
},{"./identity":57}],61:[function(require,module,exports){
module.exports = multiply;

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};
},{}],62:[function(require,module,exports){
module.exports = ortho;

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};
},{}],63:[function(require,module,exports){
module.exports = perspective;

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};
},{}],64:[function(require,module,exports){
module.exports = perspectiveFromFieldOfView;

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}


},{}],65:[function(require,module,exports){
module.exports = rotate;

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < 0.000001) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};
},{}],66:[function(require,module,exports){
module.exports = rotateX;

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};
},{}],67:[function(require,module,exports){
module.exports = rotateY;

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};
},{}],68:[function(require,module,exports){
module.exports = rotateZ;

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};
},{}],69:[function(require,module,exports){
module.exports = scale;

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};
},{}],70:[function(require,module,exports){
module.exports = str;

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};
},{}],71:[function(require,module,exports){
module.exports = translate;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};
},{}],72:[function(require,module,exports){
module.exports = transpose;

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};
},{}],73:[function(require,module,exports){
module.exports = add;

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
    out[0] = a[0] + b[0]
    out[1] = a[1] + b[1]
    out[2] = a[2] + b[2]
    return out
}
},{}],74:[function(require,module,exports){
module.exports = angle

var fromValues = require('./fromValues')
var normalize = require('./normalize')
var dot = require('./dot')

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
    var tempA = fromValues(a[0], a[1], a[2])
    var tempB = fromValues(b[0], b[1], b[2])
 
    normalize(tempA, tempA)
    normalize(tempB, tempB)
 
    var cosine = dot(tempA, tempB)

    if(cosine > 1.0){
        return 0
    } else {
        return Math.acos(cosine)
    }     
}

},{"./dot":84,"./fromValues":90,"./normalize":101}],75:[function(require,module,exports){
module.exports = ceil

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0])
  out[1] = Math.ceil(a[1])
  out[2] = Math.ceil(a[2])
  return out
}

},{}],76:[function(require,module,exports){
module.exports = clone;

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
function clone(a) {
    var out = new Float32Array(3)
    out[0] = a[0]
    out[1] = a[1]
    out[2] = a[2]
    return out
}
},{}],77:[function(require,module,exports){
module.exports = copy;

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
    out[0] = a[0]
    out[1] = a[1]
    out[2] = a[2]
    return out
}
},{}],78:[function(require,module,exports){
module.exports = create;

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
    var out = new Float32Array(3)
    out[0] = 0
    out[1] = 0
    out[2] = 0
    return out
}
},{}],79:[function(require,module,exports){
module.exports = cross;

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2]

    out[0] = ay * bz - az * by
    out[1] = az * bx - ax * bz
    out[2] = ax * by - ay * bx
    return out
}
},{}],80:[function(require,module,exports){
module.exports = require('./distance')

},{"./distance":81}],81:[function(require,module,exports){
module.exports = distance;

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2]
    return Math.sqrt(x*x + y*y + z*z)
}
},{}],82:[function(require,module,exports){
module.exports = require('./divide')

},{"./divide":83}],83:[function(require,module,exports){
module.exports = divide;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
    out[0] = a[0] / b[0]
    out[1] = a[1] / b[1]
    out[2] = a[2] / b[2]
    return out
}
},{}],84:[function(require,module,exports){
module.exports = dot;

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
}
},{}],85:[function(require,module,exports){
module.exports = 0.000001

},{}],86:[function(require,module,exports){
module.exports = equals

var EPSILON = require('./epsilon')

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  var a0 = a[0]
  var a1 = a[1]
  var a2 = a[2]
  var b0 = b[0]
  var b1 = b[1]
  var b2 = b[2]
  return (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)))
}

},{"./epsilon":85}],87:[function(require,module,exports){
module.exports = exactEquals

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2]
}

},{}],88:[function(require,module,exports){
module.exports = floor

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0])
  out[1] = Math.floor(a[1])
  out[2] = Math.floor(a[2])
  return out
}

},{}],89:[function(require,module,exports){
module.exports = forEach;

var vec = require('./create')()

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
function forEach(a, stride, offset, count, fn, arg) {
        var i, l
        if(!stride) {
            stride = 3
        }

        if(!offset) {
            offset = 0
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length)
        } else {
            l = a.length
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i] 
            vec[1] = a[i+1] 
            vec[2] = a[i+2]
            fn(vec, vec, arg)
            a[i] = vec[0] 
            a[i+1] = vec[1] 
            a[i+2] = vec[2]
        }
        
        return a
}
},{"./create":78}],90:[function(require,module,exports){
module.exports = fromValues;

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
    var out = new Float32Array(3)
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}
},{}],91:[function(require,module,exports){
module.exports = {
  EPSILON: require('./epsilon')
  , create: require('./create')
  , clone: require('./clone')
  , angle: require('./angle')
  , fromValues: require('./fromValues')
  , copy: require('./copy')
  , set: require('./set')
  , equals: require('./equals')
  , exactEquals: require('./exactEquals')
  , add: require('./add')
  , subtract: require('./subtract')
  , sub: require('./sub')
  , multiply: require('./multiply')
  , mul: require('./mul')
  , divide: require('./divide')
  , div: require('./div')
  , min: require('./min')
  , max: require('./max')
  , floor: require('./floor')
  , ceil: require('./ceil')
  , round: require('./round')
  , scale: require('./scale')
  , scaleAndAdd: require('./scaleAndAdd')
  , distance: require('./distance')
  , dist: require('./dist')
  , squaredDistance: require('./squaredDistance')
  , sqrDist: require('./sqrDist')
  , length: require('./length')
  , len: require('./len')
  , squaredLength: require('./squaredLength')
  , sqrLen: require('./sqrLen')
  , negate: require('./negate')
  , inverse: require('./inverse')
  , normalize: require('./normalize')
  , dot: require('./dot')
  , cross: require('./cross')
  , lerp: require('./lerp')
  , random: require('./random')
  , transformMat4: require('./transformMat4')
  , transformMat3: require('./transformMat3')
  , transformQuat: require('./transformQuat')
  , rotateX: require('./rotateX')
  , rotateY: require('./rotateY')
  , rotateZ: require('./rotateZ')
  , forEach: require('./forEach')
}

},{"./add":73,"./angle":74,"./ceil":75,"./clone":76,"./copy":77,"./create":78,"./cross":79,"./dist":80,"./distance":81,"./div":82,"./divide":83,"./dot":84,"./epsilon":85,"./equals":86,"./exactEquals":87,"./floor":88,"./forEach":89,"./fromValues":90,"./inverse":92,"./len":93,"./length":94,"./lerp":95,"./max":96,"./min":97,"./mul":98,"./multiply":99,"./negate":100,"./normalize":101,"./random":102,"./rotateX":103,"./rotateY":104,"./rotateZ":105,"./round":106,"./scale":107,"./scaleAndAdd":108,"./set":109,"./sqrDist":110,"./sqrLen":111,"./squaredDistance":112,"./squaredLength":113,"./sub":114,"./subtract":115,"./transformMat3":116,"./transformMat4":117,"./transformQuat":118}],92:[function(require,module,exports){
module.exports = inverse;

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0]
  out[1] = 1.0 / a[1]
  out[2] = 1.0 / a[2]
  return out
}
},{}],93:[function(require,module,exports){
module.exports = require('./length')

},{"./length":94}],94:[function(require,module,exports){
module.exports = length;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    return Math.sqrt(x*x + y*y + z*z)
}
},{}],95:[function(require,module,exports){
module.exports = lerp;

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2]
    out[0] = ax + t * (b[0] - ax)
    out[1] = ay + t * (b[1] - ay)
    out[2] = az + t * (b[2] - az)
    return out
}
},{}],96:[function(require,module,exports){
module.exports = max;

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
    out[0] = Math.max(a[0], b[0])
    out[1] = Math.max(a[1], b[1])
    out[2] = Math.max(a[2], b[2])
    return out
}
},{}],97:[function(require,module,exports){
module.exports = min;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
    out[0] = Math.min(a[0], b[0])
    out[1] = Math.min(a[1], b[1])
    out[2] = Math.min(a[2], b[2])
    return out
}
},{}],98:[function(require,module,exports){
module.exports = require('./multiply')

},{"./multiply":99}],99:[function(require,module,exports){
module.exports = multiply;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
    out[0] = a[0] * b[0]
    out[1] = a[1] * b[1]
    out[2] = a[2] * b[2]
    return out
}
},{}],100:[function(require,module,exports){
module.exports = negate;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
    out[0] = -a[0]
    out[1] = -a[1]
    out[2] = -a[2]
    return out
}
},{}],101:[function(require,module,exports){
module.exports = normalize;

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    var len = x*x + y*y + z*z
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len)
        out[0] = a[0] * len
        out[1] = a[1] * len
        out[2] = a[2] * len
    }
    return out
}
},{}],102:[function(require,module,exports){
module.exports = random;

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
    scale = scale || 1.0

    var r = Math.random() * 2.0 * Math.PI
    var z = (Math.random() * 2.0) - 1.0
    var zScale = Math.sqrt(1.0-z*z) * scale

    out[0] = Math.cos(r) * zScale
    out[1] = Math.sin(r) * zScale
    out[2] = z * scale
    return out
}
},{}],103:[function(require,module,exports){
module.exports = rotateX;

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c){
    var by = b[1]
    var bz = b[2]

    // Translate point to the origin
    var py = a[1] - by
    var pz = a[2] - bz

    var sc = Math.sin(c)
    var cc = Math.cos(c)

    // perform rotation and translate to correct position
    out[0] = a[0]
    out[1] = by + py * cc - pz * sc
    out[2] = bz + py * sc + pz * cc

    return out
}

},{}],104:[function(require,module,exports){
module.exports = rotateY;

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c){
    var bx = b[0]
    var bz = b[2]

    // translate point to the origin
    var px = a[0] - bx
    var pz = a[2] - bz
    
    var sc = Math.sin(c)
    var cc = Math.cos(c)
  
    // perform rotation and translate to correct position
    out[0] = bx + pz * sc + px * cc
    out[1] = a[1]
    out[2] = bz + pz * cc - px * sc
  
    return out
}

},{}],105:[function(require,module,exports){
module.exports = rotateZ;

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c){
    var bx = b[0]
    var by = b[1]

    //Translate point to the origin
    var px = a[0] - bx
    var py = a[1] - by
  
    var sc = Math.sin(c)
    var cc = Math.cos(c)

    // perform rotation and translate to correct position
    out[0] = bx + px * cc - py * sc
    out[1] = by + px * sc + py * cc
    out[2] = a[2]
  
    return out
}

},{}],106:[function(require,module,exports){
module.exports = round

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
  out[0] = Math.round(a[0])
  out[1] = Math.round(a[1])
  out[2] = Math.round(a[2])
  return out
}

},{}],107:[function(require,module,exports){
module.exports = scale;

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
    out[0] = a[0] * b
    out[1] = a[1] * b
    out[2] = a[2] * b
    return out
}
},{}],108:[function(require,module,exports){
module.exports = scaleAndAdd;

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale)
    out[1] = a[1] + (b[1] * scale)
    out[2] = a[2] + (b[2] * scale)
    return out
}
},{}],109:[function(require,module,exports){
module.exports = set;

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
    out[0] = x
    out[1] = y
    out[2] = z
    return out
}
},{}],110:[function(require,module,exports){
module.exports = require('./squaredDistance')

},{"./squaredDistance":112}],111:[function(require,module,exports){
module.exports = require('./squaredLength')

},{"./squaredLength":113}],112:[function(require,module,exports){
module.exports = squaredDistance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2]
    return x*x + y*y + z*z
}
},{}],113:[function(require,module,exports){
module.exports = squaredLength;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
    var x = a[0],
        y = a[1],
        z = a[2]
    return x*x + y*y + z*z
}
},{}],114:[function(require,module,exports){
module.exports = require('./subtract')

},{"./subtract":115}],115:[function(require,module,exports){
module.exports = subtract;

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
    out[0] = a[0] - b[0]
    out[1] = a[1] - b[1]
    out[2] = a[2] - b[2]
    return out
}
},{}],116:[function(require,module,exports){
module.exports = transformMat3;

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2]
    out[0] = x * m[0] + y * m[3] + z * m[6]
    out[1] = x * m[1] + y * m[4] + z * m[7]
    out[2] = x * m[2] + y * m[5] + z * m[8]
    return out
}
},{}],117:[function(require,module,exports){
module.exports = transformMat4;

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15]
    w = w || 1.0
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w
    return out
}
},{}],118:[function(require,module,exports){
module.exports = transformQuat;

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx
    return out
}
},{}],119:[function(require,module,exports){
var Emitter = require('events/')

module.exports = attach

function attach(element, listener) {
  var position = new Emitter

  position[0] = 0
  position[1] = 0
  position.prev = [0, 0]
  position.flush = flush
  position.dispose = dispose

  if (typeof window === 'undefined') {
    return position
  }

  listener = listener || element || window
  element  = element  || document.body
  var handler = (element === document.body || element === window
  ) ? function(e) {
    position.prev[0] = position[0]
    position.prev[1] = position[1]
    position[0] = e.clientX
    position[1] = e.clientY
    position.emit('move', e)
  }
    : function(e) {
      position.prev[0] = position[0]
      position.prev[1] = position[1]
      var bounds = element.getBoundingClientRect()
      position[0] = e.clientX - bounds.left
      position[1] = e.clientY - bounds.top
      position.emit('move', e)
    }
  listener.addEventListener('mousemove', handler, false)

  return position

  function flush() {
    position.prev[0] = position[0]
    position.prev[1] = position[1]
  }

  function dispose() {
    position.removeAllListeners('move')
    listener.removeEventListener('mousemove', handler)
  }

}

},{"events/":42}],120:[function(require,module,exports){
var Emitter = require('events/')
var map = [
  'left',
  'middle',
  'right'
]

module.exports = pressed

function pressed (element, preventDefault) {
  var mouse = new Emitter()

  mouse.left = false
  mouse.right = false
  mouse.middle = false
  mouse.dispose = dispose

  if (typeof window !== 'undefined') {
    element = element || window
    element.addEventListener('mousedown', mousedown, false)
    window.addEventListener('mouseup', mouseup, false)

    if (preventDefault) {
      element.addEventListener('contextmenu', preventDefaulter, false)
    }
  }

  return mouse

  function mousedown (e) {
    mouse.right = false
    mouse[map[e.button]] = true
    mouse.emit('down', e)

    if (!preventDefault) return
    if (!e.preventDefault) return false
    e.preventDefault()
    e.stopPropagation()
  }

  function mouseup (e) {
    mouse.right = false
    mouse[map[e.button]] = false
    mouse.emit('up', e)

    if (!preventDefault) return
    if (!e.preventDefault) return
    e.preventDefault()
    e.stopPropagation()
  }

  function preventDefaulter (e) {
    return e.preventDefault && e.preventDefault() && false
  }

  function dispose () {
    mouse.left = false
    mouse.right = false
    mouse.middle = false

    if (element) {
      element.removeEventListener('contextmenu', preventDefaulter, false)
      element.removeEventListener('mousedown', mousedown, false)
      window.removeEventListener('mouseup', mouseup, false)
    }
  }
}

},{"events/":42}],121:[function(require,module,exports){
var check = require('./lib/util/check');
var extend = require('./lib/util/extend');
var dynamic = require('./lib/dynamic');
var raf = require('./lib/util/raf');
var clock = require('./lib/util/clock');
var createStringStore = require('./lib/strings');
var initWebGL = require('./lib/webgl');
var wrapExtensions = require('./lib/extension');
var wrapLimits = require('./lib/limits');
var wrapBuffers = require('./lib/buffer');
var wrapElements = require('./lib/elements');
var wrapTextures = require('./lib/texture');
var wrapRenderbuffers = require('./lib/renderbuffer');
var wrapFramebuffers = require('./lib/framebuffer');
var wrapAttributes = require('./lib/attribute');
var wrapShaders = require('./lib/shader');
var wrapRead = require('./lib/read');
var createCore = require('./lib/core');
var createStats = require('./lib/stats');
var createTimer = require('./lib/timer');

var GL_COLOR_BUFFER_BIT = 16384;
var GL_DEPTH_BUFFER_BIT = 256;
var GL_STENCIL_BUFFER_BIT = 1024;

var GL_ARRAY_BUFFER = 34962;

var CONTEXT_LOST_EVENT = 'webglcontextlost';
var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';

var DYN_PROP = 1;
var DYN_CONTEXT = 2;
var DYN_STATE = 3;

function find(haystack, needle) {
  for (var i = 0; i < haystack.length; ++i) {
    if (haystack[i] === needle) {
      return i;
    }
  }
  return -1;
}

module.exports = function wrapREGL(args) {
  console.log("REGL args are:", args);
  var config = initWebGL(args);
  if (!config) {
    return null;
  }

  var gl = config.gl;
  var glAttributes = gl.getContextAttributes();
  var contextLost = gl.isContextLost();

  var extensionState = wrapExtensions(gl, config);
  if (!extensionState) {
    return null;
  }

  var stringStore = createStringStore();
  var stats = createStats();
  var extensions = extensionState.extensions;
  var timer = createTimer(gl, extensions);

  var START_TIME = clock();
  var WIDTH = gl.drawingBufferWidth;
  var HEIGHT = gl.drawingBufferHeight;

  var contextState = {
    tick: 0,
    time: 0,
    viewportWidth: WIDTH,
    viewportHeight: HEIGHT,
    framebufferWidth: WIDTH,
    framebufferHeight: HEIGHT,
    drawingBufferWidth: WIDTH,
    drawingBufferHeight: HEIGHT,
    pixelRatio: config.pixelRatio
  };
  var uniformState = {};
  var drawState = {
    elements: null,
    primitive: 4, // GL_TRIANGLES
    count: -1,
    offset: 0,
    instances: -1
  };

  var limits = wrapLimits(gl, extensions);
  var bufferState = wrapBuffers(gl, stats, config, destroyBuffer);
  var elementState = wrapElements(gl, extensions, bufferState, stats);
  var attributeState = wrapAttributes(gl, extensions, limits, stats, bufferState, elementState, drawState);
  function destroyBuffer(buffer) {
    return attributeState.destroyBuffer(buffer);
  }
  var shaderState = wrapShaders(gl, stringStore, stats, config);
  var textureState = wrapTextures(gl, extensions, limits, function () {
    core.procs.poll();
  }, contextState, stats, config);
  var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats, config);
  var framebufferState = wrapFramebuffers(gl, extensions, limits, textureState, renderbufferState, stats);
  var core = createCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config);
  var readPixels = wrapRead(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);

  var nextState = core.next;
  var canvas = gl.canvas;

  var rafCallbacks = [];
  var lossCallbacks = [];
  var restoreCallbacks = [];
  var destroyCallbacks = [config.onDestroy];

  var activeRAF = null;
  function handleRAF() {
    if (rafCallbacks.length === 0) {
      if (timer) {
        timer.update();
      }
      activeRAF = null;
      return;
    }

    // schedule next animation frame
    activeRAF = raf.next(handleRAF);

    // poll for changes
    poll();

    // fire a callback for all pending rafs
    for (var i = rafCallbacks.length - 1; i >= 0; --i) {
      var cb = rafCallbacks[i];
      if (cb) {
        cb(contextState, null, 0);
      }
    }

    // flush all pending webgl calls
    gl.flush();

    // poll GPU timers *after* gl.flush so we don't delay command dispatch
    if (timer) {
      timer.update();
    }
  }

  function startRAF() {
    if (!activeRAF && rafCallbacks.length > 0) {
      activeRAF = raf.next(handleRAF);
    }
  }

  function stopRAF() {
    if (activeRAF) {
      raf.cancel(handleRAF);
      activeRAF = null;
    }
  }

  function handleContextLoss(event) {
    event.preventDefault();

    // set context lost flag
    contextLost = true;

    // pause request animation frame
    stopRAF();

    // lose context
    lossCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function handleContextRestored(event) {
    // clear error code
    gl.getError();

    // clear context lost flag
    contextLost = false;

    // refresh state
    extensionState.restore();
    shaderState.restore();
    bufferState.restore();
    textureState.restore();
    renderbufferState.restore();
    framebufferState.restore();
    attributeState.restore();
    if (timer) {
      timer.restore();
    }

    // refresh state
    core.procs.refresh();

    // restart RAF
    startRAF();

    // restore context
    restoreCallbacks.forEach(function (cb) {
      cb();
    });
  }

  if (canvas) {
    canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
    canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
  }

  function destroy() {
    rafCallbacks.length = 0;
    stopRAF();

    if (canvas) {
      canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
      canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
    }

    shaderState.clear();
    framebufferState.clear();
    renderbufferState.clear();
    attributeState.clear();
    textureState.clear();
    elementState.clear();
    bufferState.clear();

    if (timer) {
      timer.clear();
    }

    destroyCallbacks.forEach(function (cb) {
      cb();
    });
  }

  function compileProcedure(options) {
    check(!!options, 'invalid args to regl({...})');
    check.type(options, 'object', 'invalid args to regl({...})');

    function flattenNestedOptions(options) {
      var result = extend({}, options);
      delete result.uniforms;
      delete result.attributes;
      delete result.context;
      delete result.vao;

      if ('stencil' in result && result.stencil.op) {
        result.stencil.opBack = result.stencil.opFront = result.stencil.op;
        delete result.stencil.op;
      }

      function merge(name) {
        if (name in result) {
          var child = result[name];
          delete result[name];
          Object.keys(child).forEach(function (prop) {
            result[name + '.' + prop] = child[prop];
          });
        }
      }
      merge('blend');
      merge('depth');
      merge('cull');
      merge('stencil');
      merge('polygonOffset');
      merge('scissor');
      merge('sample');

      if ('vao' in options) {
        result.vao = options.vao;
      }

      return result;
    }

    function separateDynamic(object, useArrays) {
      var staticItems = {};
      var dynamicItems = {};
      Object.keys(object).forEach(function (option) {
        var value = object[option];
        if (dynamic.isDynamic(value)) {
          dynamicItems[option] = dynamic.unbox(value, option);
          return;
        } else if (useArrays && Array.isArray(value)) {
          for (var i = 0; i < value.length; ++i) {
            if (dynamic.isDynamic(value[i])) {
              dynamicItems[option] = dynamic.unbox(value, option);
              return;
            }
          }
        }
        staticItems[option] = value;
      });
      return {
        dynamic: dynamicItems,
        static: staticItems
      };
    }

    // Treat context variables separate from other dynamic variables
    var context = separateDynamic(options.context || {}, true);
    var uniforms = separateDynamic(options.uniforms || {}, true);
    var attributes = separateDynamic(options.attributes || {}, false);
    var opts = separateDynamic(flattenNestedOptions(options), false);

    var stats = {
      gpuTime: 0.0,
      cpuTime: 0.0,
      count: 0
    };

    var compiled = core.compile(opts, attributes, uniforms, context, stats);

    var draw = compiled.draw;
    var batch = compiled.batch;
    var scope = compiled.scope;

    // FIXME: we should modify code generation for batch commands so this
    // isn't necessary
    var EMPTY_ARRAY = [];
    function reserve(count) {
      while (EMPTY_ARRAY.length < count) {
        EMPTY_ARRAY.push(null);
      }
      return EMPTY_ARRAY;
    }

    function REGLCommand(args, body) {
      var i;
      if (contextLost) {
        check.raise('context lost');
      }
      if (typeof args === 'function') {
        return scope.call(this, null, args, 0);
      } else if (typeof body === 'function') {
        if (typeof args === 'number') {
          for (i = 0; i < args; ++i) {
            scope.call(this, null, body, i);
          }
        } else if (Array.isArray(args)) {
          for (i = 0; i < args.length; ++i) {
            scope.call(this, args[i], body, i);
          }
        } else {
          return scope.call(this, args, body, 0);
        }
      } else if (typeof args === 'number') {
        if (args > 0) {
          return batch.call(this, reserve(args | 0), args | 0);
        }
      } else if (Array.isArray(args)) {
        if (args.length) {
          return batch.call(this, args, args.length);
        }
      } else {
        return draw.call(this, args);
      }
    }

    return extend(REGLCommand, {
      stats: stats,
      destroy: function () {
        compiled.destroy();
      }
    });
  }

  var setFBO = framebufferState.setFBO = compileProcedure({
    framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')
  });

  function clearImpl(_, options) {
    var clearFlags = 0;
    core.procs.poll();

    var c = options.color;
    if (c) {
      gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
      clearFlags |= GL_COLOR_BUFFER_BIT;
    }
    if ('depth' in options) {
      gl.clearDepth(+options.depth);
      clearFlags |= GL_DEPTH_BUFFER_BIT;
    }
    if ('stencil' in options) {
      gl.clearStencil(options.stencil | 0);
      clearFlags |= GL_STENCIL_BUFFER_BIT;
    }

    check(!!clearFlags, 'called regl.clear with no buffer specified');
    gl.clear(clearFlags);
  }

  function clear(options) {
    check(typeof options === 'object' && options, 'regl.clear() takes an object as input');
    if ('framebuffer' in options) {
      if (options.framebuffer && options.framebuffer_reglType === 'framebufferCube') {
        for (var i = 0; i < 6; ++i) {
          setFBO(extend({
            framebuffer: options.framebuffer.faces[i]
          }, options), clearImpl);
        }
      } else {
        setFBO(options, clearImpl);
      }
    } else {
      clearImpl(null, options);
    }
  }

  function frame(cb) {
    check.type(cb, 'function', 'regl.frame() callback must be a function');
    rafCallbacks.push(cb);

    function cancel() {
      // FIXME:  should we check something other than equals cb here?
      // what if a user calls frame twice with the same callback...
      //
      var i = find(rafCallbacks, cb);
      check(i >= 0, 'cannot cancel a frame twice');
      function pendingCancel() {
        var index = find(rafCallbacks, pendingCancel);
        rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
        rafCallbacks.length -= 1;
        if (rafCallbacks.length <= 0) {
          stopRAF();
        }
      }
      rafCallbacks[i] = pendingCancel;
    }

    startRAF();

    return {
      cancel: cancel
    };
  }

  // poll viewport
  function pollViewport() {
    var viewport = nextState.viewport;
    var scissorBox = nextState.scissor_box;
    viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
    contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;
    contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;
  }

  function poll() {
    contextState.tick += 1;
    contextState.time = now();
    pollViewport();
    core.procs.poll();
  }

  function refresh() {
    textureState.refresh();
    pollViewport();
    core.procs.refresh();
    if (timer) {
      timer.update();
    }
  }

  function now() {
    return (clock() - START_TIME) / 1000.0;
  }

  refresh();

  function addListener(event, callback) {
    check.type(callback, 'function', 'listener callback must be a function');

    var callbacks;
    switch (event) {
      case 'frame':
        return frame(callback);
      case 'lost':
        callbacks = lossCallbacks;
        break;
      case 'restore':
        callbacks = restoreCallbacks;
        break;
      case 'destroy':
        callbacks = destroyCallbacks;
        break;
      default:
        check.raise('invalid event, must be one of frame,lost,restore,destroy');
    }

    callbacks.push(callback);
    return {
      cancel: function () {
        for (var i = 0; i < callbacks.length; ++i) {
          if (callbacks[i] === callback) {
            callbacks[i] = callbacks[callbacks.length - 1];
            callbacks.pop();
            return;
          }
        }
      }
    };
  }

  var regl = extend(compileProcedure, {
    // Clear current FBO
    clear: clear,

    // Short cuts for dynamic variables
    prop: dynamic.define.bind(null, DYN_PROP),
    context: dynamic.define.bind(null, DYN_CONTEXT),
    this: dynamic.define.bind(null, DYN_STATE),

    // executes an empty draw command
    draw: compileProcedure({}),

    // Resources
    buffer: function (options) {
      return bufferState.create(options, GL_ARRAY_BUFFER, false, false);
    },
    elements: function (options) {
      return elementState.create(options, false);
    },
    texture: textureState.create2D,
    cube: textureState.createCube,
    renderbuffer: renderbufferState.create,
    framebuffer: framebufferState.create,
    framebufferCube: framebufferState.createCube,
    vao: attributeState.createVAO,

    // Expose context attributes
    attributes: glAttributes,

    // Frame rendering
    frame: frame,
    on: addListener,

    // System limits
    limits: limits,
    hasExtension: function (name) {
      return limits.extensions.indexOf(name.toLowerCase()) >= 0;
    },

    // Read pixels
    read: readPixels,

    // Destroy regl and all associated resources
    destroy: destroy,

    // Direct GL state manipulation
    _gl: gl,
    _refresh: refresh,

    poll: function () {
      poll();
      if (timer) {
        timer.update();
      }
    },

    // Current time
    now: now,

    // regl Statistics Information
    stats: stats
  });

  config.onDone(null, regl);

  return regl;
};

},{"./lib/attribute":2,"./lib/buffer":3,"./lib/core":8,"./lib/dynamic":9,"./lib/elements":10,"./lib/extension":11,"./lib/framebuffer":12,"./lib/limits":13,"./lib/read":14,"./lib/renderbuffer":15,"./lib/shader":16,"./lib/stats":17,"./lib/strings":18,"./lib/texture":19,"./lib/timer":20,"./lib/util/check":21,"./lib/util/clock":22,"./lib/util/extend":25,"./lib/util/raf":33,"./lib/webgl":37}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
